openapi: 3.0.1
info:
  contact:
    email: dev@nifi.apache.org
    url: https://nifi.apache.org
  description: REST API definition for Apache NiFi web services
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Apache NiFi REST API
  version: 2.4.0
paths:
  /access/logout:
    delete:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: logOut
      responses:
        "200":
          description: User was logged out successfully.
        "401":
          description: Authentication token provided was empty or not in the correct
            JWT format.
        "500":
          description: Client failed to log out.
      summary: Performs a logout for other providers that have been issued a JWT.
      tags:
      - Access
  /access/logout/complete:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: logOutComplete
      responses:
        "302":
          description: User was logged out successfully.
        "401":
          description: Authentication token provided was empty or not in the correct
            JWT format.
        "500":
          description: Client failed to log out.
      summary: Completes the logout sequence by removing the cached Logout Request
        and Cookie if they existed and redirects to /nifi/login.
      tags:
      - Access
  /access/token:
    post:
      description: "The token returned is formatted as a JSON Web Token (JWT). The\
        \ token is base64 encoded and comprised of three parts. The header, the body,\
        \ and the signature. The expiration of the token is a contained within the\
        \ body. It is stored in the browser as a cookie, but also returned inthe response\
        \ body to be stored/used by third party client scripts."
      operationId: createAccessToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                username:
                  type: string
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
        "500":
          description: Unable to create access token because an unexpected error occurred.
      summary: Creates a token for accessing the REST API via username/password
      tags:
      - Access
  /authentication/configuration:
    get:
      operationId: getAuthenticationConfiguration
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationConfigurationEntity"
      summary: Retrieves the authentication configuration endpoint and status information
      tags:
      - Authentication
  /connections/{id}:
    delete:
      operationId: deleteConnection
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write Source - /{component-type}/{uuid}: []
      - Write - Parent Process Group - /process-groups/{uuid}: []
      - Write Destination - /{component-type}/{uuid}: []
      summary: Deletes a connection
      tags:
      - Connections
    get:
      operationId: getConnection
      parameters:
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read Source - /{component-type}/{uuid}: []
      - Read Destination - /{component-type}/{uuid}: []
      summary: Gets a connection
      tags:
      - Connections
    put:
      operationId: updateConnection
      parameters:
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionEntity"
        description: The connection configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write Source - /{component-type}/{uuid}: []
      - Write Destination - /{component-type}/{uuid}: []
      - Write New Destination - /{component-type}/{uuid} - if updating Destination: []
      - Write Process Group - /process-groups/{uuid} - if updating Destination: []
      summary: Updates a connection
      tags:
      - Connections
  /controller-services/{id}:
    delete:
      operationId: removeControllerService
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServiceEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller-services/{uuid}: []
      - Write - Parent Process Group if scoped by Process Group - /process-groups/{uuid}: []
      - Write - Controller if scoped by Controller - /controller: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      summary: Deletes a controller service
      tags:
      - Controller Services
    get:
      description: "If the uiOnly query parameter is provided with a value of true,\
        \ the returned entity may only contain fields that are necessary for rendering\
        \ the NiFi User Interface. As such, the selected fields may change at any\
        \ time, even during incremental releases, without warning. As a result, this\
        \ parameter should not be provided by any client other than the UI."
      operationId: getControllerService
      parameters:
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: uiOnly
        schema:
          type: boolean
          default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServiceEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller-services/{uuid}: []
      summary: Gets a controller service
      tags:
      - Controller Services
    put:
      operationId: updateControllerService
      parameters:
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ControllerServiceEntity"
        description: The controller service configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServiceEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller-services/{uuid}: []
      - Read - any referenced Controller Services if this request changes the reference - /controller-services/{uuid}: []
      summary: Updates a controller service
      tags:
      - Controller Services
  /controller-services/{id}/config/analysis:
    post:
      operationId: analyzeConfiguration
      parameters:
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationAnalysisEntity"
        description: The configuration analysis request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationAnalysisEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller-services/{uuid}: []
      summary: "Performs analysis of the component's configuration, providing information\
        \ about which attributes are referenced."
      tags:
      - Controller Services
  /controller-services/{id}/config/verification-requests:
    post:
      description: "This will initiate the process of verifying a given Controller\
        \ Service configuration. This may be a long-running task. As a result, this\
        \ endpoint will immediately return a ControllerServiceConfigVerificationRequestEntity,\
        \ and the process of performing the verification will occur asynchronously\
        \ in the background. The client may then periodically poll the status of the\
        \ request by issuing a GET request to /controller-services/{serviceId}/verification-requests/{requestId}.\
        \ Once the request is completed, the client is expected to issue a DELETE\
        \ request to /controller-services/{serviceId}/verification-requests/{requestId}."
      operationId: submitConfigVerificationRequest
      parameters:
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyConfigRequestEntity"
        description: The controller service configuration verification request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller-services/{uuid}: []
      summary: Performs verification of the Controller Service's configuration
      tags:
      - Controller Services
  /controller-services/{id}/config/verification-requests/{requestId}:
    delete:
      description: "Deletes the Verification Request with the given ID. After a request\
        \ is created, it is expected that the client will properly clean up the request\
        \ by DELETE'ing it, once the Verification process has completed. If the request\
        \ is deleted before the request completes, then the Verification request will\
        \ finish the step that it is currently performing and then will cancel any\
        \ subsequent steps."
      operationId: deleteVerificationRequest
      parameters:
      - description: The ID of the Controller Service
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Verification Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Verification Request with the given ID
      tags:
      - Controller Services
    get:
      description: "Returns the Verification Request with the given ID. Once an Verification\
        \ Request has been created, that request can subsequently be retrieved via\
        \ this endpoint, and the request that is fetched will contain the updated\
        \ state, such as percent complete, the current state of the request, and any\
        \ failures. "
      operationId: getVerificationRequest
      parameters:
      - description: The ID of the Controller Service
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Verification Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Verification Request with the given ID
      tags:
      - Controller Services
  /controller-services/{id}/descriptors:
    get:
      operationId: getPropertyDescriptor_1
      parameters:
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The property name to return the descriptor for.
        in: query
        name: propertyName
        required: true
        schema:
          type: string
      - description: Property Descriptor requested sensitive status
        in: query
        name: sensitive
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyDescriptorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller-services/{uuid}: []
      summary: Gets a controller service property descriptor
      tags:
      - Controller Services
  /controller-services/{id}/references:
    get:
      operationId: getControllerServiceReferences
      parameters:
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServiceReferencingComponentsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller-services/{uuid}: []
      summary: Gets a controller service
      tags:
      - Controller Services
    put:
      operationId: updateControllerServiceReferences
      parameters:
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateControllerServiceReferenceRequestEntity"
        description: The controller service request update request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServiceReferencingComponentsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /{component-type}/{uuid} or /operate/{component-type}/{uuid} - For each referencing component specified: []
      summary: Updates a controller services references
      tags:
      - Controller Services
  /controller-services/{id}/run-status:
    put:
      operationId: updateRunStatus_1
      parameters:
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ControllerServiceRunStatusEntity"
        description: The controller service run status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServiceEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller-services/{uuid} or /operation/controller-services/{uuid}: []
      summary: Updates run status of a controller service
      tags:
      - Controller Services
  /controller-services/{id}/state:
    get:
      operationId: getState
      parameters:
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller-services/{uuid}: []
      summary: Gets the state for a controller service
      tags:
      - Controller Services
  /controller-services/{id}/state/clear-requests:
    post:
      operationId: clearState_1
      parameters:
      - description: The controller service id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller-services/{uuid}: []
      summary: Clears the state for a controller service
      tags:
      - Controller Services
  /controller/bulletin:
    post:
      operationId: createBulletin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulletinEntity"
        description: The reporting task configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulletinEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Creates a new bulletin
      tags:
      - Controller
  /controller/cluster:
    get:
      description: Returns the contents of the cluster including all nodes and their
        status.
      operationId: getCluster
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller: []
      summary: Gets the contents of the cluster
      tags:
      - Controller
  /controller/cluster/nodes/{id}:
    delete:
      operationId: deleteNode
      parameters:
      - description: The node id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Removes a node from the cluster
      tags:
      - Controller
    get:
      operationId: getNode
      parameters:
      - description: The node id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller: []
      summary: Gets a node in the cluster
      tags:
      - Controller
    put:
      operationId: updateNode
      parameters:
      - description: The node id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeEntity"
        description: The node configuration. The only configuration that will be honored
          at this endpoint is the status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Updates a node in the cluster
      tags:
      - Controller
  /controller/config:
    get:
      operationId: getControllerConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerConfigurationEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller: []
      summary: Retrieves the configuration for this NiFi Controller
      tags:
      - Controller
    put:
      operationId: updateControllerConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ControllerConfigurationEntity"
        description: The controller configuration.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerConfigurationEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Retrieves the configuration for this NiFi
      tags:
      - Controller
  /controller/controller-services:
    post:
      operationId: createControllerService
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ControllerServiceEntity"
        description: The controller service configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServiceEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      - Write - if the Controller Service is restricted - /restricted-components: []
      summary: Creates a new controller service
      tags:
      - Controller
  /controller/flow-analysis-rules:
    get:
      operationId: getFlowAnalysisRules
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowAnalysisRulesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets all flow analysis rules
      tags:
      - Controller
    post:
      operationId: createFlowAnalysisRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowAnalysisRuleEntity"
        description: The flow analysis rule configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowAnalysisRuleEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      - Write - if the Flow Analysis Rule is restricted - /restricted-components: []
      summary: Creates a new flow analysis rule
      tags:
      - Controller
  /controller/flow-analysis-rules/{id}:
    delete:
      operationId: removeFlowAnalysisRule
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The flow analysis rule id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowAnalysisRuleEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /flow-analysis-rules/{uuid}: []
      - Write - /controller: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      summary: Deletes a flow analysis rule
      tags:
      - Controller
    get:
      operationId: getFlowAnalysisRule
      parameters:
      - description: The flow analysis rule id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowAnalysisRuleEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow-analysis-rules/{uuid}: []
      summary: Gets a flow analysis rule
      tags:
      - Controller
    put:
      operationId: updateFlowAnalysisRule
      parameters:
      - description: The flow analysis rule id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowAnalysisRuleEntity"
        description: The flow analysis rule configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowAnalysisRuleEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /flow-analysis-rules/{uuid}: []
      - Read - any referenced Controller Services if this request changes the reference - /controller-services/{uuid}: []
      summary: Updates a flow analysis rule
      tags:
      - Controller
  /controller/flow-analysis-rules/{id}/config/analysis:
    post:
      operationId: analyzeFlowAnalysisRuleConfiguration
      parameters:
      - description: The flow analysis rules id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationAnalysisEntity"
        description: The configuration analysis request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationAnalysisEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow-analysis-rules/{uuid}: []
      summary: "Performs analysis of the component's configuration, providing information\
        \ about which attributes are referenced."
      tags:
      - Controller
  /controller/flow-analysis-rules/{id}/config/verification-requests:
    post:
      description: "This will initiate the process of verifying a given Flow Analysis\
        \ Rule configuration. This may be a long-running task. As a result, this endpoint\
        \ will immediately return a FlowAnalysisRuleConfigVerificationRequestEntity,\
        \ and the process of performing the verification will occur asynchronously\
        \ in the background. The client may then periodically poll the status of the\
        \ request by issuing a GET request to /flow-analysis-rules/{taskId}/verification-requests/{requestId}.\
        \ Once the request is completed, the client is expected to issue a DELETE\
        \ request to /flow-analysis-rules/{serviceId}/verification-requests/{requestId}."
      operationId: submitFlowAnalysisRuleConfigVerificationRequest
      parameters:
      - description: The flow analysis rules id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyConfigRequestEntity"
        description: The flow analysis rules configuration verification request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow-analysis-rules/{uuid}: []
      summary: Performs verification of the Flow Analysis Rule's configuration
      tags:
      - Controller
  /controller/flow-analysis-rules/{id}/config/verification-requests/{requestId}:
    delete:
      description: "Deletes the Verification Request with the given ID. After a request\
        \ is created, it is expected that the client will properly clean up the request\
        \ by DELETE'ing it, once the Verification process has completed. If the request\
        \ is deleted before the request completes, then the Verification request will\
        \ finish the step that it is currently performing and then will cancel any\
        \ subsequent steps."
      operationId: deleteFlowAnalysisRuleVerificationRequest
      parameters:
      - description: The ID of the Flow Analysis Rule
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Verification Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Verification Request with the given ID
      tags:
      - Controller
    get:
      description: "Returns the Verification Request with the given ID. Once an Verification\
        \ Request has been created, that request can subsequently be retrieved via\
        \ this endpoint, and the request that is fetched will contain the updated\
        \ state, such as percent complete, the current state of the request, and any\
        \ failures. "
      operationId: getFlowAnalysisRuleVerificationRequest
      parameters:
      - description: The ID of the Flow Analysis Rule
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Verification Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Verification Request with the given ID
      tags:
      - Controller
  /controller/flow-analysis-rules/{id}/descriptors:
    get:
      operationId: getFlowAnalysisRulePropertyDescriptor
      parameters:
      - description: The flow analysis rule id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The property name.
        in: query
        name: propertyName
        required: true
        schema:
          type: string
      - description: Property Descriptor requested sensitive status
        in: query
        name: sensitive
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyDescriptorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow-analysis-rules/{uuid}: []
      summary: Gets a flow analysis rule property descriptor
      tags:
      - Controller
  /controller/flow-analysis-rules/{id}/run-status:
    put:
      operationId: updateRunStatus
      parameters:
      - description: The flow analysis rule id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowAnalysisRuleRunStatusEntity"
        description: The flow analysis rule run status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowAnalysisRuleEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /flow-analysis-rules/{uuid} or  or /operation/flow-analysis-rules/{uuid}: []
      summary: Updates run status of a flow analysis rule
      tags:
      - Controller
  /controller/flow-analysis-rules/{id}/state:
    get:
      operationId: getFlowAnalysisRuleState
      parameters:
      - description: The flow analysis rule id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /flow-analysis-rules/{uuid}: []
      summary: Gets the state for a flow analysis rule
      tags:
      - Controller
  /controller/flow-analysis-rules/{id}/state/clear-requests:
    post:
      operationId: clearState
      parameters:
      - description: The flow analysis rule id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /flow-analysis-rules/{uuid}: []
      summary: Clears the state for a flow analysis rule
      tags:
      - Controller
  /controller/history:
    delete:
      operationId: deleteHistory
      parameters:
      - description: Purge actions before this date/time.
        in: query
        name: endDate
        required: true
        schema:
          $ref: "#/components/schemas/DateTimeParameter"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Purges history
      tags:
      - Controller
  /controller/nar-manager/nars:
    get:
      operationId: getNarSummaries
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NarSummariesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller: []
      summary: Retrieves summary information for installed NARs
      tags:
      - Controller
  /controller/nar-manager/nars/content:
    post:
      operationId: uploadNar
      parameters:
      - in: header
        name: Filename
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
        description: The contents of the NAR file.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NarSummaryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Uploads a NAR and requests for it to be installed
      tags:
      - Controller
  /controller/nar-manager/nars/{id}:
    delete:
      operationId: deleteNar
      parameters:
      - in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - in: query
        name: force
        schema:
          type: boolean
          default: false
      - description: The id of the NAR.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NarSummaryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Deletes an installed NAR
      tags:
      - Controller
    get:
      operationId: getNarSummary
      parameters:
      - description: The id of the NAR.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NarDetailsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller: []
      summary: Retrieves the summary information for the NAR with the given identifier
      tags:
      - Controller
  /controller/nar-manager/nars/{id}/content:
    get:
      operationId: downloadNar
      parameters:
      - description: The id of the NAR.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller: []
      summary: Retrieves the content of the NAR with the given id
      tags:
      - Controller
  /controller/nar-manager/nars/{id}/details:
    get:
      operationId: getNarDetails
      parameters:
      - description: The id of the NAR.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NarDetailsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller: []
      summary: Retrieves the component types available from the installed NARs
      tags:
      - Controller
  /controller/parameter-providers:
    post:
      operationId: createParameterProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterProviderEntity"
        description: The parameter provider configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      - Write - if the Parameter Provider is restricted - /restricted-components: []
      summary: Creates a new parameter provider
      tags:
      - Controller
  /controller/registry-clients:
    get:
      operationId: getFlowRegistryClients
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowRegistryClientsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the listing of available flow registry clients
      tags:
      - Controller
    post:
      operationId: createFlowRegistryClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowRegistryClientEntity"
        description: The flow registry client configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowRegistryClientEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Creates a new flow registry client
      tags:
      - Controller
  /controller/registry-clients/{id}:
    delete:
      operationId: deleteFlowRegistryClient
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The flow registry client id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowRegistryClientEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Deletes a flow registry client
      tags:
      - Controller
    get:
      operationId: getFlowRegistryClient
      parameters:
      - description: The flow registry client id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowRegistryClientEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller: []
      summary: Gets a flow registry client
      tags:
      - Controller
    put:
      operationId: updateFlowRegistryClient
      parameters:
      - description: The flow registry client id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowRegistryClientEntity"
        description: The flow registry client configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowRegistryClientEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Updates a flow registry client
      tags:
      - Controller
  /controller/registry-clients/{id}/descriptors:
    get:
      operationId: getPropertyDescriptor
      parameters:
      - description: The flow registry client id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The property name.
        in: query
        name: propertyName
        required: true
        schema:
          type: string
      - description: Property Descriptor requested sensitive status
        in: query
        name: sensitive
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyDescriptorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller/registry-clients/{uuid}: []
      summary: Gets a flow registry client property descriptor
      tags:
      - Controller
  /controller/registry-types:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getRegistryClientTypes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowRegistryClientTypesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the types of flow  that this NiFi supports
      tags:
      - Controller
  /controller/reporting-tasks:
    post:
      operationId: createReportingTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportingTaskEntity"
        description: The reporting task configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportingTaskEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      - Write - if the Reporting Task is restricted - /restricted-components: []
      summary: Creates a new reporting task
      tags:
      - Controller
  /controller/reporting-tasks/import:
    post:
      operationId: importReportingTaskSnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VersionedReportingTaskImportRequestEntity"
        description: The import request containing the reporting task snapshot to
          import.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedReportingTaskImportResponseEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /controller: []
      summary: Imports a reporting task snapshot
      tags:
      - Controller
  /controller/status/history:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getNodeStatusHistory
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentHistoryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /controller: []
      summary: Gets status history for the node
      tags:
      - Controller
  /counters:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getCounters
      parameters:
      - description: "Whether or not to include the breakdown per node. Optional,\
          \ defaults to false"
        in: query
        name: nodewise
        schema:
          type: boolean
          default: false
      - description: The id of the node where to get the status.
        in: query
        name: clusterNodeId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountersEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /counters: []
      summary: Gets the current counters for this NiFi
      tags:
      - Counters
  /counters/{id}:
    put:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: updateCounter
      parameters:
      - description: The id of the counter.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CounterEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /counters: []
      summary: Updates the specified counter. This will reset the counter value to
        0
      tags:
      - Counters
  /data-transfer/input-ports/{portId}/transactions/{transactionId}:
    delete:
      operationId: commitInputPortTransaction
      parameters:
      - description: "The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12)\
          \ or CANCEL_TRANSACTION(15)."
        in: query
        name: responseCode
        required: true
        schema:
          type: integer
          format: int32
      - description: The input port id.
        in: path
        name: portId
        required: true
        schema:
          type: string
      - description: The transaction id.
        in: path
        name: transactionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResultEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
        "503":
          description: "NiFi instance is not ready for serving request, or temporarily\
            \ overloaded. Retrying the same request later may be successful"
      security:
      - Write - /data-transfer/input-ports/{uuid}: []
      summary: Commit or cancel the specified transaction
      tags:
      - DataTransfer
    put:
      operationId: extendInputPortTransactionTTL
      parameters:
      - in: path
        name: portId
        required: true
        schema:
          type: string
      - in: path
        name: transactionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResultEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /data-transfer/input-ports/{uuid}: []
      summary: Extend transaction TTL
      tags:
      - DataTransfer
  /data-transfer/input-ports/{portId}/transactions/{transactionId}/flow-files:
    post:
      operationId: receiveFlowFiles
      parameters:
      - description: The input port id.
        in: path
        name: portId
        required: true
        schema:
          type: string
      - in: path
        name: transactionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
      responses:
        "202":
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
        "503":
          description: "NiFi instance is not ready for serving request, or temporarily\
            \ overloaded. Retrying the same request later may be successful"
      security:
      - Write - /data-transfer/input-ports/{uuid}: []
      summary: Transfer flow files to the input port
      tags:
      - DataTransfer
  /data-transfer/output-ports/{portId}/transactions/{transactionId}:
    delete:
      operationId: commitOutputPortTransaction
      parameters:
      - description: The response code. Available values are CONFIRM_TRANSACTION(12)
          or CANCEL_TRANSACTION(15).
        in: query
        name: responseCode
        required: true
        schema:
          type: integer
          format: int32
      - description: A checksum calculated at client side using CRC32 to check flow
          file content integrity. It must match with the value calculated at server
          side.
        in: query
        name: checksum
        required: true
        schema:
          type: string
          default: ""
      - description: The output port id.
        in: path
        name: portId
        required: true
        schema:
          type: string
      - description: The transaction id.
        in: path
        name: transactionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResultEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
        "503":
          description: "NiFi instance is not ready for serving request, or temporarily\
            \ overloaded. Retrying the same request later may be successful"
      security:
      - Write - /data-transfer/output-ports/{uuid}: []
      summary: Commit or cancel the specified transaction
      tags:
      - DataTransfer
    put:
      operationId: extendOutputPortTransactionTTL
      parameters:
      - in: path
        name: portId
        required: true
        schema:
          type: string
      - in: path
        name: transactionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResultEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
        "503":
          description: "NiFi instance is not ready for serving request, or temporarily\
            \ overloaded. Retrying the same request later may be successful"
      security:
      - Write - /data-transfer/output-ports/{uuid}: []
      summary: Extend transaction TTL
      tags:
      - DataTransfer
  /data-transfer/output-ports/{portId}/transactions/{transactionId}/flow-files:
    get:
      operationId: transferFlowFiles
      parameters:
      - description: The output port id.
        in: path
        name: portId
        required: true
        schema:
          type: string
      - in: path
        name: transactionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
      responses:
        "200":
          description: There is no flow file to return.
        "202":
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/StreamingOutput"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
        "503":
          description: "NiFi instance is not ready for serving request, or temporarily\
            \ overloaded. Retrying the same request later may be successful"
      security:
      - Write - /data-transfer/output-ports/{uuid}: []
      summary: Transfer flow files from the output port
      tags:
      - DataTransfer
  /data-transfer/{portType}/{portId}/transactions:
    post:
      operationId: createPortTransaction
      parameters:
      - description: The port type.
        in: path
        name: portType
        required: true
        schema:
          type: string
      - in: path
        name: portId
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResultEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
        "503":
          description: "NiFi instance is not ready for serving request, or temporarily\
            \ overloaded. Retrying the same request later may be successful"
      security:
      - Write - /data-transfer/{component-type}/{uuid}: []
      summary: Create a transaction to the specified output port or input port
      tags:
      - DataTransfer
  /flow/about:
    get:
      operationId: getAboutInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AboutEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves details about this NiFi to put in the About dialog
      tags:
      - Flow
  /flow/additional-details/{group}/{artifact}/{version}/{type}:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getAdditionalDetails
      parameters:
      - description: The bundle group
        in: path
        name: group
        required: true
        schema:
          type: string
      - description: The bundle artifact
        in: path
        name: artifact
        required: true
        schema:
          type: string
      - description: The bundle version
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The processor type
        in: path
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalDetailsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The additional details for the coordinates could not be located.
      security:
      - Read - /flow: []
      summary: Retrieves the additional details for the specified component type.
      tags:
      - Flow
  /flow/banners:
    get:
      operationId: getBanners
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannerEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the banners for this NiFi
      tags:
      - Flow
  /flow/bulletin-board:
    get:
      operationId: getBulletinBoard
      parameters:
      - description: Includes bulletins with an id after this value.
        in: query
        name: after
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: Includes bulletins originating from this sources whose name match
          this regular expression.
        in: query
        name: sourceName
        schema:
          $ref: "#/components/schemas/BulletinBoardPatternParameter"
      - description: Includes bulletins whose message that match this regular expression.
        in: query
        name: message
        schema:
          $ref: "#/components/schemas/BulletinBoardPatternParameter"
      - description: Includes bulletins originating from this sources whose id match
          this regular expression.
        in: query
        name: sourceId
        schema:
          $ref: "#/components/schemas/BulletinBoardPatternParameter"
      - description: Includes bulletins originating from this sources whose group
          id match this regular expression.
        in: query
        name: groupId
        schema:
          $ref: "#/components/schemas/BulletinBoardPatternParameter"
      - description: The number of bulletins to limit the response to.
        in: query
        name: limit
        schema:
          $ref: "#/components/schemas/IntegerParameter"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulletinBoardEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      - Read - /{component-type}/{uuid} - For component specific bulletins: []
      summary: Gets current bulletins
      tags:
      - Flow
  /flow/client-id:
    get:
      operationId: generateClientId
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Generates a client id.
      tags:
      - Flow
  /flow/cluster/search-results:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: searchCluster
      parameters:
      - description: Node address to search for.
        in: query
        name: q
        required: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterSearchResultsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Searches the cluster for a node with the specified address
      tags:
      - Flow
  /flow/cluster/summary:
    get:
      operationId: getClusterSummary
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterSummaryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: The cluster summary for this NiFi
      tags:
      - Flow
  /flow/config:
    get:
      operationId: getFlowConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowConfigurationEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the configuration for this NiFi flow
      tags:
      - Flow
  /flow/connections/{id}/statistics:
    get:
      operationId: getConnectionStatistics
      parameters:
      - description: "Whether or not to include the breakdown per node. Optional,\
          \ defaults to false"
        in: query
        name: nodewise
        schema:
          type: boolean
          default: false
      - description: The id of the node where to get the statistics.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionStatisticsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets statistics for a connection
      tags:
      - Flow
  /flow/connections/{id}/status:
    get:
      operationId: getConnectionStatus
      parameters:
      - description: "Whether or not to include the breakdown per node. Optional,\
          \ defaults to false"
        in: query
        name: nodewise
        schema:
          type: boolean
          default: false
      - description: The id of the node where to get the status.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionStatusEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets status for a connection
      tags:
      - Flow
  /flow/connections/{id}/status/history:
    get:
      operationId: getConnectionStatusHistory
      parameters:
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusHistoryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the status history for a connection
      tags:
      - Flow
  /flow/content-viewers:
    get:
      operationId: getContentViewers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentViewerEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the registered content viewers
      tags:
      - Flow
  /flow/controller-service-definition/{group}/{artifact}/{version}/{type}:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getControllerServiceDefinition
      parameters:
      - description: The bundle group
        in: path
        name: group
        required: true
        schema:
          type: string
      - description: The bundle artifact
        in: path
        name: artifact
        required: true
        schema:
          type: string
      - description: The bundle version
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The controller service type
        in: path
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServiceDefinition"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The controller service definition for the coordinates could
            not be located.
      security:
      - Read - /flow: []
      summary: Retrieves the Controller Service Definition for the specified component
        type.
      tags:
      - Flow
  /flow/controller-service-types:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getControllerServiceTypes
      parameters:
      - description: "If specified, will only return controller services that are\
          \ compatible with this type of service."
        in: query
        name: serviceType
        schema:
          type: string
      - description: "If serviceType specified, is the bundle group of the serviceType."
        in: query
        name: serviceBundleGroup
        schema:
          type: string
      - description: "If serviceType specified, is the bundle artifact of the serviceType."
        in: query
        name: serviceBundleArtifact
        schema:
          type: string
      - description: "If serviceType specified, is the bundle version of the serviceType."
        in: query
        name: serviceBundleVersion
        schema:
          type: string
      - description: "If specified, will only return types that are a member of this\
          \ bundle group."
        in: query
        name: bundleGroupFilter
        schema:
          type: string
      - description: "If specified, will only return types that are a member of this\
          \ bundle artifact."
        in: query
        name: bundleArtifactFilter
        schema:
          type: string
      - description: "If specified, will only return types whose fully qualified classname\
          \ matches."
        in: query
        name: typeFilter
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServiceTypesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the types of controller services that this NiFi supports
      tags:
      - Flow
  /flow/controller/bulletins:
    get:
      operationId: getBulletins
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerBulletinsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      - Read - /controller - For controller bulletins: []
      - Read - /controller-services/{uuid} - For controller service bulletins: []
      - Read - /reporting-tasks/{uuid} - For reporting task bulletins: []
      summary: Retrieves Controller level bulletins
      tags:
      - Flow
  /flow/controller/controller-services:
    get:
      description: "If the uiOnly query parameter is provided with a value of true,\
        \ the returned entity may only contain fields that are necessary for rendering\
        \ the NiFi User Interface. As such, the selected fields may change at any\
        \ time, even during incremental releases, without warning. As a result, this\
        \ parameter should not be provided by any client other than the UI."
      operationId: getControllerServicesFromController
      parameters:
      - in: query
        name: uiOnly
        schema:
          type: boolean
          default: false
      - description: Whether or not to include services' referencing components in
          the response
        in: query
        name: includeReferencingComponents
        schema:
          type: boolean
          default: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServicesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets controller services for reporting tasks
      tags:
      - Flow
  /flow/current-user:
    get:
      operationId: getCurrentUser
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUserEntity"
      security:
      - Read - /flow: []
      summary: Retrieves the user identity of the user making the request
      tags:
      - Flow
  /flow/flow-analysis-rule-definition/{group}/{artifact}/{version}/{type}:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getFlowAnalysisRuleDefinition
      parameters:
      - description: The bundle group
        in: path
        name: group
        required: true
        schema:
          type: string
      - description: The bundle artifact
        in: path
        name: artifact
        required: true
        schema:
          type: string
      - description: The bundle version
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The flow analysis rule type
        in: path
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowAnalysisRuleDefinition"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The flow analysis rule definition for the coordinates could
            not be located.
      security:
      - Read - /flow: []
      summary: Retrieves the Flow Analysis Rule Definition for the specified component
        type.
      tags:
      - Flow
  /flow/flow-analysis-rule-types:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getFlowAnalysisRuleTypes
      parameters:
      - description: "If specified, will only return types that are a member of this\
          \ bundle group."
        in: query
        name: bundleGroupFilter
        schema:
          type: string
      - description: "If specified, will only return types that are a member of this\
          \ bundle artifact."
        in: query
        name: bundleArtifactFilter
        schema:
          type: string
      - description: "If specified, will only return types whose fully qualified classname\
          \ matches."
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowAnalysisRuleTypesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the types of available Flow Analysis Rules
      tags:
      - Flow
  /flow/flow-analysis/results:
    get:
      operationId: getAllFlowAnalysisResults
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowAnalysisResultEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Returns all flow analysis results currently in effect
      tags:
      - Flow
  /flow/flow-analysis/results/{processGroupId}:
    get:
      operationId: getFlowAnalysisResults
      parameters:
      - description: The id of the process group representing (a part of) the flow
          to be analyzed.
        in: path
        name: processGroupId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowAnalysisResultEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Returns flow analysis results produced by the analysis of a given process
        group
      tags:
      - Flow
  /flow/history:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: queryHistory
      parameters:
      - description: The offset into the result set.
        in: query
        name: offset
        required: true
        schema:
          $ref: "#/components/schemas/IntegerParameter"
      - description: The number of actions to return.
        in: query
        name: count
        required: true
        schema:
          $ref: "#/components/schemas/IntegerParameter"
      - description: The field to sort on.
        in: query
        name: sortColumn
        schema:
          type: string
      - description: The direction to sort.
        in: query
        name: sortOrder
        schema:
          type: string
      - description: Include actions after this date.
        in: query
        name: startDate
        schema:
          $ref: "#/components/schemas/DateTimeParameter"
      - description: Include actions before this date.
        in: query
        name: endDate
        schema:
          $ref: "#/components/schemas/DateTimeParameter"
      - description: Include actions performed by this user.
        in: query
        name: userIdentity
        schema:
          type: string
      - description: Include actions on this component.
        in: query
        name: sourceId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets configuration history
      tags:
      - Flow
  /flow/history/components/{componentId}:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getComponentHistory
      parameters:
      - description: The component id.
        in: path
        name: componentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentHistoryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      - Read underlying component - /{component-type}/{uuid}: []
      summary: Gets configuration history for a component
      tags:
      - Flow
  /flow/history/{id}:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getAction
      parameters:
      - description: The action id.
        in: path
        name: id
        required: true
        schema:
          $ref: "#/components/schemas/IntegerParameter"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets an action
      tags:
      - Flow
  /flow/input-ports/{id}/status:
    get:
      operationId: getInputPortStatus
      parameters:
      - description: "Whether or not to include the breakdown per node. Optional,\
          \ defaults to false"
        in: query
        name: nodewise
        schema:
          type: boolean
          default: false
      - description: The id of the node where to get the status.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The input port id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortStatusEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets status for an input port
      tags:
      - Flow
  /flow/metrics/{producer}:
    get:
      operationId: getFlowMetrics
      parameters:
      - description: The producer for flow file metrics. Each producer may have its
          own output format.
        in: path
        name: producer
        required: true
        schema:
          type: string
          enum:
          - prometheus
          - json
      - description: Set of included metrics registries. Duplicate the parameter to
          include multiple registries. All registries are included by default.
        in: query
        name: includedRegistries
        schema:
          type: array
          enum:
          - NIFI
          - JVM
          - BULLETIN
          - CONNECTION
          - CLUSTER
          items:
            type: string
            enum:
            - NIFI
            - JVM
            - BULLETIN
            - CONNECTION
            - CLUSTER
            - NIFI
            - JVM
            - BULLETIN
            - CONNECTION
            - CLUSTER
          uniqueItems: true
      - description: Regular Expression Pattern to be applied against the sample name
          field
        in: query
        name: sampleName
        schema:
          type: string
      - description: Regular Expression Pattern to be applied against the sample label
          value field
        in: query
        name: sampleLabelValue
        schema:
          type: string
      - description: Name of the first field of JSON object. Applicable for JSON producer
          only.
        in: query
        name: rootFieldName
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StreamingOutput"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets all metrics for the flow from a particular node
      tags:
      - Flow
  /flow/output-ports/{id}/status:
    get:
      operationId: getOutputPortStatus
      parameters:
      - description: "Whether or not to include the breakdown per node. Optional,\
          \ defaults to false"
        in: query
        name: nodewise
        schema:
          type: boolean
          default: false
      - description: The id of the node where to get the status.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The output port id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortStatusEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets status for an output port
      tags:
      - Flow
  /flow/parameter-contexts:
    get:
      operationId: getParameterContexts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-contexts/{id} for each Parameter Context: []
      summary: Gets all Parameter Contexts
      tags:
      - Flow
  /flow/parameter-provider-definition/{group}/{artifact}/{version}/{type}:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getParameterProviderDefinition
      parameters:
      - description: The bundle group
        in: path
        name: group
        required: true
        schema:
          type: string
      - description: The bundle artifact
        in: path
        name: artifact
        required: true
        schema:
          type: string
      - description: The bundle version
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The parameter provider type
        in: path
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderDefinition"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The reporting task definition for the coordinates could not
            be located.
      security:
      - Read - /flow: []
      summary: Retrieves the Parameter Provider Definition for the specified component
        type.
      tags:
      - Flow
  /flow/parameter-provider-types:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getParameterProviderTypes
      parameters:
      - description: "If specified, will only return types that are a member of this\
          \ bundle group."
        in: query
        name: bundleGroupFilter
        schema:
          type: string
      - description: "If specified, will only return types that are a member of this\
          \ bundle artifact."
        in: query
        name: bundleArtifactFilter
        schema:
          type: string
      - description: "If specified, will only return types whose fully qualified classname\
          \ matches."
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderTypesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the types of parameter providers that this NiFi supports
      tags:
      - Flow
  /flow/parameter-providers:
    get:
      operationId: getParameterProviders
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProvidersEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets all parameter providers
      tags:
      - Flow
  /flow/prioritizers:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getPrioritizers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrioritizerTypesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the types of prioritizers that this NiFi supports
      tags:
      - Flow
  /flow/process-groups/{id}:
    get:
      description: "If the uiOnly query parameter is provided with a value of true,\
        \ the returned entity may only contain fields that are necessary for rendering\
        \ the NiFi User Interface. As such, the selected fields may change at any\
        \ time, even during incremental releases, without warning. As a result, this\
        \ parameter should not be provided by any client other than the UI."
      operationId: getFlow
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: uiOnly
        schema:
          type: boolean
          default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupFlowEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets a process group
      tags:
      - Flow
    put:
      operationId: scheduleComponents
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduleComponentsEntity"
        description: "The request to schedule or unschedule. If the components in\
          \ the request are not specified, all authorized components will be considered."
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleComponentsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      - Write - /{component-type}/{uuid} or /operation/{component-type}/{uuid} - For every component being scheduled/unscheduled: []
      summary: Schedule or unschedule components in the specified Process Group.
      tags:
      - Flow
  /flow/process-groups/{id}/breadcrumbs:
    get:
      operationId: getBreadcrumbs
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowBreadcrumbEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the breadcrumbs for a process group
      tags:
      - Flow
  /flow/process-groups/{id}/controller-services:
    get:
      description: "If the uiOnly query parameter is provided with a value of true,\
        \ the returned entity may only contain fields that are necessary for rendering\
        \ the NiFi User Interface. As such, the selected fields may change at any\
        \ time, even during incremental releases, without warning. As a result, this\
        \ parameter should not be provided by any client other than the UI."
      operationId: getControllerServicesFromGroup
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Whether or not to include parent/ancestor process groups
        in: query
        name: includeAncestorGroups
        schema:
          type: boolean
          default: true
      - description: Whether or not to include descendant process groups
        in: query
        name: includeDescendantGroups
        schema:
          type: boolean
          default: false
      - description: Whether or not to include services' referencing components in
          the response
        in: query
        name: includeReferencingComponents
        schema:
          type: boolean
          default: true
      - in: query
        name: uiOnly
        schema:
          type: boolean
          default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServicesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets all controller services
      tags:
      - Flow
    put:
      operationId: activateControllerServices
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivateControllerServicesEntity"
        description: "The request to schedule or unschedule. If the comopnents in\
          \ the request are not specified, all authorized components will be considered."
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivateControllerServicesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      - Write - /{component-type}/{uuid} or /operation/{component-type}/{uuid} - For every service being enabled/disabled: []
      summary: Enable or disable Controller Services in the specified Process Group.
      tags:
      - Flow
  /flow/process-groups/{id}/status:
    get:
      description: "The status for a process group includes status for all descendent\
        \ components. When invoked on the root group with recursive set to true, it\
        \ will return the current status of every component in the flow."
      operationId: getProcessGroupStatus
      parameters:
      - description: "Whether all descendant groups and the status of their content\
          \ will be included. Optional, defaults to false"
        in: query
        name: recursive
        schema:
          type: boolean
          default: false
      - description: "Whether or not to include the breakdown per node. Optional,\
          \ defaults to false"
        in: query
        name: nodewise
        schema:
          type: boolean
          default: false
      - description: The id of the node where to get the status.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupStatusEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the status for a process group
      tags:
      - Flow
  /flow/process-groups/{id}/status/history:
    get:
      operationId: getProcessGroupStatusHistory
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusHistoryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets status history for a remote process group
      tags:
      - Flow
  /flow/processor-definition/{group}/{artifact}/{version}/{type}:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getProcessorDefinition
      parameters:
      - description: The bundle group
        in: path
        name: group
        required: true
        schema:
          type: string
      - description: The bundle artifact
        in: path
        name: artifact
        required: true
        schema:
          type: string
      - description: The bundle version
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The processor type
        in: path
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorDefinition"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The processor definition for the coordinates could not be located.
      security:
      - Read - /flow: []
      summary: Retrieves the Processor Definition for the specified component type.
      tags:
      - Flow
  /flow/processor-types:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getProcessorTypes
      parameters:
      - description: "If specified, will only return types that are a member of this\
          \ bundle group."
        in: query
        name: bundleGroupFilter
        schema:
          type: string
      - description: "If specified, will only return types that are a member of this\
          \ bundle artifact."
        in: query
        name: bundleArtifactFilter
        schema:
          type: string
      - description: "If specified, will only return types whose fully qualified classname\
          \ matches."
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorTypesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the types of processors that this NiFi supports
      tags:
      - Flow
  /flow/processors/{id}/status:
    get:
      operationId: getProcessorStatus
      parameters:
      - description: "Whether or not to include the breakdown per node. Optional,\
          \ defaults to false"
        in: query
        name: nodewise
        schema:
          type: boolean
          default: false
      - description: The id of the node where to get the status.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorStatusEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets status for a processor
      tags:
      - Flow
  /flow/processors/{id}/status/history:
    get:
      operationId: getProcessorStatusHistory
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusHistoryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets status history for a processor
      tags:
      - Flow
  /flow/registries:
    get:
      operationId: getRegistryClients
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowRegistryClientsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the listing of available flow registry clients
      tags:
      - Flow
  /flow/registries/{id}/branches:
    get:
      operationId: getBranches
      parameters:
      - description: The registry id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowRegistryBranchesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the branches from the specified registry for the current user
      tags:
      - Flow
  /flow/registries/{id}/buckets:
    get:
      operationId: getBuckets
      parameters:
      - description: The registry id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The name of a branch to get the buckets from. If not specified
          the default branch of the registry client will be used.
        in: query
        name: branch
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowRegistryBucketsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the buckets from the specified registry for the current user
      tags:
      - Flow
  ? /flow/registries/{registry-id}/branches/{branch-id-a}/buckets/{bucket-id-a}/flows/{flow-id-a}/{version-a}/diff/branches/{branch-id-b}/buckets/{bucket-id-b}/flows/{flow-id-b}/{version-b}
  : get:
      operationId: getVersionDifferences
      parameters:
      - description: The registry client id.
        in: path
        name: registry-id
        required: true
        schema:
          type: string
      - description: The branch id for the base version.
        in: path
        name: branch-id-a
        required: true
        schema:
          type: string
      - description: The bucket id for the base version.
        in: path
        name: bucket-id-a
        required: true
        schema:
          type: string
      - description: The flow id for the base version.
        in: path
        name: flow-id-a
        required: true
        schema:
          type: string
      - description: The base version.
        in: path
        name: version-a
        required: true
        schema:
          type: string
      - description: The branch id for the compared version.
        in: path
        name: branch-id-b
        required: true
        schema:
          type: string
      - description: The bucket id for the compared version.
        in: path
        name: bucket-id-b
        required: true
        schema:
          type: string
      - description: The flow id for the compared version.
        in: path
        name: flow-id-b
        required: true
        schema:
          type: string
      - description: The compared version.
        in: path
        name: version-b
        required: true
        schema:
          type: string
      - description: Must be a non-negative number. Specifies the starting point of
          the listing. 0 means start from the beginning.
        in: query
        name: offset
        schema:
          type: integer
          format: int32
          default: 0
      - description: Limits the number of differences listed. This might lead to partial
          result. 0 means no limitation is applied.
        in: query
        name: limit
        schema:
          type: integer
          format: int32
          default: 1000
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowComparisonEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: "Gets the differences between two versions of the same versioned flow,\
        \ the basis of the comparison will be the first version"
      tags:
      - Flow
  /flow/registries/{registry-id}/buckets/{bucket-id}/flows:
    get:
      operationId: getFlows
      parameters:
      - description: The registry client id.
        in: path
        name: registry-id
        required: true
        schema:
          type: string
      - description: The bucket id.
        in: path
        name: bucket-id
        required: true
        schema:
          type: string
      - description: The name of a branch to get the flows from. If not specified
          the default branch of the registry client will be used.
        in: query
        name: branch
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedFlowsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the flows from the specified registry and bucket for the current
        user
      tags:
      - Flow
  /flow/registries/{registry-id}/buckets/{bucket-id}/flows/{flow-id}/details:
    get:
      operationId: getDetails
      parameters:
      - description: The registry client id.
        in: path
        name: registry-id
        required: true
        schema:
          type: string
      - description: The bucket id.
        in: path
        name: bucket-id
        required: true
        schema:
          type: string
      - description: The flow id.
        in: path
        name: flow-id
        required: true
        schema:
          type: string
      - description: The name of a branch to get the flow from. If not specified the
          default branch of the registry client will be used.
        in: query
        name: branch
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedFlowEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the details of a flow from the specified registry and bucket for
        the specified flow for the current user
      tags:
      - Flow
  /flow/registries/{registry-id}/buckets/{bucket-id}/flows/{flow-id}/versions:
    get:
      operationId: getVersions
      parameters:
      - description: The registry client id.
        in: path
        name: registry-id
        required: true
        schema:
          type: string
      - description: The bucket id.
        in: path
        name: bucket-id
        required: true
        schema:
          type: string
      - description: The flow id.
        in: path
        name: flow-id
        required: true
        schema:
          type: string
      - description: The name of a branch to get the flow versions from. If not specified
          the default branch of the registry client will be used.
        in: query
        name: branch
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedFlowSnapshotMetadataSetEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the flow versions from the specified registry and bucket for the
        specified flow for the current user
      tags:
      - Flow
  /flow/remote-process-groups/{id}/status:
    get:
      operationId: getRemoteProcessGroupStatus
      parameters:
      - description: "Whether or not to include the breakdown per node. Optional,\
          \ defaults to false"
        in: query
        name: nodewise
        schema:
          type: boolean
          default: false
      - description: The id of the node where to get the status.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The remote process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupStatusEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets status for a remote process group
      tags:
      - Flow
  /flow/remote-process-groups/{id}/status/history:
    get:
      operationId: getRemoteProcessGroupStatusHistory
      parameters:
      - description: The remote process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusHistoryEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the status history
      tags:
      - Flow
  /flow/reporting-task-definition/{group}/{artifact}/{version}/{type}:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getReportingTaskDefinition
      parameters:
      - description: The bundle group
        in: path
        name: group
        required: true
        schema:
          type: string
      - description: The bundle artifact
        in: path
        name: artifact
        required: true
        schema:
          type: string
      - description: The bundle version
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The reporting task type
        in: path
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportingTaskDefinition"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The reporting task definition for the coordinates could not
            be located.
      security:
      - Read - /flow: []
      summary: Retrieves the Reporting Task Definition for the specified component
        type.
      tags:
      - Flow
  /flow/reporting-task-types:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getReportingTaskTypes
      parameters:
      - description: "If specified, will only return types that are a member of this\
          \ bundle group."
        in: query
        name: bundleGroupFilter
        schema:
          type: string
      - description: "If specified, will only return types that are a member of this\
          \ bundle artifact."
        in: query
        name: bundleArtifactFilter
        schema:
          type: string
      - description: "If specified, will only return types whose fully qualified classname\
          \ matches."
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportingTaskTypesEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the types of reporting tasks that this NiFi supports
      tags:
      - Flow
  /flow/reporting-tasks:
    get:
      operationId: getReportingTasks
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportingTasksEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets all reporting tasks
      tags:
      - Flow
  /flow/reporting-tasks/download:
    get:
      operationId: downloadReportingTaskSnapshot
      parameters:
      - description: "Specifies a reporting task id to export. If not specified, all\
          \ reporting tasks will be exported."
        in: query
        name: reportingTaskId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                format: byte
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Download a snapshot of the given reporting tasks and any controller
        services they use
      tags:
      - Flow
  /flow/reporting-tasks/snapshot:
    get:
      operationId: getReportingTaskSnapshot
      parameters:
      - description: "Specifies a reporting task id to export. If not specified, all\
          \ reporting tasks will be exported."
        in: query
        name: reportingTaskId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedReportingTaskSnapshot"
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Get a snapshot of the given reporting tasks and any controller services
        they use
      tags:
      - Flow
  /flow/runtime-manifest:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getRuntimeManifest
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuntimeManifestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Retrieves the runtime manifest for this NiFi instance.
      tags:
      - Flow
  /flow/search-results:
    get:
      description: Only search results from authorized components will be returned.
      operationId: searchFlow
      parameters:
      - in: query
        name: q
        schema:
          type: string
          default: ""
      - in: query
        name: a
        schema:
          type: string
          default: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResultsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Performs a search against this NiFi using the specified search term
      tags:
      - Flow
  /flow/status:
    get:
      operationId: getControllerStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerStatusEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /flow: []
      summary: Gets the current status of this NiFi
      tags:
      - Flow
  /flowfile-queues/{id}/drop-requests:
    post:
      operationId: createDropRequest
      parameters:
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DropRequestEntity"
          description: The request has been accepted. A HTTP response header will
            contain the URI where the response can be polled.
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write Source Data - /data/{component-type}/{uuid}: []
      summary: Creates a request to drop the contents of the queue in this connection.
      tags:
      - FlowFileQueues
  /flowfile-queues/{id}/drop-requests/{drop-request-id}:
    delete:
      operationId: removeDropRequest
      parameters:
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The drop request id.
        in: path
        name: drop-request-id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DropRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write Source Data - /data/{component-type}/{uuid}: []
      summary: Cancels and/or removes a request to drop the contents of this connection.
      tags:
      - FlowFileQueues
    get:
      operationId: getDropRequest
      parameters:
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The drop request id.
        in: path
        name: drop-request-id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DropRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write Source Data - /data/{component-type}/{uuid}: []
      summary: Gets the current status of a drop request for the specified connection.
      tags:
      - FlowFileQueues
  /flowfile-queues/{id}/flowfiles/{flowfile-uuid}:
    get:
      operationId: getFlowFile
      parameters:
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The flowfile uuid.
        in: path
        name: flowfile-uuid
        required: true
        schema:
          type: string
      - description: The id of the node where the content exists if clustered.
        in: query
        name: clusterNodeId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowFileEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read Source Data - /data/{component-type}/{uuid}: []
      summary: Gets a FlowFile from a Connection.
      tags:
      - FlowFileQueues
  /flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content:
    get:
      operationId: downloadFlowFileContent
      parameters:
      - description: Range of bytes requested
        in: header
        name: Range
        schema:
          type: string
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The flowfile uuid.
        in: path
        name: flowfile-uuid
        required: true
        schema:
          type: string
      - description: The id of the node where the content exists if clustered.
        in: query
        name: clusterNodeId
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StreamingOutput"
        "206":
          description: Partial Content with range of bytes requested
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
        "416":
          description: Requested Range Not Satisfiable based on bytes requested
      security:
      - Read Source Data - /data/{component-type}/{uuid}: []
      summary: Gets the content for a FlowFile in a Connection.
      tags:
      - FlowFileQueues
  /flowfile-queues/{id}/listing-requests:
    post:
      operationId: createFlowFileListing
      parameters:
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingRequestEntity"
          description: The request has been accepted. A HTTP response header will
            contain the URI where the response can be polled.
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read Source Data - /data/{component-type}/{uuid}: []
      summary: Lists the contents of the queue in this connection.
      tags:
      - FlowFileQueues
  /flowfile-queues/{id}/listing-requests/{listing-request-id}:
    delete:
      operationId: deleteListingRequest
      parameters:
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The listing request id.
        in: path
        name: listing-request-id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read Source Data - /data/{component-type}/{uuid}: []
      summary: Cancels and/or removes a request to list the contents of this connection.
      tags:
      - FlowFileQueues
    get:
      operationId: getListingRequest
      parameters:
      - description: The connection id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The listing request id.
        in: path
        name: listing-request-id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read Source Data - /data/{component-type}/{uuid}: []
      summary: Gets the current status of a listing request for the specified connection.
      tags:
      - FlowFileQueues
  /funnels/{id}:
    delete:
      operationId: removeFunnel
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The funnel id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FunnelEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /funnels/{uuid}: []
      - Write - Parent Process Group - /process-groups/{uuid}: []
      summary: Deletes a funnel
      tags:
      - Funnels
    get:
      operationId: getFunnel
      parameters:
      - description: The funnel id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FunnelEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /funnels/{uuid}: []
      summary: Gets a funnel
      tags:
      - Funnels
    put:
      operationId: updateFunnel
      parameters:
      - description: The funnel id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FunnelEntity"
        description: The funnel configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FunnelEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /funnels/{uuid}: []
      summary: Updates a funnel
      tags:
      - Funnels
  /input-ports/{id}:
    delete:
      operationId: removeInputPort
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The input port id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /input-ports/{uuid}: []
      - Write - Parent Process Group - /process-groups/{uuid}: []
      summary: Deletes an input port
      tags:
      - InputPorts
    get:
      operationId: getInputPort
      parameters:
      - description: The input port id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /input-ports/{uuid}: []
      summary: Gets an input port
      tags:
      - InputPorts
    put:
      operationId: updateInputPort
      parameters:
      - description: The input port id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortEntity"
        description: The input port configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /input-ports/{uuid}: []
      summary: Updates an input port
      tags:
      - InputPorts
  /input-ports/{id}/run-status:
    put:
      operationId: updateRunStatus_2
      parameters:
      - description: The port id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortRunStatusEntity"
        description: The port run status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /input-ports/{uuid} or /operation/input-ports/{uuid}: []
      summary: Updates run status of an input-port
      tags:
      - InputPorts
  /labels/{id}:
    delete:
      operationId: removeLabel
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The label id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /labels/{uuid}: []
      - Write - Parent Process Group - /process-groups/{uuid}: []
      summary: Deletes a label
      tags:
      - Labels
    get:
      operationId: getLabel
      parameters:
      - description: The label id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /labels/{uuid}: []
      summary: Gets a label
      tags:
      - Labels
    put:
      operationId: updateLabel
      parameters:
      - description: The label id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelEntity"
        description: The label configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /labels/{uuid}: []
      summary: Updates a label
      tags:
      - Labels
  /output-ports/{id}:
    delete:
      operationId: removeOutputPort
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The output port id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /output-ports/{uuid}: []
      - Write - Parent Process Group - /process-groups/{uuid}: []
      summary: Deletes an output port
      tags:
      - OutputPorts
    get:
      operationId: getOutputPort
      parameters:
      - description: The output port id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /output-ports/{uuid}: []
      summary: Gets an output port
      tags:
      - OutputPorts
    put:
      operationId: updateOutputPort
      parameters:
      - description: The output port id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortEntity"
        description: The output port configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /output-ports/{uuid}: []
      summary: Updates an output port
      tags:
      - OutputPorts
  /output-ports/{id}/run-status:
    put:
      operationId: updateRunStatus_3
      parameters:
      - description: The port id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortRunStatusEntity"
        description: The port run status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /output-ports/{uuid} or /operation/output-ports/{uuid}: []
      summary: Updates run status of an output-port
      tags:
      - OutputPorts
  /parameter-contexts:
    post:
      operationId: createParameterContext
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterContextEntity"
        description: The Parameter Context.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /parameter-contexts: []
      - Read - for every inherited parameter context: []
      summary: Create a Parameter Context
      tags:
      - ParameterContexts
  /parameter-contexts/{contextId}/assets:
    get:
      description: Lists the assets that belong to the Parameter Context with the
        given ID.
      operationId: getAssets
      parameters:
      - description: The ID of the Parameter Context
        in: path
        name: contextId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-contexts/{id}: []
      summary: Lists the assets that belong to the Parameter Context with the given
        ID
      tags:
      - ParameterContexts
    post:
      description: "This endpoint will create a new Asset in the given Parameter Context.\
        \ The Asset will be created with the given name and the contents of the file\
        \ that is uploaded. The Asset will be created in the given Parameter Context,\
        \ and will be available for use by any component that references the Parameter\
        \ Context."
      operationId: createAsset
      parameters:
      - in: path
        name: contextId
        required: true
        schema:
          type: string
      - in: header
        name: Filename
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
        description: The contents of the asset.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-contexts/{parameterContextId}: []
      - Write - /parameter-contexts/{parameterContextId}: []
      - Read - for every component that is affected by the update: []
      - Write - for every component that is affected by the update: []
      - Read - for every currently inherited parameter context: []
      summary: Creates a new Asset in the given Parameter Context
      tags:
      - ParameterContexts
  /parameter-contexts/{contextId}/assets/{assetId}:
    delete:
      description: "This endpoint will create a new Asset in the given Parameter Context.\
        \ The Asset will be created with the given name and the contents of the file\
        \ that is uploaded. The Asset will be created in the given Parameter Context,\
        \ and will be available for use by any component that references the Parameter\
        \ Context."
      operationId: deleteAsset
      parameters:
      - in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The ID of the Parameter Context
        in: path
        name: contextId
        required: true
        schema:
          type: string
      - description: The ID of the Asset
        in: path
        name: assetId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-contexts/{parameterContextId}: []
      - Write - /parameter-contexts/{parameterContextId}: []
      - Read - for every component that is affected by the update: []
      - Write - for every component that is affected by the update: []
      - Read - for every currently inherited parameter context: []
      summary: Deletes an Asset from the given Parameter Context
      tags:
      - ParameterContexts
    get:
      operationId: getAssetContent
      parameters:
      - description: The ID of the Parameter Context
        in: path
        name: contextId
        required: true
        schema:
          type: string
      - description: The ID of the Asset
        in: path
        name: assetId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-contexts/{id}: []
      summary: Retrieves the content of the asset with the given id
      tags:
      - ParameterContexts
  /parameter-contexts/{contextId}/update-requests:
    post:
      description: "This will initiate the process of updating a Parameter Context.\
        \ Changing the value of a Parameter may require that one or more components\
        \ be stopped and restarted, so this action may take significantly more time\
        \ than many other REST API actions. As a result, this endpoint will immediately\
        \ return a ParameterContextUpdateRequestEntity, and the process of updating\
        \ the necessary components will occur asynchronously in the background. The\
        \ client may then periodically poll the status of the request by issuing a\
        \ GET request to /parameter-contexts/update-requests/{requestId}. Once the\
        \ request is completed, the client is expected to issue a DELETE request to\
        \ /parameter-contexts/update-requests/{requestId}."
      operationId: submitParameterContextUpdate
      parameters:
      - in: path
        name: contextId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterContextEntity"
        description: The updated version of the parameter context.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextUpdateRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-contexts/{parameterContextId}: []
      - Write - /parameter-contexts/{parameterContextId}: []
      - Read - for every component that is affected by the update: []
      - Write - for every component that is affected by the update: []
      - Read - for every currently inherited parameter context: []
      - Read - for any new inherited parameter context: []
      summary: Initiate the Update Request of a Parameter Context
      tags:
      - ParameterContexts
  /parameter-contexts/{contextId}/update-requests/{requestId}:
    delete:
      description: "Deletes the Update Request with the given ID. After a request\
        \ is created via a POST to /nifi-api/parameter-contexts/update-requests, it\
        \ is expected that the client will properly clean up the request by DELETE'ing\
        \ it, once the Update process has completed. If the request is deleted before\
        \ the request completes, then the Update request will finish the step that\
        \ it is currently performing and then will cancel any subsequent steps."
      operationId: deleteUpdateRequest
      parameters:
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The ID of the ParameterContext
        in: path
        name: contextId
        required: true
        schema:
          type: string
      - description: The ID of the Update Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextUpdateRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Update Request with the given ID
      tags:
      - ParameterContexts
    get:
      description: "Returns the Update Request with the given ID. Once an Update Request\
        \ has been created by performing a POST to /nifi-api/parameter-contexts, that\
        \ request can subsequently be retrieved via this endpoint, and the request\
        \ that is fetched will contain the updated state, such as percent complete,\
        \ the current state of the request, and any failures. "
      operationId: getParameterContextUpdate
      parameters:
      - description: The ID of the Parameter Context
        in: path
        name: contextId
        required: true
        schema:
          type: string
      - description: The ID of the Update Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextUpdateRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Update Request with the given ID
      tags:
      - ParameterContexts
  /parameter-contexts/{contextId}/validation-requests:
    post:
      description: "This will initiate the process of validating all components whose\
        \ Process Group is bound to the specified Parameter Context. Performing validation\
        \ against an arbitrary number of components may be expect and take significantly\
        \ more time than many other REST API actions. As a result, this endpoint will\
        \ immediately return a ParameterContextValidationRequestEntity, and the process\
        \ of validating the necessary components will occur asynchronously in the\
        \ background. The client may then periodically poll the status of the request\
        \ by issuing a GET request to /parameter-contexts/validation-requests/{requestId}.\
        \ Once the request is completed, the client is expected to issue a DELETE\
        \ request to /parameter-contexts/validation-requests/{requestId}."
      operationId: submitValidationRequest
      parameters:
      - in: path
        name: contextId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterContextValidationRequestEntity"
        description: The validation request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextValidationRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-contexts/{parameterContextId}: []
      summary: Initiate a Validation Request to determine how the validity of components
        will change if a Parameter Context were to be updated
      tags:
      - ParameterContexts
  /parameter-contexts/{contextId}/validation-requests/{id}:
    delete:
      description: "Deletes the Validation Request with the given ID. After a request\
        \ is created via a POST to /nifi-api/validation-contexts, it is expected that\
        \ the client will properly clean up the request by DELETE'ing it, once the\
        \ validation process has completed. If the request is deleted before the request\
        \ completes, then the Validation request will finish the step that it is currently\
        \ performing and then will cancel any subsequent steps."
      operationId: deleteValidationRequest
      parameters:
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The ID of the Parameter Context
        in: path
        name: contextId
        required: true
        schema:
          type: string
      - description: The ID of the Update Request
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextValidationRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Validation Request with the given ID
      tags:
      - ParameterContexts
    get:
      description: "Returns the Validation Request with the given ID. Once a Validation\
        \ Request has been created by performing a POST to /nifi-api/validation-contexts,\
        \ that request can subsequently be retrieved via this endpoint, and the request\
        \ that is fetched will contain the updated state, such as percent complete,\
        \ the current state of the request, and any failures. "
      operationId: getValidationRequest
      parameters:
      - description: The ID of the Parameter Context
        in: path
        name: contextId
        required: true
        schema:
          type: string
      - description: The ID of the Validation Request
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextValidationRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Validation Request with the given ID
      tags:
      - ParameterContexts
  /parameter-contexts/{id}:
    delete:
      description: Deletes the Parameter Context with the given ID.
      operationId: deleteParameterContext
      parameters:
      - description: The version is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, a new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The Parameter Context ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-contexts/{uuid}: []
      - Write - /parameter-contexts/{uuid}: []
      - Read - /process-groups/{uuid}, for any Process Group that is currently bound to the Parameter Context: []
      - Write - /process-groups/{uuid}, for any Process Group that is currently bound to the Parameter Context: []
      summary: Deletes the Parameter Context with the given ID
      tags:
      - ParameterContexts
    get:
      description: Returns the Parameter Context with the given ID.
      operationId: getParameterContext
      parameters:
      - description: The ID of the Parameter Context
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "Whether or not to include inherited parameters from other parameter\
          \ contexts, and therefore also overridden values.  If true, the result will\
          \ be the 'effective' parameter context."
        in: query
        name: includeInheritedParameters
        schema:
          type: boolean
          default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-contexts/{id}: []
      summary: Returns the Parameter Context with the given ID
      tags:
      - ParameterContexts
    put:
      description: "This endpoint will update a Parameter Context to match the provided\
        \ entity. However, this request will fail if any component is running and\
        \ is referencing a Parameter in the Parameter Context. Generally, this endpoint\
        \ is not called directly. Instead, an update request should be submitted by\
        \ making a POST to the /parameter-contexts/update-requests endpoint. That\
        \ endpoint will, in turn, call this endpoint."
      operationId: updateParameterContext
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterContextEntity"
        description: The updated Parameter Context
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterContextEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-contexts/{id}: []
      - Write - /parameter-contexts/{id}: []
      summary: Modifies a Parameter Context
      tags:
      - ParameterContexts
  /parameter-providers/{id}:
    delete:
      operationId: removeParameterProvider
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The parameter provider id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /parameter-providers/{uuid}: []
      - Write - /controller: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      summary: Deletes a parameter provider
      tags:
      - ParameterProviders
    get:
      operationId: getParameterProvider
      parameters:
      - description: The parameter provider id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-providers/{uuid}: []
      summary: Gets a parameter provider
      tags:
      - ParameterProviders
    put:
      operationId: updateParameterProvider
      parameters:
      - description: The parameter provider id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterProviderEntity"
        description: The parameter provider configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /parameter-providers/{uuid}: []
      - Read - any referenced Controller Services if this request changes the reference - /controller-services/{uuid}: []
      summary: Updates a parameter provider
      tags:
      - ParameterProviders
  /parameter-providers/{id}/config/analysis:
    post:
      operationId: analyzeConfiguration_1
      parameters:
      - description: The parameter provider id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationAnalysisEntity"
        description: The configuration analysis request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationAnalysisEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-providers/{uuid}: []
      summary: "Performs analysis of the component's configuration, providing information\
        \ about which attributes are referenced."
      tags:
      - ParameterProviders
  /parameter-providers/{id}/config/verification-requests:
    post:
      description: "This will initiate the process of verifying a given Parameter\
        \ Provider configuration. This may be a long-running task. As a result, this\
        \ endpoint will immediately return a ParameterProviderConfigVerificationRequestEntity,\
        \ and the process of performing the verification will occur asynchronously\
        \ in the background. The client may then periodically poll the status of the\
        \ request by issuing a GET request to /parameter-providers/{serviceId}/verification-requests/{requestId}.\
        \ Once the request is completed, the client is expected to issue a DELETE\
        \ request to /parameter-providers/{providerId}/verification-requests/{requestId}."
      operationId: submitConfigVerificationRequest_1
      parameters:
      - description: The parameter provider id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyConfigRequestEntity"
        description: The parameter provider configuration verification request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-providers/{uuid}: []
      summary: Performs verification of the Parameter Provider's configuration
      tags:
      - ParameterProviders
  /parameter-providers/{id}/config/verification-requests/{requestId}:
    delete:
      description: "Deletes the Verification Request with the given ID. After a request\
        \ is created, it is expected that the client will properly clean up the request\
        \ by DELETE'ing it, once the Verification process has completed. If the request\
        \ is deleted before the request completes, then the Verification request will\
        \ finish the step that it is currently performing and then will cancel any\
        \ subsequent steps."
      operationId: deleteVerificationRequest_1
      parameters:
      - description: The ID of the Parameter Provider
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Verification Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Verification Request with the given ID
      tags:
      - ParameterProviders
    get:
      description: "Returns the Verification Request with the given ID. Once an Verification\
        \ Request has been created, that request can subsequently be retrieved via\
        \ this endpoint, and the request that is fetched will contain the updated\
        \ state, such as percent complete, the current state of the request, and any\
        \ failures. "
      operationId: getVerificationRequest_1
      parameters:
      - description: The ID of the Parameter Provider
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Verification Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Verification Request with the given ID
      tags:
      - ParameterProviders
  /parameter-providers/{id}/descriptors:
    get:
      operationId: getPropertyDescriptor_2
      parameters:
      - description: The parameter provider id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The property name.
        in: query
        name: propertyName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyDescriptorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-providers/{uuid}: []
      summary: Gets a parameter provider property descriptor
      tags:
      - ParameterProviders
  /parameter-providers/{id}/parameters/fetch-requests:
    post:
      operationId: fetchParameters
      parameters:
      - description: The parameter provider id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterProviderParameterFetchEntity"
        description: The parameter fetch request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /parameter-providers/{uuid} or  or /operation/parameter-providers/{uuid}: []
      summary: Fetches and temporarily caches the parameters for a provider
      tags:
      - ParameterProviders
  /parameter-providers/{id}/references:
    get:
      operationId: getParameterProviderReferences
      parameters:
      - description: The parameter provider id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderReferencingComponentsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-providers/{uuid}: []
      summary: Gets all references to a parameter provider
      tags:
      - ParameterProviders
  /parameter-providers/{id}/state:
    get:
      operationId: getState_1
      parameters:
      - description: The parameter provider id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /parameter-providers/{uuid}: []
      summary: Gets the state for a parameter provider
      tags:
      - ParameterProviders
  /parameter-providers/{id}/state/clear-requests:
    post:
      operationId: clearState_2
      parameters:
      - description: The parameter provider id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /parameter-providers/{uuid}: []
      summary: Clears the state for a parameter provider
      tags:
      - ParameterProviders
  /parameter-providers/{providerId}/apply-parameters-requests:
    post:
      description: "This will initiate the process of applying fetched parameters\
        \ to all referencing Parameter Contexts. Changing the value of a Parameter\
        \ may require that one or more components be stopped and restarted, so this\
        \ action may take significantly more time than many other REST API actions.\
        \ As a result, this endpoint will immediately return a ParameterProviderApplyParametersRequestEntity,\
        \ and the process of updating the necessary components will occur asynchronously\
        \ in the background. The client may then periodically poll the status of the\
        \ request by issuing a GET request to /parameter-providers/apply-parameters-requests/{requestId}.\
        \ Once the request is completed, the client is expected to issue a DELETE\
        \ request to /parameter-providers/apply-parameters-requests/{requestId}."
      operationId: submitApplyParameters
      parameters:
      - in: path
        name: providerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterProviderParameterApplicationEntity"
        description: The apply parameters request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderApplyParametersRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /parameter-providers/{parameterProviderId}: []
      - Write - /parameter-providers/{parameterProviderId}: []
      - Read - for every component that is affected by the update: []
      - Write - for every component that is affected by the update: []
      summary: Initiate a request to apply the fetched parameters of a Parameter Provider
      tags:
      - ParameterProviders
  /parameter-providers/{providerId}/apply-parameters-requests/{requestId}:
    delete:
      description: "Deletes the Apply Parameters Request with the given ID. After\
        \ a request is created via a POST to /nifi-api/parameter-providers/apply-parameters-requests,\
        \ it is expected that the client will properly clean up the request by DELETE'ing\
        \ it, once the Apply process has completed. If the request is deleted before\
        \ the request completes, then the Apply Parameters Request will finish the\
        \ step that it is currently performing and then will cancel any subsequent\
        \ steps."
      operationId: deleteApplyParametersRequest
      parameters:
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The ID of the Parameter Provider
        in: path
        name: providerId
        required: true
        schema:
          type: string
      - description: The ID of the Apply Parameters Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderApplyParametersRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Apply Parameters Request with the given ID
      tags:
      - ParameterProviders
    get:
      description: "Returns the Apply Parameters Request with the given ID. Once an\
        \ Apply Parameters Request has been created by performing a POST to /nifi-api/parameter-providers,\
        \ that request can subsequently be retrieved via this endpoint, and the request\
        \ that is fetched will contain the state, such as percent complete, the current\
        \ state of the request, and any failures. "
      operationId: getParameterProviderApplyParametersRequest
      parameters:
      - description: The ID of the Parameter Provider
        in: path
        name: providerId
        required: true
        schema:
          type: string
      - description: The ID of the Apply Parameters Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterProviderApplyParametersRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Apply Parameters Request with the given ID
      tags:
      - ParameterProviders
  /policies:
    post:
      operationId: createAccessPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessPolicyEntity"
        description: The access policy configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessPolicyEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /policies/{resource}: []
      summary: Creates an access policy
      tags:
      - Policies
  /policies/{action}/{resource}:
    get:
      description: "Will return the effective policy if no component specific policy\
        \ exists for the specified action and resource. Must have Read permissions\
        \ to the policy with the desired action and resource. Permissions for the\
        \ policy that is returned will be indicated in the response. This means the\
        \ client could be authorized to get the policy for a given component but the\
        \ effective policy may be inherited from an ancestor Process Group. If the\
        \ client does not have permissions to that policy, the response will not include\
        \ the policy and the permissions in the response will be marked accordingly.\
        \ If the client does not have permissions to the policy of the desired action\
        \ and resource a 403 response will be returned."
      operationId: getAccessPolicyForResource
      parameters:
      - description: The request action.
        in: path
        name: action
        required: true
        schema:
          type: string
      - description: The resource of the policy.
        in: path
        name: resource
        required: true
        schema:
          type: string
          pattern: .+
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessPolicyEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /policies/{resource}: []
      summary: Gets an access policy for the specified action and resource
      tags:
      - Policies
  /policies/{id}:
    delete:
      operationId: removeAccessPolicy
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The access policy id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessPolicyEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /policies/{resource}: []
      - Write - Policy of the parent resource - /policies/{resource}: []
      summary: Deletes an access policy
      tags:
      - Policies
    get:
      operationId: getAccessPolicy
      parameters:
      - description: The access policy id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessPolicyEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /policies/{resource}: []
      summary: Gets an access policy
      tags:
      - Policies
    put:
      operationId: updateAccessPolicy
      parameters:
      - description: The access policy id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessPolicyEntity"
        description: The access policy configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessPolicyEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /policies/{resource}: []
      summary: Updates a access policy
      tags:
      - Policies
  /process-groups/replace-requests/{id}:
    delete:
      description: "Deletes the Replace Request with the given ID. After a request\
        \ is created via a POST to /process-groups/{id}/replace-requests, it is expected\
        \ that the client will properly clean up the request by DELETE'ing it, once\
        \ the Replace process has completed. If the request is deleted before the\
        \ request completes, then the Replace request will finish the step that it\
        \ is currently performing and then will cancel any subsequent steps. Note:\
        \ This endpoint is subject to change as NiFi and it's REST API evolve."
      operationId: deleteReplaceProcessGroupRequest
      parameters:
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The ID of the Update Request
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupReplaceRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Replace Request with the given ID
      tags:
      - ProcessGroups
    get:
      description: "Returns the Replace Request with the given ID. Once a Replace\
        \ Request has been created by performing a POST to /process-groups/{id}/replace-requests,\
        \ that request can subsequently be retrieved via this endpoint, and the request\
        \ that is fetched will contain the updated state, such as percent complete,\
        \ the current state of the request, and any failures. Note: This endpoint\
        \ is subject to change as NiFi and it's REST API evolve."
      operationId: getReplaceProcessGroupRequest
      parameters:
      - description: The ID of the Replace Request
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupReplaceRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Replace Request with the given ID
      tags:
      - ProcessGroups
  /process-groups/{id}:
    delete:
      operationId: removeProcessGroup
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      - Write - Parent Process Group - /process-groups/{uuid}: []
      - Read - any referenced Controller Services by any encapsulated components - /controller-services/{uuid}: []
      - Write - /{component-type}/{uuid} - For all encapsulated components: []
      summary: Deletes a process group
      tags:
      - ProcessGroups
    get:
      operationId: getProcessGroup
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets a process group
      tags:
      - ProcessGroups
    put:
      operationId: updateProcessGroup
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessGroupEntity"
        description: The process group configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Updates a process group
      tags:
      - ProcessGroups
  /process-groups/{id}/connections:
    get:
      operationId: getConnections
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets all connections
      tags:
      - ProcessGroups
    post:
      operationId: createConnection
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionEntity"
        description: The connection configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      - Write Source - /{component-type}/{uuid}: []
      - Write Destination - /{component-type}/{uuid}: []
      summary: Creates a connection
      tags:
      - ProcessGroups
  /process-groups/{id}/controller-services:
    post:
      operationId: createControllerService_1
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ControllerServiceEntity"
        description: The controller service configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerServiceEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      - Write - if the Controller Service is restricted - /restricted-components: []
      summary: Creates a new controller service
      tags:
      - ProcessGroups
  /process-groups/{id}/copy:
    post:
      operationId: copy
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CopyRequestEntity"
        description: The request including the components to be copied from the specified
          Process Group.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CopyResponseEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /{component-type}/{uuid} - For all encapsulated components: []
      summary: Generates a copy response for the given copy request
      tags:
      - ProcessGroups
  /process-groups/{id}/download:
    get:
      operationId: exportProcessGroup
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: If referenced services from outside the target group should be
          included
        in: query
        name: includeReferencedServices
        schema:
          type: boolean
          default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets a process group for download
      tags:
      - ProcessGroups
  /process-groups/{id}/empty-all-connections-requests:
    post:
      operationId: createEmptyAllConnectionsRequest
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DropRequestEntity"
          description: The request has been accepted. An HTTP response header will
            contain the URI where the status can be polled.
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid} - For this and all encapsulated process groups: []
      - Write Source Data - /data/{component-type}/{uuid} - For all encapsulated connections: []
      summary: Creates a request to drop all flowfiles of all connection queues in
        this process group.
      tags:
      - ProcessGroups
  /process-groups/{id}/empty-all-connections-requests/{drop-request-id}:
    delete:
      operationId: removeDropRequest_1
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The drop request id.
        in: path
        name: drop-request-id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DropRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid} - For this and all encapsulated process groups: []
      - Write Source Data - /data/{component-type}/{uuid} - For all encapsulated connections: []
      summary: Cancels and/or removes a request to drop all flowfiles.
      tags:
      - ProcessGroups
    get:
      operationId: getDropAllFlowfilesRequest
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The drop request id.
        in: path
        name: drop-request-id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DropRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid} - For this and all encapsulated process groups: []
      - Write Source Data - /data/{component-type}/{uuid} - For all encapsulated connections: []
      summary: Gets the current status of a drop all flowfiles request.
      tags:
      - ProcessGroups
  /process-groups/{id}/flow-contents:
    put:
      description: "This endpoint is used for replication within a cluster, when replacing\
        \ a flow with a new flow. It expects that the flow beingreplaced is not under\
        \ version control and that the given snapshot will not modify any Processor\
        \ that is currently running or any Controller Service that is enabled. Note:\
        \ This endpoint is subject to change as NiFi and it's REST API evolve."
      operationId: replaceProcessGroup
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessGroupImportEntity"
        description: The process group replace request entity.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupImportEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      - Write - /process-groups/{uuid}: []
      summary: Replace Process Group contents with the given ID with the specified
        Process Group contents
      tags:
      - ProcessGroups
  /process-groups/{id}/funnels:
    get:
      operationId: getFunnels
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FunnelsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets all funnels
      tags:
      - ProcessGroups
    post:
      operationId: createFunnel
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FunnelEntity"
        description: The funnel configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FunnelEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Creates a funnel
      tags:
      - ProcessGroups
  /process-groups/{id}/input-ports:
    get:
      operationId: getInputPorts
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InputPortsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets all input ports
      tags:
      - ProcessGroups
    post:
      operationId: createInputPort
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortEntity"
        description: The input port configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Creates an input port
      tags:
      - ProcessGroups
  /process-groups/{id}/labels:
    get:
      operationId: getLabels
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets all labels
      tags:
      - ProcessGroups
    post:
      operationId: createLabel
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelEntity"
        description: The label configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Creates a label
      tags:
      - ProcessGroups
  /process-groups/{id}/local-modifications:
    get:
      operationId: getLocalModifications
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowComparisonEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      - Read - /{component-type}/{uuid} - For all encapsulated components: []
      summary: Gets a list of local modifications to the Process Group since it was
        last synchronized with the Flow Registry
      tags:
      - ProcessGroups
  /process-groups/{id}/output-ports:
    get:
      operationId: getOutputPorts
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutputPortsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets all output ports
      tags:
      - ProcessGroups
    post:
      operationId: createOutputPort
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortEntity"
        description: The output port configuration.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Creates an output port
      tags:
      - ProcessGroups
  /process-groups/{id}/paste:
    put:
      operationId: paste
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasteRequestEntity"
        description: The request including the components to be pasted into the specified
          Process Group.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasteResponseEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Pastes into the specified process group
      tags:
      - ProcessGroups
  /process-groups/{id}/process-groups:
    get:
      operationId: getProcessGroups
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets all process groups
      tags:
      - ProcessGroups
    post:
      operationId: createProcessGroup
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Handling Strategy controls whether to keep or replace Parameter
          Contexts
        in: query
        name: parameterContextHandlingStrategy
        schema:
          type: string
          default: KEEP_EXISTING
          enum:
          - KEEP_EXISTING
          - REPLACE
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessGroupEntity"
        description: The process group configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Creates a process group
      tags:
      - ProcessGroups
  /process-groups/{id}/process-groups/import:
    post:
      operationId: importProcessGroup
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessGroupUploadEntity"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Imports a specified process group
      tags:
      - ProcessGroups
  /process-groups/{id}/process-groups/upload:
    post:
      operationId: uploadProcessGroup
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                  description: The client id.
                disconnectedNodeAcknowledged:
                  type: boolean
                  default: false
                  description: Acknowledges that this node is disconnected to allow
                    for mutable requests to proceed.
                file:
                  type: object
                groupName:
                  type: string
                  description: The process group name.
                positionX:
                  type: number
                  format: double
                  description: The process group X position.
                positionY:
                  type: number
                  format: double
                  description: The process group Y position.
              required:
              - clientId
              - groupName
              - positionX
              - positionY
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Uploads a versioned flow definition and creates a process group
      tags:
      - ProcessGroups
  /process-groups/{id}/processors:
    get:
      operationId: getProcessors
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Whether or not to include processors from descendant process
          groups
        in: query
        name: includeDescendantGroups
        schema:
          type: boolean
          default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets all processors
      tags:
      - ProcessGroups
    post:
      operationId: createProcessor
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessorEntity"
        description: The processor configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      - Write - if the Processor is restricted - /restricted-components: []
      summary: Creates a new processor
      tags:
      - ProcessGroups
  /process-groups/{id}/remote-process-groups:
    get:
      operationId: getRemoteProcessGroups
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets all remote process groups
      tags:
      - ProcessGroups
    post:
      operationId: createRemoteProcessGroup
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteProcessGroupEntity"
        description: The remote process group configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Creates a new process group
      tags:
      - ProcessGroups
  /process-groups/{id}/replace-requests:
    post:
      description: "This will initiate the action of replacing a process group with\
        \ the given process group. This can be a lengthy process, as it will stop\
        \ any Processors and disable any Controller Services necessary to perform\
        \ the action and then restart them. As a result, the endpoint will immediately\
        \ return a ProcessGroupReplaceRequestEntity, and the process of replacing\
        \ the flow will occur asynchronously in the background. The client may then\
        \ periodically poll the status of the request by issuing a GET request to\
        \ /process-groups/replace-requests/{requestId}. Once the request is completed,\
        \ the client is expected to issue a DELETE request to /process-groups/replace-requests/{requestId}.\
        \ Note: This endpoint is subject to change as NiFi and it's REST API evolve."
      operationId: initiateReplaceProcessGroup
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessGroupImportEntity"
        description: The process group replace request entity
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessGroupReplaceRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      - Write - /process-groups/{uuid}: []
      - Read - /{component-type}/{uuid} - For all encapsulated components: []
      - Write - /{component-type}/{uuid} - For all encapsulated components: []
      - Write - if the snapshot contains any restricted components - /restricted-components: []
      - ? Read - /parameter-contexts/{uuid} - For any Parameter Context that is referenced
          by a Property that is changed, added, or removed
        : []
      summary: Initiate the Replace Request of a Process Group with the given ID
      tags:
      - ProcessGroups
  /process-groups/{id}/snippet-instance:
    post:
      operationId: copySnippet
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CopySnippetRequestEntity"
        description: The copy snippet request.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      - Read - /{component-type}/{uuid} - For each component in the snippet and their descendant components: []
      - Write - if the snippet contains any restricted Processors - /restricted-components: []
      summary: Copies a snippet and discards it.
      tags:
      - ProcessGroups
  /processors/run-status-details/queries:
    post:
      operationId: getProcessorRunStatusDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunStatusDetailsRequestEntity"
        description: The request for the processors that should be included in the
          results
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorsRunStatusDetailsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /processors/{uuid} for each processor whose run status information is requested: []
      summary: Submits a query to retrieve the run status details of all processors
        that are in the given list of Processor IDs
      tags:
      - Processors
  /processors/{id}:
    delete:
      operationId: deleteProcessor
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /processors/{uuid}: []
      - Write - Parent Process Group - /process-groups/{uuid}: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      summary: Deletes a processor
      tags:
      - Processors
    get:
      operationId: getProcessor
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /processors/{uuid}: []
      summary: Gets a processor
      tags:
      - Processors
    put:
      operationId: updateProcessor
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessorEntity"
        description: The processor configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /processors/{uuid}: []
      - Read - any referenced Controller Services if this request changes the reference - /controller-services/{uuid}: []
      summary: Updates a processor
      tags:
      - Processors
  /processors/{id}/config/analysis:
    post:
      operationId: analyzeConfiguration_2
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationAnalysisEntity"
        description: The processor configuration analysis request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationAnalysisEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /processors/{uuid}: []
      summary: "Performs analysis of the component's configuration, providing information\
        \ about which attributes are referenced."
      tags:
      - Processors
  /processors/{id}/config/verification-requests:
    post:
      description: "This will initiate the process of verifying a given Processor\
        \ configuration. This may be a long-running task. As a result, this endpoint\
        \ will immediately return a ProcessorConfigVerificationRequestEntity, and\
        \ the process of performing the verification will occur asynchronously in\
        \ the background. The client may then periodically poll the status of the\
        \ request by issuing a GET request to /processors/{processorId}/verification-requests/{requestId}.\
        \ Once the request is completed, the client is expected to issue a DELETE\
        \ request to /processors/{processorId}/verification-requests/{requestId}."
      operationId: submitProcessorVerificationRequest
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyConfigRequestEntity"
        description: The processor configuration verification request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /processors/{uuid}: []
      summary: Performs verification of the Processor's configuration
      tags:
      - Processors
  /processors/{id}/config/verification-requests/{requestId}:
    delete:
      description: "Deletes the Verification Request with the given ID. After a request\
        \ is created, it is expected that the client will properly clean up the request\
        \ by DELETE'ing it, once the Verification process has completed. If the request\
        \ is deleted before the request completes, then the Verification request will\
        \ finish the step that it is currently performing and then will cancel any\
        \ subsequent steps."
      operationId: deleteVerificationRequest_2
      parameters:
      - description: The ID of the Processor
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Verification Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Verification Request with the given ID
      tags:
      - Processors
    get:
      description: "Returns the Verification Request with the given ID. Once an Verification\
        \ Request has been created, that request can subsequently be retrieved via\
        \ this endpoint, and the request that is fetched will contain the updated\
        \ state, such as percent complete, the current state of the request, and any\
        \ failures. "
      operationId: getVerificationRequest_2
      parameters:
      - description: The ID of the Processor
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Verification Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Verification Request with the given ID
      tags:
      - Processors
  /processors/{id}/descriptors:
    get:
      operationId: getPropertyDescriptor_3
      parameters:
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The property name.
        in: query
        name: propertyName
        required: true
        schema:
          type: string
      - description: Property Descriptor requested sensitive status
        in: query
        name: sensitive
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyDescriptorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /processors/{uuid}: []
      summary: Gets the descriptor for a processor property
      tags:
      - Processors
  /processors/{id}/diagnostics:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getProcessorDiagnostics
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /processors/{uuid}: []
      summary: Gets diagnostics information about a processor
      tags:
      - Processors
  /processors/{id}/run-status:
    put:
      operationId: updateRunStatus_4
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessorRunStatusEntity"
        description: The processor run status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /processors/{uuid} or /operation/processors/{uuid}: []
      summary: Updates run status of a processor
      tags:
      - Processors
  /processors/{id}/state:
    get:
      operationId: getState_2
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /processors/{uuid}: []
      summary: Gets the state for a processor
      tags:
      - Processors
  /processors/{id}/state/clear-requests:
    post:
      operationId: clearState_3
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /processors/{uuid}: []
      summary: Clears the state for a processor
      tags:
      - Processors
  /processors/{id}/threads:
    delete:
      operationId: terminateProcessor
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /processors/{uuid} or /operation/processors/{uuid}: []
      summary: "Terminates a processor, essentially \"deleting\" its threads and any\
        \ active tasks"
      tags:
      - Processors
  /provenance:
    post:
      description: Provenance queries may be long running so this endpoint submits
        a request. The response will include the current state of the query. If the
        request is not completed the URI in the response can be used at a later time
        to get the updated state of the query. Once the query has completed the provenance
        request should be deleted by the client who originally submitted it.
      operationId: submitProvenanceRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProvenanceEntity"
        description: The provenance query details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvenanceEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /provenance: []
      - Read - /data/{component-type}/{uuid}: []
      summary: Submits a provenance query
      tags:
      - Provenance
  /provenance-events/latest/replays:
    post:
      operationId: submitReplayLatestEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplayLastEventRequestEntity"
        description: The replay request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplayLastEventResponseEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read Component Provenance Data - /provenance-data/{component-type}/{uuid}: []
      - Read Component Data - /data/{component-type}/{uuid}: []
      - Write Component Data - /data/{component-type}/{uuid}: []
      summary: Replays content from a provenance event
      tags:
      - ProvenanceEvents
  /provenance-events/latest/{componentId}:
    get:
      operationId: getLatestProvenanceEvents
      parameters:
      - description: The ID of the component to retrieve the latest Provenance Events
          for.
        in: path
        name: componentId
        required: true
        schema:
          type: string
      - description: The number of events to limit the response to. Defaults to 10.
        in: query
        name: limit
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LatestProvenanceEventsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read Component Provenance Data - /provenance-data/{component-type}/{uuid}: []
      - Read Component Data - /data/{component-type}/{uuid}: []
      summary: Retrieves the latest cached Provenance Events for the specified component
      tags:
      - ProvenanceEvents
  /provenance-events/replays:
    post:
      operationId: submitReplay
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitReplayRequestEntity"
        description: The replay request.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvenanceEventEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read Component Provenance Data - /provenance-data/{component-type}/{uuid}: []
      - Read Component Data - /data/{component-type}/{uuid}: []
      - Write Component Data - /data/{component-type}/{uuid}: []
      summary: Replays content from a provenance event
      tags:
      - ProvenanceEvents
  /provenance-events/{id}:
    get:
      operationId: getProvenanceEvent
      parameters:
      - description: The id of the node where this event exists if clustered.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The provenance event id.
        in: path
        name: id
        required: true
        schema:
          $ref: "#/components/schemas/LongParameter"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvenanceEventEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read Component Provenance Data - /provenance-data/{component-type}/{uuid}: []
      summary: Gets a provenance event
      tags:
      - ProvenanceEvents
  /provenance-events/{id}/content/input:
    get:
      operationId: getInputContent
      parameters:
      - description: Range of bytes requested
        in: header
        name: Range
        schema:
          type: string
      - description: The id of the node where the content exists if clustered.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The provenance event id.
        in: path
        name: id
        required: true
        schema:
          $ref: "#/components/schemas/LongParameter"
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StreamingOutput"
        "206":
          description: Partial Content with range of bytes requested
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
        "416":
          description: Requested Range Not Satisfiable based on bytes requested
      security:
      - Read Component Provenance Data - /provenance-data/{component-type}/{uuid}: []
      - Read Component Data - /data/{component-type}/{uuid}: []
      summary: Gets the input content for a provenance event
      tags:
      - ProvenanceEvents
  /provenance-events/{id}/content/output:
    get:
      operationId: getOutputContent
      parameters:
      - description: Range of bytes requested
        in: header
        name: Range
        schema:
          type: string
      - description: The id of the node where the content exists if clustered.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The provenance event id.
        in: path
        name: id
        required: true
        schema:
          $ref: "#/components/schemas/LongParameter"
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StreamingOutput"
        "206":
          description: Partial Content with range of bytes requested
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
        "416":
          description: Requested Range Not Satisfiable based on bytes requested
      security:
      - Read Component Provenance Data - /provenance-data/{component-type}/{uuid}: []
      - Read Component Data - /data/{component-type}/{uuid}: []
      summary: Gets the output content for a provenance event
      tags:
      - ProvenanceEvents
  /provenance/lineage:
    post:
      description: Lineage queries may be long running so this endpoint submits a
        request. The response will include the current state of the query. If the
        request is not completed the URI in the response can be used at a later time
        to get the updated state of the query. Once the query has completed the lineage
        request should be deleted by the client who originally submitted it.
      operationId: submitLineageRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LineageEntity"
        description: The lineage query details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LineageEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /provenance: []
      - Read - /data/{component-type}/{uuid}: []
      summary: Submits a lineage query
      tags:
      - Provenance
  /provenance/lineage/{id}:
    delete:
      operationId: deleteLineage
      parameters:
      - description: The id of the node where this query exists if clustered.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The id of the lineage query.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LineageEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /provenance: []
      summary: Deletes a lineage query
      tags:
      - Provenance
    get:
      operationId: getLineage
      parameters:
      - description: The id of the node where this query exists if clustered.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The id of the lineage query.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LineageEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /provenance: []
      - Read - /data/{component-type}/{uuid}: []
      summary: Gets a lineage query
      tags:
      - Provenance
  /provenance/search-options:
    get:
      operationId: getSearchOptions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvenanceOptionsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /provenance: []
      summary: Gets the searchable attributes for provenance events
      tags:
      - Provenance
  /provenance/{id}:
    delete:
      operationId: deleteProvenance
      parameters:
      - description: The id of the node where this query exists if clustered.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: The id of the provenance query.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvenanceEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /provenance: []
      summary: Deletes a provenance query
      tags:
      - Provenance
    get:
      operationId: getProvenance
      parameters:
      - description: The id of the node where this query exists if clustered.
        in: query
        name: clusterNodeId
        schema:
          type: string
      - description: "Whether or not incremental results are returned. If false, provenance\
          \ events are only returned once the query completes. This property is true\
          \ by default."
        in: query
        name: summarize
        schema:
          type: boolean
          default: false
      - description: Whether or not to summarize provenance events returned. This
          property is false by default.
        in: query
        name: incrementalResults
        schema:
          type: boolean
          default: true
      - description: The id of the provenance query.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvenanceEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /provenance: []
      - Read - /data/{component-type}/{uuid}: []
      summary: Gets a provenance query
      tags:
      - Provenance
  /remote-process-groups/process-group/{id}/run-status:
    put:
      operationId: updateRemoteProcessGroupRunStatuses
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemotePortRunStatusEntity"
        description: The remote process groups run status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /remote-process-groups/{uuid} or /operation/remote-process-groups/{uuid}: []
      summary: Updates run status of all remote process groups in a process group
        (recursively)
      tags:
      - RemoteProcessGroups
  /remote-process-groups/{id}:
    delete:
      operationId: removeRemoteProcessGroup
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The remote process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /remote-process-groups/{uuid}: []
      - Write - Parent Process Group - /process-groups/{uuid}: []
      summary: Deletes a remote process group
      tags:
      - RemoteProcessGroups
    get:
      operationId: getRemoteProcessGroup
      parameters:
      - description: The remote process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /remote-process-groups/{uuid}: []
      summary: Gets a remote process group
      tags:
      - RemoteProcessGroups
    put:
      operationId: updateRemoteProcessGroup
      parameters:
      - description: The remote process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteProcessGroupEntity"
        description: The remote process group.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /remote-process-groups/{uuid}: []
      summary: Updates a remote process group
      tags:
      - RemoteProcessGroups
  /remote-process-groups/{id}/input-ports/{port-id}:
    put:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: updateRemoteProcessGroupInputPort
      parameters:
      - description: The remote process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The remote process group port id.
        in: path
        name: port-id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteProcessGroupPortEntity"
        description: The remote process group port.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupPortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /remote-process-groups/{uuid}: []
      summary: Updates a remote port
      tags:
      - RemoteProcessGroups
  /remote-process-groups/{id}/input-ports/{port-id}/run-status:
    put:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: updateRemoteProcessGroupInputPortRunStatus
      parameters:
      - description: The remote process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The remote process group port id.
        in: path
        name: port-id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemotePortRunStatusEntity"
        description: The remote process group port.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupPortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /remote-process-groups/{uuid} or /operation/remote-process-groups/{uuid}: []
      summary: Updates run status of a remote port
      tags:
      - RemoteProcessGroups
  /remote-process-groups/{id}/output-ports/{port-id}:
    put:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: updateRemoteProcessGroupOutputPort
      parameters:
      - description: The remote process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The remote process group port id.
        in: path
        name: port-id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteProcessGroupPortEntity"
        description: The remote process group port.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupPortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /remote-process-groups/{uuid}: []
      summary: Updates a remote port
      tags:
      - RemoteProcessGroups
  /remote-process-groups/{id}/output-ports/{port-id}/run-status:
    put:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: updateRemoteProcessGroupOutputPortRunStatus
      parameters:
      - description: The remote process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The remote process group port id.
        in: path
        name: port-id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemotePortRunStatusEntity"
        description: The remote process group port.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupPortEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /remote-process-groups/{uuid} or /operation/remote-process-groups/{uuid}: []
      summary: Updates run status of a remote port
      tags:
      - RemoteProcessGroups
  /remote-process-groups/{id}/run-status:
    put:
      operationId: updateRemoteProcessGroupRunStatus
      parameters:
      - description: The remote process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemotePortRunStatusEntity"
        description: The remote process group run status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteProcessGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /remote-process-groups/{uuid} or /operation/remote-process-groups/{uuid}: []
      summary: Updates run status of a remote process group
      tags:
      - RemoteProcessGroups
  /remote-process-groups/{id}/state:
    get:
      operationId: getState_3
      parameters:
      - description: The processor id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /remote-process-groups/{uuid}: []
      summary: Gets the state for a RemoteProcessGroup
      tags:
      - RemoteProcessGroups
  /reporting-tasks/{id}:
    delete:
      operationId: removeReportingTask
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The reporting task id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportingTaskEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /reporting-tasks/{uuid}: []
      - Write - /controller: []
      - Read - any referenced Controller Services - /controller-services/{uuid}: []
      summary: Deletes a reporting task
      tags:
      - ReportingTasks
    get:
      operationId: getReportingTask
      parameters:
      - description: The reporting task id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportingTaskEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /reporting-tasks/{uuid}: []
      summary: Gets a reporting task
      tags:
      - ReportingTasks
    put:
      operationId: updateReportingTask
      parameters:
      - description: The reporting task id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportingTaskEntity"
        description: The reporting task configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportingTaskEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /reporting-tasks/{uuid}: []
      - Read - any referenced Controller Services if this request changes the reference - /controller-services/{uuid}: []
      summary: Updates a reporting task
      tags:
      - ReportingTasks
  /reporting-tasks/{id}/config/analysis:
    post:
      operationId: analyzeConfiguration_3
      parameters:
      - description: The reporting task id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationAnalysisEntity"
        description: The configuration analysis request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationAnalysisEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /reporting-tasks/{uuid}: []
      summary: "Performs analysis of the component's configuration, providing information\
        \ about which attributes are referenced."
      tags:
      - ReportingTasks
  /reporting-tasks/{id}/config/verification-requests:
    post:
      description: "This will initiate the process of verifying a given Reporting\
        \ Task configuration. This may be a long-running task. As a result, this endpoint\
        \ will immediately return a ReportingTaskConfigVerificationRequestEntity,\
        \ and the process of performing the verification will occur asynchronously\
        \ in the background. The client may then periodically poll the status of the\
        \ request by issuing a GET request to /reporting-tasks/{taskId}/verification-requests/{requestId}.\
        \ Once the request is completed, the client is expected to issue a DELETE\
        \ request to /reporting-tasks/{serviceId}/verification-requests/{requestId}."
      operationId: submitConfigVerificationRequest_2
      parameters:
      - description: The reporting task id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyConfigRequestEntity"
        description: The reporting task configuration verification request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /reporting-tasks/{uuid}: []
      summary: Performs verification of the Reporting Task's configuration
      tags:
      - ReportingTasks
  /reporting-tasks/{id}/config/verification-requests/{requestId}:
    delete:
      description: "Deletes the Verification Request with the given ID. After a request\
        \ is created, it is expected that the client will properly clean up the request\
        \ by DELETE'ing it, once the Verification process has completed. If the request\
        \ is deleted before the request completes, then the Verification request will\
        \ finish the step that it is currently performing and then will cancel any\
        \ subsequent steps."
      operationId: deleteVerificationRequest_3
      parameters:
      - description: The ID of the Reporting Task
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Verification Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Verification Request with the given ID
      tags:
      - ReportingTasks
    get:
      description: "Returns the Verification Request with the given ID. Once an Verification\
        \ Request has been created, that request can subsequently be retrieved via\
        \ this endpoint, and the request that is fetched will contain the updated\
        \ state, such as percent complete, the current state of the request, and any\
        \ failures. "
      operationId: getVerificationRequest_3
      parameters:
      - description: The ID of the Reporting Task
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Verification Request
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConfigRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Verification Request with the given ID
      tags:
      - ReportingTasks
  /reporting-tasks/{id}/descriptors:
    get:
      operationId: getPropertyDescriptor_4
      parameters:
      - description: The reporting task id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The property name.
        in: query
        name: propertyName
        required: true
        schema:
          type: string
      - description: Property Descriptor requested sensitive status
        in: query
        name: sensitive
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyDescriptorEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /reporting-tasks/{uuid}: []
      summary: Gets a reporting task property descriptor
      tags:
      - ReportingTasks
  /reporting-tasks/{id}/run-status:
    put:
      operationId: updateRunStatus_5
      parameters:
      - description: The reporting task id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportingTaskRunStatusEntity"
        description: The reporting task run status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportingTaskEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /reporting-tasks/{uuid} or  or /operation/reporting-tasks/{uuid}: []
      summary: Updates run status of a reporting task
      tags:
      - ReportingTasks
  /reporting-tasks/{id}/state:
    get:
      operationId: getState_4
      parameters:
      - description: The reporting task id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /reporting-tasks/{uuid}: []
      summary: Gets the state for a reporting task
      tags:
      - ReportingTasks
  /reporting-tasks/{id}/state/clear-requests:
    post:
      operationId: clearState_4
      parameters:
      - description: The reporting task id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentStateEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /reporting-tasks/{uuid}: []
      summary: Clears the state for a reporting task
      tags:
      - ReportingTasks
  /resources:
    get:
      operationId: getResources
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcesEntity"
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
      security:
      - Read - /resources: []
      summary: Gets the available resources that support access/authorization policies
      tags:
      - Resources
  /site-to-site:
    get:
      operationId: getSiteToSiteDetails
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /site-to-site: []
      summary: Returns the details about this NiFi necessary to communicate via site
        to site
      tags:
      - SiteToSite
  /site-to-site/peers:
    get:
      operationId: getPeers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeersEntity"
            application/xml:
              schema:
                $ref: "#/components/schemas/PeersEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /site-to-site: []
      summary: Returns the available Peers and its status of this NiFi
      tags:
      - SiteToSite
  /snippets:
    post:
      operationId: createSnippet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnippetEntity"
        description: The snippet configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnippetEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - ? Read or Write - /{component-type}/{uuid} - For every component (all Read
          or all Write) in the Snippet and their descendant components
        : []
      summary: Creates a snippet. The snippet will be automatically discarded if not
        used in a subsequent request after 1 minute.
      tags:
      - Snippets
  /snippets/{id}:
    delete:
      operationId: deleteSnippet
      parameters:
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The snippet id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnippetEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /{component-type}/{uuid} - For each component in the Snippet and their descendant components: []
      - Write - Parent Process Group - /process-groups/{uuid}: []
      summary: Deletes the components in a snippet and discards the snippet
      tags:
      - Snippets
    put:
      operationId: updateSnippet
      parameters:
      - description: The snippet id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnippetEntity"
        description: The snippet configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnippetEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write Process Group - /process-groups/{uuid}: []
      - Write - /{component-type}/{uuid} - For each component in the Snippet and their descendant components: []
      summary: Move's the components in this Snippet into a new Process Group and
        discards the snippet
      tags:
      - Snippets
  /system-diagnostics:
    get:
      operationId: getSystemDiagnostics
      parameters:
      - description: "Whether or not to include the breakdown per node. Optional,\
          \ defaults to false"
        in: query
        name: nodewise
        schema:
          type: boolean
          default: false
      - description: "Whether or not to include verbose details. Optional, defaults\
          \ to false"
        in: query
        name: diagnosticLevel
        schema:
          type: string
          default: BASIC
          enum:
          - BASIC
          - VERBOSE
      - description: The id of the node where to get the status.
        in: query
        name: clusterNodeId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemDiagnosticsEntity"
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
      security:
      - Read - /system: []
      summary: Gets the diagnostics for the system NiFi is running on
      tags:
      - SystemDiagnostics
  /system-diagnostics/jmx-metrics:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getJmxMetrics
      parameters:
      - description: Regular Expression Pattern to be applied against the ObjectName
        in: query
        name: beanNameFilter
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JmxMetricsResultsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /system: []
      summary: Retrieve available JMX metrics
      tags:
      - SystemDiagnostics
  /tenants/search-results:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: searchTenants
      parameters:
      - description: Identity to search for.
        in: query
        name: q
        required: true
        schema:
          type: string
          default: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /tenants: []
      summary: Searches for a tenant with the specified identity
      tags:
      - Tenants
  /tenants/user-groups:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getUserGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupsEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /tenants: []
      summary: Gets all user groups
      tags:
      - Tenants
    post:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: createUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserGroupEntity"
        description: The user group configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /tenants: []
      summary: Creates a user group
      tags:
      - Tenants
  /tenants/user-groups/{id}:
    delete:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: removeUserGroup
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The user group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /tenants: []
      summary: Deletes a user group
      tags:
      - Tenants
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getUserGroup
      parameters:
      - description: The user group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /tenants: []
      summary: Gets a user group
      tags:
      - Tenants
    put:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: updateUserGroup
      parameters:
      - description: The user group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserGroupEntity"
        description: The user group configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /tenants: []
      summary: Updates a user group
      tags:
      - Tenants
  /tenants/users:
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /tenants: []
      summary: Gets all users
      tags:
      - Tenants
    post:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEntity"
        description: The user configuration details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /tenants: []
      summary: Creates a user
      tags:
      - Tenants
  /tenants/users/{id}:
    delete:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: removeUser
      parameters:
      - description: The revision is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The user id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /tenants: []
      summary: Deletes a user
      tags:
      - Tenants
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getUser
      parameters:
      - description: The user id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /tenants: []
      summary: Gets a user
      tags:
      - Tenants
    put:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: updateUser
      parameters:
      - description: The user id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEntity"
        description: The user configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /tenants: []
      summary: Updates a user
      tags:
      - Tenants
  /versions/active-requests:
    post:
      description: "Creates a request so that a Process Group can be placed under\
        \ Version Control or have its Version Control configuration changed. Creating\
        \ this request will prevent any other threads from simultaneously saving local\
        \ changes to Version Control. It will not, however, actually save the local\
        \ flow to the Flow Registry. A POST to /versions/process-groups/{id} should\
        \ be used to initiate saving of the local flow to the Flow Registry. Note:\
        \ This endpoint is subject to change as NiFi and it's REST API evolve."
      operationId: createVersionControlRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateActiveRequestEntity"
        description: The versioned flow details.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Write - /process-groups/{uuid}: []
      summary: Create a version control request
      tags:
      - Versions
  /versions/active-requests/{id}:
    delete:
      description: "Deletes the Version Control Request with the given ID. This will\
        \ allow other threads to save flows to the Flow Registry. See also the documentation\
        \ for POSTing to /versions/active-requests for information regarding why this\
        \ is done. Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: deleteVersionControlRequest
      parameters:
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The request ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the version control request with the given ID
      tags:
      - Versions
    put:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: updateVersionControlRequest
      parameters:
      - description: The request ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VersionControlComponentMappingEntity"
        description: The version control component mapping.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionControlInformationEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can update it: []
      summary: Updates the request with the given ID
      tags:
      - Versions
  /versions/process-groups/{id}:
    delete:
      description: "Stops version controlling the Process Group with the given ID.\
        \ The Process Group will no longer track to any Versioned Flow. Note: This\
        \ endpoint is subject to change as NiFi and it's REST API evolve."
      operationId: stopVersionControl
      parameters:
      - description: The version is used to verify the client is working with the
          latest version of the flow.
        in: query
        name: version
        schema:
          $ref: "#/components/schemas/LongParameter"
      - description: "If the client id is not specified, a new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        in: query
        name: clientId
        schema:
          $ref: "#/components/schemas/ClientIdParameter"
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionControlInformationEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      - Write - /process-groups/{uuid}: []
      summary: Stops version controlling the Process Group with the given ID
      tags:
      - Versions
    get:
      description: "Note: This endpoint is subject to change as NiFi and it's REST\
        \ API evolve."
      operationId: getVersionInformation
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionControlInformationEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets the Version Control information for a process group
      tags:
      - Versions
    post:
      description: "Begins version controlling the Process Group with the given ID\
        \ or commits changes to the Versioned Flow, depending on if the provided VersionControlInformation\
        \ includes a flowId. Note: This endpoint is subject to change as NiFi and\
        \ it's REST API evolve."
      operationId: saveToFlowRegistry
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartVersionControlRequestEntity"
        description: The versioned flow details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionControlInformationEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      - Write - /process-groups/{uuid}: []
      - Read - /{component-type}/{uuid} - For all encapsulated components: []
      - Read - any referenced Controller Services by any encapsulated components - /controller-services/{uuid}: []
      summary: Save the Process Group with the given ID
      tags:
      - Versions
    put:
      description: "For a Process Group that is already under Version Control, this\
        \ will update the version of the flow to a different version. This endpoint\
        \ expects that the given snapshot will not modify any Processor that is currently\
        \ running or any Controller Service that is enabled. Note: This endpoint is\
        \ subject to change as NiFi and it's REST API evolve."
      operationId: updateFlowVersion
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VersionedFlowSnapshotEntity"
        description: The controller service configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionControlInformationEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      - Write - /process-groups/{uuid}: []
      summary: Update the version of a Process Group with the given ID
      tags:
      - Versions
  /versions/process-groups/{id}/download:
    get:
      operationId: exportFlowVersion
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      summary: Gets the latest version of a Process Group for download
      tags:
      - Versions
  /versions/revert-requests/process-groups/{id}:
    post:
      description: "For a Process Group that is already under Version Control, this\
        \ will initiate the action of reverting any local changes that have been made\
        \ to the Process Group since it was last synchronized with the Flow Registry.\
        \ This will result in the flow matching the Versioned Flow that exists in\
        \ the Flow Registry. This can be a lengthy process, as it will stop any Processors\
        \ and disable any Controller Services necessary to perform the action and\
        \ then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity,\
        \ and the process of updating the flow will occur asynchronously in the background.\
        \ The client may then periodically poll the status of the request by issuing\
        \ a GET request to /versions/revert-requests/{requestId}. Once the request\
        \ is completed, the client is expected to issue a DELETE request to /versions/revert-requests/{requestId}.\
        \ Note: This endpoint is subject to change as NiFi and it's REST API evolve."
      operationId: initiateRevertFlowVersion
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VersionControlInformationEntity"
        description: The Version Control Information to revert to.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedFlowUpdateRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      - Write - /process-groups/{uuid}: []
      - Read - /{component-type}/{uuid} - For all encapsulated components: []
      - Write - /{component-type}/{uuid} - For all encapsulated components: []
      - Write - if the template contains any restricted components - /restricted-components: []
      - ? Read - /parameter-contexts/{uuid} - For any Parameter Context that is referenced
          by a Property that is changed, added, or removed
        : []
      summary: Initiate the Revert Request of a Process Group with the given ID
      tags:
      - Versions
  /versions/revert-requests/{id}:
    delete:
      description: "Deletes the Revert Request with the given ID. After a request\
        \ is created via a POST to /versions/revert-requests/process-groups/{id},\
        \ it is expected that the client will properly clean up the request by DELETE'ing\
        \ it, once the Revert process has completed. If the request is deleted before\
        \ the request completes, then the Revert request will finish the step that\
        \ it is currently performing and then will cancel any subsequent steps. Note:\
        \ This endpoint is subject to change as NiFi and it's REST API evolve."
      operationId: deleteRevertRequest
      parameters:
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The ID of the Revert Request
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedFlowUpdateRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Revert Request with the given ID
      tags:
      - Versions
    get:
      description: "Returns the Revert Request with the given ID. Once a Revert Request\
        \ has been created by performing a POST to /versions/revert-requests/process-groups/{id},\
        \ that request can subsequently be retrieved via this endpoint, and the request\
        \ that is fetched will contain the updated state, such as percent complete,\
        \ the current state of the request, and any failures. Note: This endpoint\
        \ is subject to change as NiFi and it's REST API evolve."
      operationId: getRevertRequest
      parameters:
      - description: The ID of the Revert Request
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedFlowUpdateRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Revert Request with the given ID
      tags:
      - Versions
  /versions/update-requests/process-groups/{id}:
    post:
      description: "For a Process Group that is already under Version Control, this\
        \ will initiate the action of changing from a specific version of the flow\
        \ in the Flow Registry to a different version of the flow. This can be a lengthy\
        \ process, as it will stop any Processors and disable any Controller Services\
        \ necessary to perform the action and then restart them. As a result, the\
        \ endpoint will immediately return a VersionedFlowUpdateRequestEntity, and\
        \ the process of updating the flow will occur asynchronously in the background.\
        \ The client may then periodically poll the status of the request by issuing\
        \ a GET request to /versions/update-requests/{requestId}. Once the request\
        \ is completed, the client is expected to issue a DELETE request to /versions/update-requests/{requestId}.\
        \ Note: This endpoint is subject to change as NiFi and it's REST API evolve."
      operationId: initiateVersionControlUpdate
      parameters:
      - description: The process group id.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VersionControlInformationEntity"
        description: The controller service configuration details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedFlowUpdateRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Read - /process-groups/{uuid}: []
      - Write - /process-groups/{uuid}: []
      - Read - /{component-type}/{uuid} - For all encapsulated components: []
      - Write - /{component-type}/{uuid} - For all encapsulated components: []
      - Write - if the template contains any restricted components - /restricted-components: []
      - ? Read - /parameter-contexts/{uuid} - For any Parameter Context that is referenced
          by a Property that is changed, added, or removed
        : []
      summary: Initiate the Update Request of a Process Group with the given ID
      tags:
      - Versions
  /versions/update-requests/{id}:
    delete:
      description: "Deletes the Update Request with the given ID. After a request\
        \ is created via a POST to /versions/update-requests/process-groups/{id},\
        \ it is expected that the client will properly clean up the request by DELETE'ing\
        \ it, once the Update process has completed. If the request is deleted before\
        \ the request completes, then the Update request will finish the step that\
        \ it is currently performing and then will cancel any subsequent steps. Note:\
        \ This endpoint is subject to change as NiFi and it's REST API evolve."
      operationId: deleteUpdateRequest_1
      parameters:
      - description: Acknowledges that this node is disconnected to allow for mutable
          requests to proceed.
        in: query
        name: disconnectedNodeAcknowledged
        schema:
          type: boolean
          default: false
      - description: The ID of the Update Request
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedFlowUpdateRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can remove it: []
      summary: Deletes the Update Request with the given ID
      tags:
      - Versions
    get:
      description: "Returns the Update Request with the given ID. Once an Update Request\
        \ has been created by performing a POST to /versions/update-requests/process-groups/{id},\
        \ that request can subsequently be retrieved via this endpoint, and the request\
        \ that is fetched will contain the updated state, such as percent complete,\
        \ the current state of the request, and any failures. Note: This endpoint\
        \ is subject to change as NiFi and it's REST API evolve."
      operationId: getUpdateRequest
      parameters:
      - description: The ID of the Update Request
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionedFlowUpdateRequestEntity"
        "400":
          description: NiFi was unable to complete the request because it was invalid.
            The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: The request was valid but NiFi was not in the appropriate state
            to process it.
      security:
      - Only the user that submitted the request can get it: []
      summary: Returns the Update Request with the given ID
      tags:
      - Versions
components:
  schemas:
    AboutDTO:
      type: object
      properties:
        buildBranch:
          type: string
          description: Build branch
        buildRevision:
          type: string
          description: Build revision or commit hash
        buildTag:
          type: string
          description: Build tag
        buildTimestamp:
          type: string
          description: Build timestamp
        contentViewerUrl:
          type: string
          description: The URL for the content viewer if configured.
        timezone:
          type: string
          description: The timezone of the NiFi instance.
          readOnly: true
        title:
          type: string
          description: The title to be used on the page and in the about dialog.
        uri:
          type: string
          description: The URI for the NiFi.
        version:
          type: string
          description: The version of this NiFi.
    AboutEntity:
      type: object
      properties:
        about:
          $ref: "#/components/schemas/AboutDTO"
      xml:
        name: aboutEntity
    AccessPolicyDTO:
      type: object
      properties:
        action:
          type: string
          description: The action associated with this access policy.
          enum:
          - read
          - write
        componentReference:
          $ref: "#/components/schemas/ComponentReferenceEntity"
        configurable:
          type: boolean
          description: Whether this policy is configurable.
        id:
          type: string
          description: The id of the component.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        resource:
          type: string
          description: The resource for this access policy.
        userGroups:
          type: array
          description: The set of user group IDs associated with this access policy.
          items:
            $ref: "#/components/schemas/TenantEntity"
          uniqueItems: true
        users:
          type: array
          description: The set of user IDs associated with this access policy.
          items:
            $ref: "#/components/schemas/TenantEntity"
          uniqueItems: true
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    AccessPolicyEntity:
      type: object
      description: "The access policies this user group belongs to. This field was\
        \ incorrectly defined as an AccessPolicyEntity. For compatibility reasons\
        \ the field will remain of this type, however only the fields that are present\
        \ in the AccessPolicySummaryEntity will be populated here."
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/AccessPolicyDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        generated:
          type: string
          description: When this content was generated.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      readOnly: true
      xml:
        name: accessPolicyEntity
    AccessPolicySummaryDTO:
      type: object
      properties:
        action:
          type: string
          description: The action associated with this access policy.
          enum:
          - read
          - write
        componentReference:
          $ref: "#/components/schemas/ComponentReferenceEntity"
        configurable:
          type: boolean
          description: Whether this policy is configurable.
        id:
          type: string
          description: The id of the component.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        resource:
          type: string
          description: The resource for this access policy.
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    AccessPolicySummaryEntity:
      type: object
      description: The access policies this user belongs to.
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/AccessPolicySummaryDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      readOnly: true
      xml:
        name: accessPolicySummaryEntity
    ActionDTO:
      type: object
      properties:
        actionDetails:
          $ref: "#/components/schemas/ActionDetailsDTO"
        componentDetails:
          $ref: "#/components/schemas/ComponentDetailsDTO"
        id:
          type: integer
          format: int32
          description: The action id.
        operation:
          type: string
          description: The operation that was performed.
        sourceId:
          type: string
          description: The id of the source component.
        sourceName:
          type: string
          description: The name of the source component.
        sourceType:
          type: string
          description: The type of the source component.
        timestamp:
          type: string
          description: The timestamp of the action.
        userIdentity:
          type: string
          description: The identity of the user that performed the action.
    ActionDetailsDTO:
      type: object
      description: The details of the action.
    ActionEntity:
      type: object
      description: The actions.
      properties:
        action:
          $ref: "#/components/schemas/ActionDTO"
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        id:
          type: integer
          format: int32
        sourceId:
          type: string
        timestamp:
          type: string
          description: The timestamp of the action.
      xml:
        name: actionEntity
    ActivateControllerServicesEntity:
      type: object
      properties:
        components:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: "Optional services to schedule. If not specified, all authorized\
            \ descendant controller services will be used."
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the ProcessGroup
        state:
          type: string
          description: The desired state of the descendant components
          enum:
          - ENABLED
          - DISABLED
      xml:
        name: activateControllerServicesEntity
    AdditionalDetailsEntity:
      type: object
      properties:
        additionalDetails:
          type: string
      xml:
        name: additionalDetailsEntity
    AffectedComponentDTO:
      type: object
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The number of active threads for the referencing component.
        id:
          type: string
          description: The UUID of this component
        name:
          type: string
          description: The name of this component.
        processGroupId:
          type: string
          description: The UUID of the Process Group that this component is in
        referenceType:
          type: string
          description: The type of this component
          enum:
          - PROCESSOR
          - CONTROLLER_SERVICE
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - STATELESS_GROUP
        state:
          type: string
          description: "The scheduled state of a processor or reporting task referencing\
            \ a controller service. If this component is another controller service,\
            \ this field represents the controller service state."
        validationErrors:
          type: array
          description: The validation errors for the component.
          items:
            type: string
            description: The validation errors for the component.
    AffectedComponentEntity:
      type: object
      description: The set of all components in the flow that are referencing this
        Parameter
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/AffectedComponentDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        processGroup:
          $ref: "#/components/schemas/ProcessGroupNameDTO"
        referenceType:
          type: string
          description: The type of component referenced
          enum:
          - PROCESSOR
          - CONTROLLER_SERVICE
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: affectedComponentEntity
    AllowableValueDTO:
      type: object
      properties:
        description:
          type: string
          description: A description for this allowable value.
        displayName:
          type: string
          description: A human readable value that is allowed for the property descriptor.
        value:
          type: string
          description: A value that is allowed for the property descriptor.
    AllowableValueEntity:
      type: object
      description: Allowable values for the property. If empty then the allowed values
        are not constrained.
      properties:
        allowableValue:
          $ref: "#/components/schemas/AllowableValueDTO"
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
      xml:
        name: entity
    AssetDTO:
      type: object
      description: The Asset.
      properties:
        digest:
          type: string
          description: "The digest of the asset, will be null if the asset content\
            \ is missing."
        id:
          type: string
          description: The identifier of the asset.
        missingContent:
          type: boolean
          description: Indicates if the content of the asset is missing.
        name:
          type: string
          description: The name of the asset.
      readOnly: true
    AssetEntity:
      type: object
      description: The asset entities
      properties:
        asset:
          $ref: "#/components/schemas/AssetDTO"
      xml:
        name: assetEntity
    AssetReferenceDTO:
      type: object
      description: A list of identifiers of the assets that are referenced by the
        parameter
      properties:
        id:
          type: string
          description: The identifier of the referenced asset.
        name:
          type: string
          description: The name of the referenced asset.
          readOnly: true
    AssetsEntity:
      type: object
      properties:
        assets:
          type: array
          description: The asset entities
          items:
            $ref: "#/components/schemas/AssetEntity"
      xml:
        name: assetEntity
    Attribute:
      type: object
      description: The FlowFile attributes this processor writes/updates
      properties:
        description:
          type: string
          description: The description of the attribute
        name:
          type: string
          description: The name of the attribute
    AttributeDTO:
      type: object
      description: The attributes of the flowfile for the event.
      properties:
        name:
          type: string
          description: The attribute name.
        previousValue:
          type: string
          description: The value of the attribute before the event took place.
        value:
          type: string
          description: The attribute value.
    AuthenticationConfigurationDTO:
      type: object
      properties:
        externalLoginRequired:
          type: boolean
          description: Whether the system requires login through an external Identity
            Provider
          readOnly: true
        loginSupported:
          type: boolean
          description: Whether the system is configured to support login operations
          readOnly: true
        loginUri:
          type: string
          description: Location for initiating login processing
          nullable: true
          readOnly: true
        logoutUri:
          type: string
          description: Location for initiating logout processing
          nullable: true
          readOnly: true
    AuthenticationConfigurationEntity:
      type: object
      properties:
        authenticationConfiguration:
          $ref: "#/components/schemas/AuthenticationConfigurationDTO"
      xml:
        name: authenticationConfigurationEntity
    BannerDTO:
      type: object
      properties:
        footerText:
          type: string
          description: The footer text.
        headerText:
          type: string
          description: The header text.
    BannerEntity:
      type: object
      properties:
        banners:
          $ref: "#/components/schemas/BannerDTO"
      xml:
        name: bannersEntity
    BatchSettingsDTO:
      type: object
      description: The batch settings for data transmission.
      properties:
        count:
          type: integer
          format: int32
          description: Preferred number of flow files to include in a transaction.
        duration:
          type: string
          description: Preferred amount of time that a transaction should span.
        size:
          type: string
          description: Preferred number of bytes to include in a transaction.
    BatchSize:
      type: object
      description: The batch settings for data transmission.
      properties:
        count:
          type: integer
          format: int32
          description: Preferred number of flow files to include in a transaction.
        duration:
          type: string
          description: Preferred amount of time that a transaction should span.
        size:
          type: string
          description: Preferred number of bytes to include in a transaction.
    BuildInfo:
      type: object
      description: The build metadata for this component
      properties:
        compiler:
          type: string
          description: The compiler used for the build
        compilerFlags:
          type: string
          description: The compiler flags used for the build.
        revision:
          type: string
          description: The SCM revision id of the source code used for this build.
        targetArch:
          type: string
          description: The target architecture of the built component.
        timestamp:
          type: integer
          format: int64
          description: The timestamp (milliseconds since Epoch) of the build.
        version:
          type: string
          description: The version number of the built component.
    BulletinBoardDTO:
      type: object
      properties:
        bulletins:
          type: array
          description: "The bulletins in the bulletin board, that matches the supplied\
            \ request."
          items:
            $ref: "#/components/schemas/BulletinEntity"
        generated:
          type: string
          description: The timestamp when this report was generated.
    BulletinBoardEntity:
      type: object
      properties:
        bulletinBoard:
          $ref: "#/components/schemas/BulletinBoardDTO"
      xml:
        name: bulletinBoardEntity
    BulletinBoardPatternParameter:
      type: object
      properties:
        pattern:
          type: object
        rawPattern:
          type: string
    BulletinDTO:
      type: object
      properties:
        category:
          type: string
          description: The category of this bulletin.
        groupId:
          type: string
          description: The group id of the source component.
        id:
          type: integer
          format: int64
          description: The id of the bulletin.
        level:
          type: string
          description: The level of the bulletin.
        message:
          type: string
          description: The bulletin message.
        nodeAddress:
          type: string
          description: "If clustered, the address of the node from which the bulletin\
            \ originated."
        sourceId:
          type: string
          description: The id of the source component.
        sourceName:
          type: string
          description: The name of the source component.
        sourceType:
          type: string
          description: The type of the source component
        timestamp:
          type: string
          description: When this bulletin was generated.
    BulletinEntity:
      type: object
      description: The bulletins for this component.
      properties:
        bulletin:
          $ref: "#/components/schemas/BulletinDTO"
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        groupId:
          type: string
        id:
          type: integer
          format: int64
        nodeAddress:
          type: string
        sourceId:
          type: string
        timestamp:
          type: string
          description: When this bulletin was generated.
      xml:
        name: bulletinEntity
    Bundle:
      type: object
      description: The details of the artifact that bundled this parameter provider.
      properties:
        artifact:
          type: string
          description: The artifact of the bundle
        group:
          type: string
          description: The group of the bundle
        version:
          type: string
          description: The version of the bundle
    BundleDTO:
      type: object
      description: "If the property identifies a controller service this returns the\
        \ bundle of the type, null otherwise."
      properties:
        artifact:
          type: string
          description: The artifact of the bundle.
        group:
          type: string
          description: The group of the bundle.
        version:
          type: string
          description: The version of the bundle.
    ClientIdParameter:
      type: object
      properties:
        clientId:
          type: string
    ClusterDTO:
      type: object
      properties:
        generated:
          type: string
          description: The timestamp the report was generated.
        nodes:
          type: array
          description: The collection of nodes that are part of the cluster.
          items:
            $ref: "#/components/schemas/NodeDTO"
    ClusterEntity:
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/ClusterDTO"
      xml:
        name: clusterEntity
    ClusterSearchResultsEntity:
      type: object
      properties:
        nodeResults:
          type: array
          items:
            $ref: "#/components/schemas/NodeSearchResultDTO"
      xml:
        name: clusterSearchResultsEntity
    ClusterSummaryDTO:
      type: object
      properties:
        clustered:
          type: boolean
          description: Whether this NiFi instance is clustered.
        connectedNodeCount:
          type: integer
          format: int32
          description: The number of nodes that are currently connected to the cluster
        connectedNodes:
          type: string
          description: "When clustered, reports the number of nodes connected vs the\
            \ number of nodes in the cluster."
        connectedToCluster:
          type: boolean
          description: Whether this NiFi instance is connected to a cluster.
        totalNodeCount:
          type: integer
          format: int32
          description: "The number of nodes in the cluster, regardless of whether\
            \ or not they are connected"
    ClusterSummaryEntity:
      type: object
      properties:
        clusterSummary:
          $ref: "#/components/schemas/ClusterSummaryDTO"
      xml:
        name: clusterSummaryEntity
    ComponentDetailsDTO:
      type: object
      description: The details of the source component.
    ComponentDifferenceDTO:
      type: object
      description: The list of differences for each component in the flow that is
        not the same between the two flows
      properties:
        componentId:
          type: string
          description: The ID of the component
        componentName:
          type: string
          description: The name of the component
        componentType:
          type: string
          description: The type of component
        differences:
          type: array
          description: The differences in the component between the two flows
          items:
            $ref: "#/components/schemas/DifferenceDTO"
        processGroupId:
          type: string
          description: The ID of the Process Group that the component belongs to
    ComponentHistoryDTO:
      type: object
      properties:
        componentId:
          type: string
          description: The component id.
        propertyHistory:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyHistoryDTO"
          description: The history for the properties of the component.
    ComponentHistoryEntity:
      type: object
      properties:
        componentHistory:
          $ref: "#/components/schemas/ComponentHistoryDTO"
      xml:
        name: componentHistoryEntity
    ComponentManifest:
      type: object
      description: The full specification of the bundle contents
      properties:
        apis:
          type: array
          description: Public interfaces defined in this bundle
          items:
            $ref: "#/components/schemas/DefinedType"
        controllerServices:
          type: array
          description: Controller Services provided in this bundle
          items:
            $ref: "#/components/schemas/ControllerServiceDefinition"
        flowAnalysisRules:
          type: array
          description: Flow Analysis Rules provided in this bundle
          items:
            $ref: "#/components/schemas/FlowAnalysisRuleDefinition"
        parameterProviders:
          type: array
          description: Parameter Providers provided in this bundle
          items:
            $ref: "#/components/schemas/ParameterProviderDefinition"
        processors:
          type: array
          description: Processors provided in this bundle
          items:
            $ref: "#/components/schemas/ProcessorDefinition"
        reportingTasks:
          type: array
          description: Reporting Tasks provided in this bundle
          items:
            $ref: "#/components/schemas/ReportingTaskDefinition"
    ComponentReferenceDTO:
      type: object
      properties:
        id:
          type: string
          description: The id of the component.
        name:
          type: string
          description: The name of the component.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    ComponentReferenceEntity:
      type: object
      description: Component this policy references if applicable.
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ComponentReferenceDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: componentReferenceEntity
    ComponentRestrictionPermissionDTO:
      type: object
      description: Permissions for specific component restrictions.
      properties:
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        requiredPermission:
          $ref: "#/components/schemas/RequiredPermissionDTO"
    ComponentSearchResultDTO:
      type: object
      description: The parameters that matched the search.
      properties:
        groupId:
          type: string
          description: The group id of the component that matched the search.
        id:
          type: string
          description: The id of the component that matched the search.
        matches:
          type: array
          description: What matched the search from the component.
          items:
            type: string
            description: What matched the search from the component.
        name:
          type: string
          description: The name of the component that matched the search.
        parentGroup:
          $ref: "#/components/schemas/SearchResultGroupDTO"
        versionedGroup:
          $ref: "#/components/schemas/SearchResultGroupDTO"
    ComponentStateDTO:
      type: object
      description: The component state.
      properties:
        clusterState:
          $ref: "#/components/schemas/StateMapDTO"
        componentId:
          type: string
          description: The component identifier.
        localState:
          $ref: "#/components/schemas/StateMapDTO"
        stateDescription:
          type: string
          description: Description of the state this component persists.
    ComponentStateEntity:
      type: object
      properties:
        componentState:
          $ref: "#/components/schemas/ComponentStateDTO"
      xml:
        name: componentStateEntity
    ComponentValidationResultDTO:
      type: object
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The number of active threads for the referencing component.
        currentlyValid:
          type: boolean
          description: Whether or not the component is currently valid
        id:
          type: string
          description: The UUID of this component
        name:
          type: string
          description: The name of this component.
        processGroupId:
          type: string
          description: The UUID of the Process Group that this component is in
        referenceType:
          type: string
          description: The type of this component
          enum:
          - PROCESSOR
          - CONTROLLER_SERVICE
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - STATELESS_GROUP
        resultantValidationErrors:
          type: array
          description: The validation errors that will apply to the component if the
            Parameter Context is changed
          items:
            type: string
            description: The validation errors that will apply to the component if
              the Parameter Context is changed
        resultsValid:
          type: boolean
          description: Whether or not the component will be valid if the Parameter
            Context is changed
        state:
          type: string
          description: "The scheduled state of a processor or reporting task referencing\
            \ a controller service. If this component is another controller service,\
            \ this field represents the controller service state."
        validationErrors:
          type: array
          description: The validation errors for the component.
          items:
            type: string
            description: The validation errors for the component.
    ComponentValidationResultEntity:
      type: object
      description: "A List of ComponentValidationResultEntity, one for each component\
        \ that is validated"
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ComponentValidationResultDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: componentValidationResultEntity
    ComponentValidationResultsEntity:
      type: object
      description: The Validation Results that were calculated for each component.
        This value may not be set until the request completes.
      properties:
        validationResults:
          type: array
          description: "A List of ComponentValidationResultEntity, one for each component\
            \ that is validated"
          items:
            $ref: "#/components/schemas/ComponentValidationResultEntity"
      readOnly: true
      xml:
        name: componentValidationResults
    ConfigVerificationResultDTO:
      type: object
      description: The Results of the verification
      properties:
        explanation:
          type: string
          description: An explanation of why the step was or was not successful
        outcome:
          type: string
          description: The outcome of the verification
          enum:
          - SUCCESSFUL
          - FAILED
          - SKIPPED
        verificationStepName:
          type: string
          description: The name of the verification step
      readOnly: true
    ConfigurationAnalysisDTO:
      type: object
      description: The configuration analysis
      properties:
        componentId:
          type: string
          description: The ID of the component
        properties:
          type: object
          additionalProperties:
            type: string
            description: The configured properties for the component
          description: The configured properties for the component
        referencedAttributes:
          type: object
          additionalProperties:
            type: string
            description: "The attributes that are referenced by the properties, mapped\
              \ to recently used values"
          description: "The attributes that are referenced by the properties, mapped\
            \ to recently used values"
        supportsVerification:
          type: boolean
          description: Whether or not the component supports verification
    ConfigurationAnalysisEntity:
      type: object
      properties:
        configurationAnalysis:
          $ref: "#/components/schemas/ConfigurationAnalysisDTO"
      xml:
        name: configurationAnalysis
    ConnectableComponent:
      type: object
      description: The destination of the connection.
      properties:
        comments:
          type: string
          description: The comments for the connectable component.
        groupId:
          type: string
          description: The id of the group that the connectable component resides
            in
        id:
          type: string
          description: The id of the connectable component.
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The name of the connectable component
        type:
          type: string
          description: The type of component the connectable is.
          enum:
          - PROCESSOR
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - INPUT_PORT
          - OUTPUT_PORT
          - FUNNEL
    ConnectableDTO:
      type: object
      description: The destination of the connection.
      properties:
        comments:
          type: string
          description: The comments for the connectable component.
        exists:
          type: boolean
          description: "If the connectable component represents a remote port, indicates\
            \ if the target exists."
        groupId:
          type: string
          description: The id of the group that the connectable component resides
            in
        id:
          type: string
          description: The id of the connectable component.
        name:
          type: string
          description: The name of the connectable component
        running:
          type: boolean
          description: Reflects the current state of the connectable component.
        transmitting:
          type: boolean
          description: "If the connectable component represents a remote port, indicates\
            \ if the target is configured to transmit."
        type:
          type: string
          description: The type of component the connectable is.
          enum:
          - PROCESSOR
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - INPUT_PORT
          - OUTPUT_PORT
          - FUNNEL
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
      required:
      - groupId
      - id
      - type
    ConnectionDTO:
      type: object
      description: The connections in this flow snippet.
      properties:
        availableRelationships:
          type: array
          description: The relationships that the source of the connection currently
            supports.
          items:
            type: string
            description: The relationships that the source of the connection currently
              supports.
            readOnly: true
          readOnly: true
          uniqueItems: true
        backPressureDataSizeThreshold:
          type: string
          description: The object data size threshold for determining when back pressure
            is applied. Updating this value is a passive change in the sense that
            it won't impact whether existing files over the limit are affected but
            it does help feeder processors to stop pushing too much into this work
            queue.
        backPressureObjectThreshold:
          type: integer
          format: int64
          description: The object count threshold for determining when back pressure
            is applied. Updating this value is a passive change in the sense that
            it won't impact whether existing files over the limit are affected but
            it does help feeder processors to stop pushing too much into this work
            queue.
        bends:
          type: array
          description: The bend points on the connection.
          items:
            $ref: "#/components/schemas/PositionDTO"
        destination:
          $ref: "#/components/schemas/ConnectableDTO"
        flowFileExpiration:
          type: string
          description: The amount of time a flow file may be in the flow before it
            will be automatically aged out of the flow. Once a flow file reaches this
            age it will be terminated from the flow the next time a processor attempts
            to start work on it.
        getzIndex:
          type: integer
          format: int64
          description: The z index of the connection.
        id:
          type: string
          description: The id of the component.
        labelIndex:
          type: integer
          format: int32
          description: The index of the bend point where to place the connection label.
        loadBalanceCompression:
          type: string
          description: Whether or not data should be compressed when being transferred
            between nodes in the cluster.
          enum:
          - DO_NOT_COMPRESS
          - COMPRESS_ATTRIBUTES_ONLY
          - COMPRESS_ATTRIBUTES_AND_CONTENT
        loadBalancePartitionAttribute:
          type: string
          description: The FlowFile Attribute to use for determining which node a
            FlowFile will go to if the Load Balancing Strategy is set to PARTITION_BY_ATTRIBUTE
        loadBalanceStatus:
          type: string
          description: "The current status of the Connection's Load Balancing Activities.\
            \ Status can indicate that Load Balancing is not configured for the connection,\
            \ that Load Balancing is configured but inactive (not currently transferring\
            \ data to another node), or that Load Balancing is configured and actively\
            \ transferring data to another node."
          enum:
          - LOAD_BALANCE_NOT_CONFIGURED
          - LOAD_BALANCE_INACTIVE
          - LOAD_BALANCE_ACTIVE
          readOnly: true
        loadBalanceStrategy:
          type: string
          description: How to load balance the data in this Connection across the
            nodes in the cluster.
          enum:
          - DO_NOT_LOAD_BALANCE
          - PARTITION_BY_ATTRIBUTE
          - ROUND_ROBIN
          - SINGLE_NODE
        name:
          type: string
          description: The name of the connection.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        prioritizers:
          type: array
          description: The comparators used to prioritize the queue.
          items:
            type: string
            description: The comparators used to prioritize the queue.
        selectedRelationships:
          type: array
          description: The selected relationship that comprise the connection.
          items:
            type: string
            description: The selected relationship that comprise the connection.
          uniqueItems: true
        source:
          $ref: "#/components/schemas/ConnectableDTO"
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    ConnectionEntity:
      type: object
      description: The connections in this flow.
      properties:
        bends:
          type: array
          description: The bend points on the connection.
          items:
            $ref: "#/components/schemas/PositionDTO"
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ConnectionDTO"
        destinationGroupId:
          type: string
          description: The identifier of the group of the destination of this connection.
        destinationId:
          type: string
          description: The identifier of the destination of this connection.
        destinationType:
          type: string
          description: The type of component the destination connectable is.
          enum:
          - PROCESSOR
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - INPUT_PORT
          - OUTPUT_PORT
          - FUNNEL
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        getzIndex:
          type: integer
          format: int64
          description: The z index of the connection.
        id:
          type: string
          description: The id of the component.
        labelIndex:
          type: integer
          format: int32
          description: The index of the bend point where to place the connection label.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        sourceGroupId:
          type: string
          description: The identifier of the group of the source of this connection.
        sourceId:
          type: string
          description: The identifier of the source of this connection.
        sourceType:
          type: string
          description: The type of component the source connectable is.
          enum:
          - PROCESSOR
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - INPUT_PORT
          - OUTPUT_PORT
          - FUNNEL
        status:
          $ref: "#/components/schemas/ConnectionStatusDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      required:
      - destinationType
      - sourceType
      xml:
        name: connectionEntity
    ConnectionStatisticsDTO:
      type: object
      properties:
        aggregateSnapshot:
          $ref: "#/components/schemas/ConnectionStatisticsSnapshotDTO"
        id:
          type: string
          description: The ID of the connection
        nodeSnapshots:
          type: array
          description: A list of status snapshots for each node
          items:
            $ref: "#/components/schemas/NodeConnectionStatisticsSnapshotDTO"
        statsLastRefreshed:
          type: string
          description: The timestamp of when the stats were last refreshed
    ConnectionStatisticsEntity:
      type: object
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        connectionStatistics:
          $ref: "#/components/schemas/ConnectionStatisticsDTO"
      xml:
        name: connectionStatisticsEntity
    ConnectionStatisticsSnapshotDTO:
      type: object
      description: The connection status snapshot from the node.
      properties:
        id:
          type: string
          description: The id of the connection.
        predictedBytesAtNextInterval:
          type: integer
          format: int64
          description: The predicted total number of bytes in the queue at the next
            configured interval.
        predictedCountAtNextInterval:
          type: integer
          format: int32
          description: The predicted number of queued objects at the next configured
            interval.
        predictedMillisUntilBytesBackpressure:
          type: integer
          format: int64
          description: "The predicted number of milliseconds before the connection\
            \ will have backpressure applied, based on the total number of bytes in\
            \ the queue."
        predictedMillisUntilCountBackpressure:
          type: integer
          format: int64
          description: "The predicted number of milliseconds before the connection\
            \ will have backpressure applied, based on the queued count."
        predictedPercentBytes:
          type: integer
          format: int32
          description: The predicted percentage of bytes in the queue against current
            threshold at the next configured interval.
        predictedPercentCount:
          type: integer
          format: int32
          description: The predicted percentage of queued objects at the next configured
            interval.
        predictionIntervalMillis:
          type: integer
          format: int64
          description: The prediction interval in seconds
    ConnectionStatusDTO:
      type: object
      description: The status of the connection.
      properties:
        aggregateSnapshot:
          $ref: "#/components/schemas/ConnectionStatusSnapshotDTO"
        destinationId:
          type: string
          description: The ID of the destination component
        destinationName:
          type: string
          description: The name of the destination component
        groupId:
          type: string
          description: The ID of the Process Group that the connection belongs to
        id:
          type: string
          description: The ID of the connection
        name:
          type: string
          description: The name of the connection
        nodeSnapshots:
          type: array
          description: A list of status snapshots for each node
          items:
            $ref: "#/components/schemas/NodeConnectionStatusSnapshotDTO"
        sourceId:
          type: string
          description: The ID of the source component
        sourceName:
          type: string
          description: The name of the source component
        statsLastRefreshed:
          type: string
          description: The timestamp of when the stats were last refreshed
    ConnectionStatusEntity:
      type: object
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        connectionStatus:
          $ref: "#/components/schemas/ConnectionStatusDTO"
      xml:
        name: connectionStatusEntity
    ConnectionStatusPredictionsSnapshotDTO:
      type: object
      description: "Predictions, if available, for this connection (null if not available)"
      properties:
        predictedBytesAtNextInterval:
          type: integer
          format: int64
          description: The predicted total number of bytes in the queue at the next
            configured interval.
        predictedCountAtNextInterval:
          type: integer
          format: int32
          description: The predicted number of queued objects at the next configured
            interval.
        predictedMillisUntilBytesBackpressure:
          type: integer
          format: int64
          description: "The predicted number of milliseconds before the connection\
            \ will have backpressure applied, based on the total number of bytes in\
            \ the queue."
        predictedMillisUntilCountBackpressure:
          type: integer
          format: int64
          description: "The predicted number of milliseconds before the connection\
            \ will have backpressure applied, based on the queued count."
        predictedPercentBytes:
          type: integer
          format: int32
          description: Predicted connection percent use regarding queued flow files
            size and backpressure threshold if configured.
        predictedPercentCount:
          type: integer
          format: int32
          description: Predicted connection percent use regarding queued flow files
            count and backpressure threshold if configured.
        predictionIntervalSeconds:
          type: integer
          format: int32
          description: The configured interval (in seconds) for predicting connection
            queue count and size (and percent usage).
    ConnectionStatusSnapshotDTO:
      type: object
      properties:
        bytesIn:
          type: integer
          format: int64
          description: The size of the FlowFiles that have come into the connection
            in the last 5 minutes.
        bytesOut:
          type: integer
          format: int64
          description: The number of bytes that have left the connection in the last
            5 minutes.
        bytesQueued:
          type: integer
          format: int64
          description: The size of the FlowFiles that are currently queued in the
            connection.
        destinationId:
          type: string
          description: The id of the destination of the connection.
        destinationName:
          type: string
          description: The name of the destination of the connection.
        flowFileAvailability:
          type: string
          description: The availability of FlowFiles in this connection
        flowFilesIn:
          type: integer
          format: int32
          description: The number of FlowFiles that have come into the connection
            in the last 5 minutes.
        flowFilesOut:
          type: integer
          format: int32
          description: The number of FlowFiles that have left the connection in the
            last 5 minutes.
        flowFilesQueued:
          type: integer
          format: int32
          description: The number of FlowFiles that are currently queued in the connection.
        groupId:
          type: string
          description: The id of the process group the connection belongs to.
        id:
          type: string
          description: The id of the connection.
        input:
          type: string
          description: "The input count/size for the connection in the last 5 minutes,\
            \ pretty printed."
        name:
          type: string
          description: The name of the connection.
        output:
          type: string
          description: "The output count/sie for the connection in the last 5 minutes,\
            \ pretty printed."
        percentUseBytes:
          type: integer
          format: int32
          description: Connection percent use regarding queued flow files size and
            backpressure threshold if configured.
        percentUseCount:
          type: integer
          format: int32
          description: Connection percent use regarding queued flow files count and
            backpressure threshold if configured.
        predictions:
          $ref: "#/components/schemas/ConnectionStatusPredictionsSnapshotDTO"
        queued:
          type: string
          description: The total count and size of queued flowfiles formatted.
        queuedCount:
          type: string
          description: "The number of flowfiles that are queued, pretty printed."
        queuedSize:
          type: string
          description: The total size of flowfiles that are queued formatted.
        sourceId:
          type: string
          description: The id of the source of the connection.
        sourceName:
          type: string
          description: The name of the source of the connection.
    ConnectionStatusSnapshotEntity:
      type: object
      description: The status of all connections in the process group.
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        connectionStatusSnapshot:
          $ref: "#/components/schemas/ConnectionStatusSnapshotDTO"
        id:
          type: string
          description: The id of the connection.
      xml:
        name: entity
    ConnectionsEntity:
      type: object
      properties:
        connections:
          type: array
          items:
            $ref: "#/components/schemas/ConnectionEntity"
          uniqueItems: true
      xml:
        name: connectionsEntity
    ContentViewerDTO:
      type: object
      description: The Content Viewers.
      properties:
        displayName:
          type: string
          description: The display name of the Content Viewer.
          readOnly: true
        supportedMimeTypes:
          type: array
          description: The mime types this Content Viewer supports.
          items:
            $ref: "#/components/schemas/SupportedMimeTypesDTO"
          readOnly: true
        uri:
          type: string
          description: The uri of the Content Viewer.
          readOnly: true
      readOnly: true
    ContentViewerEntity:
      type: object
      properties:
        contentViewers:
          type: array
          description: The Content Viewers.
          items:
            $ref: "#/components/schemas/ContentViewerDTO"
          readOnly: true
      xml:
        name: contentViewerEntity
    ControllerBulletinsEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: System level bulletins to be reported to the user.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        controllerServiceBulletins:
          type: array
          description: Controller service bulletins to be reported to the user.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        flowAnalysisRuleBulletins:
          type: array
          description: Flow Analysis Rule bulletins to be reported to the user.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        flowRegistryClientBulletins:
          type: array
          description: Flow registry client bulletins to be reported to the user.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        parameterProviderBulletins:
          type: array
          description: Parameter provider bulletins to be reported to the user.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        reportingTaskBulletins:
          type: array
          description: Reporting task bulletins to be reported to the user.
          items:
            $ref: "#/components/schemas/BulletinEntity"
      xml:
        name: controllerConfigurationEntity
    ControllerConfigurationDTO:
      type: object
      description: The controller configuration.
      properties:
        maxTimerDrivenThreadCount:
          type: integer
          format: int32
          description: The maximum number of timer driven threads the NiFi has available.
    ControllerConfigurationEntity:
      type: object
      properties:
        component:
          $ref: "#/components/schemas/ControllerConfigurationDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
      xml:
        name: controllerConfigurationEntity
    ControllerDTO:
      type: object
      properties:
        activeRemotePortCount:
          type: integer
          format: int32
          description: The number of active remote ports contained in the NiFi.
        comments:
          type: string
          description: The comments for the NiFi.
        disabledCount:
          type: integer
          format: int32
          description: The number of disabled components in the NiFi.
        id:
          type: string
          description: The id of the NiFi.
        inactiveRemotePortCount:
          type: integer
          format: int32
          description: The number of inactive remote ports contained in the NiFi.
        inputPortCount:
          type: integer
          format: int32
          description: The number of input ports contained in the NiFi.
        inputPorts:
          type: array
          description: The input ports available to send data to for the NiFi.
          items:
            $ref: "#/components/schemas/PortDTO"
          uniqueItems: true
        instanceId:
          type: string
          description: "If clustered, the id of the Cluster Manager, otherwise the\
            \ id of the NiFi."
        invalidCount:
          type: integer
          format: int32
          description: The number of invalid components in the NiFi.
        name:
          type: string
          description: The name of the NiFi.
        outputPortCount:
          type: integer
          format: int32
          description: The number of output ports in the NiFi.
        outputPorts:
          type: array
          description: The output ports available to received data from the NiFi.
          items:
            $ref: "#/components/schemas/PortDTO"
          uniqueItems: true
        remoteSiteHttpListeningPort:
          type: integer
          format: int32
          description: "The HTTP(S) Port on which this instance is listening for Remote\
            \ Transfers of Flow Files. If this instance is not configured to receive\
            \ Flow Files from remote instances, this will be null."
        remoteSiteListeningPort:
          type: integer
          format: int32
          description: "The Socket Port on which this instance is listening for Remote\
            \ Transfers of Flow Files. If this instance is not configured to receive\
            \ Flow Files from remote instances, this will be null."
        runningCount:
          type: integer
          format: int32
          description: The number of running components in the NiFi.
        siteToSiteSecure:
          type: boolean
          description: Indicates whether or not Site-to-Site communications with this
            instance is secure (2-way authentication).
        stoppedCount:
          type: integer
          format: int32
          description: The number of stopped components in the NiFi.
    ControllerEntity:
      type: object
      properties:
        controller:
          $ref: "#/components/schemas/ControllerDTO"
      xml:
        name: controllerEntity
    ControllerServiceAPI:
      type: object
      description: Lists the APIs this Controller Service implements.
      properties:
        bundle:
          $ref: "#/components/schemas/Bundle"
        type:
          type: string
          description: The fully qualified name of the service interface.
    ControllerServiceApiDTO:
      type: object
      description: Lists the APIs this Controller Service implements.
      properties:
        bundle:
          $ref: "#/components/schemas/BundleDTO"
        type:
          type: string
          description: The fully qualified name of the service interface.
    ControllerServiceDTO:
      type: object
      description: The controller services in this flow snippet.
      properties:
        annotationData:
          type: string
          description: The annotation for the controller service. This is how the
            custom UI relays configuration to the controller service.
        bulletinLevel:
          type: string
          description: The level at which the controller service will report bulletins.
        bundle:
          $ref: "#/components/schemas/BundleDTO"
        comments:
          type: string
          description: The comments for the controller service.
        controllerServiceApis:
          type: array
          description: Lists the APIs this Controller Service implements.
          items:
            $ref: "#/components/schemas/ControllerServiceApiDTO"
        customUiUrl:
          type: string
          description: The URL for the controller services custom configuration UI
            if applicable.
        deprecated:
          type: boolean
          description: Whether the ontroller service has been deprecated.
        descriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptorDTO"
          description: The descriptors for the controller service properties.
        extensionMissing:
          type: boolean
          description: Whether the underlying extension is missing.
        id:
          type: string
          description: The id of the component.
        multipleVersionsAvailable:
          type: boolean
          description: Whether the controller service has multiple versions available.
        name:
          type: string
          description: The name of the controller service.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        persistsState:
          type: boolean
          description: Whether the controller service persists state.
        position:
          $ref: "#/components/schemas/PositionDTO"
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties of the controller service.
          description: The properties of the controller service.
        referencingComponents:
          type: array
          description: All components referencing this controller service.
          items:
            $ref: "#/components/schemas/ControllerServiceReferencingComponentEntity"
          uniqueItems: true
        restricted:
          type: boolean
          description: Whether the controller service requires elevated privileges.
        sensitiveDynamicPropertyNames:
          type: array
          description: Set of sensitive dynamic property names
          items:
            type: string
            description: Set of sensitive dynamic property names
          uniqueItems: true
        state:
          type: string
          description: The state of the controller service.
          enum:
          - ENABLED
          - ENABLING
          - DISABLED
          - DISABLING
        supportsSensitiveDynamicProperties:
          type: boolean
          description: Whether the controller service supports sensitive dynamic properties.
        type:
          type: string
          description: The type of the controller service.
        validationErrors:
          type: array
          description: |
            The validation errors from the controller service.
            These validation errors represent the problems with the controller service that must be resolved before it can be enabled.
          items:
            type: string
            description: |
              The validation errors from the controller service.
              These validation errors represent the problems with the controller service that must be resolved before it can be enabled.
        validationStatus:
          type: string
          description: "Indicates whether the ControllerService is valid, invalid,\
            \ or still in the process of validating (i.e., it is unknown whether or\
            \ not the ControllerService is valid)"
          enum:
          - VALID
          - INVALID
          - VALIDATING
          readOnly: true
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    ControllerServiceDefinition:
      type: object
      description: Controller Services provided in this bundle
      properties:
        additionalDetails:
          type: boolean
          description: Indicates if the component has additional details documentation
        artifact:
          type: string
          description: The artifact name of the bundle that provides the referenced
            type.
        buildInfo:
          $ref: "#/components/schemas/BuildInfo"
        deprecated:
          type: boolean
          description: Whether or not the component has been deprecated
        deprecationAlternatives:
          type: array
          description: "If this component has been deprecated, this optional field\
            \ provides alternatives to use"
          items:
            type: string
            description: "If this component has been deprecated, this optional field\
              \ provides alternatives to use"
          uniqueItems: true
        deprecationReason:
          type: string
          description: "If this component has been deprecated, this optional field\
            \ can be used to provide an explanation"
        dynamicProperties:
          type: array
          description: Describes the dynamic properties supported by this component
          items:
            $ref: "#/components/schemas/DynamicProperty"
        explicitRestrictions:
          type: array
          description: Explicit restrictions that indicate a require permission to
            use the component
          items:
            $ref: "#/components/schemas/Restriction"
          uniqueItems: true
        group:
          type: string
          description: The group name of the bundle that provides the referenced type.
        propertyDescriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptor"
          description: Descriptions of configuration properties applicable to this
            component.
        providedApiImplementations:
          type: array
          description: "If this type represents a provider for an interface, this\
            \ lists the APIs it implements"
          items:
            $ref: "#/components/schemas/DefinedType"
        restricted:
          type: boolean
          description: Whether or not the component has a general restriction
        restrictedExplanation:
          type: string
          description: An optional description of the general restriction
        seeAlso:
          type: array
          description: The names of other component types that may be related
          items:
            type: string
            description: The names of other component types that may be related
          uniqueItems: true
        stateful:
          $ref: "#/components/schemas/Stateful"
        supportsDynamicProperties:
          type: boolean
          description: Whether or not this component makes use of dynamic (user-set)
            properties.
        supportsSensitiveDynamicProperties:
          type: boolean
          description: Whether or not this component makes use of sensitive dynamic
            (user-set) properties.
        systemResourceConsiderations:
          type: array
          description: The system resource considerations for the given component
          items:
            $ref: "#/components/schemas/SystemResourceConsideration"
        tags:
          type: array
          description: The tags associated with this type
          items:
            type: string
            description: The tags associated with this type
          uniqueItems: true
        type:
          type: string
          description: The fully-qualified class type
        typeDescription:
          type: string
          description: The description of the type.
        version:
          type: string
          description: The version of the bundle that provides the referenced type.
    ControllerServiceEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ControllerServiceDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        operatePermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        parentGroupId:
          type: string
          description: The id of parent process group of this ControllerService.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        status:
          $ref: "#/components/schemas/ControllerServiceStatusDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: controllerServiceEntity
    ControllerServiceReferencingComponentDTO:
      type: object
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The number of active threads for the referencing component.
        descriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptorDTO"
          description: The descriptors for the component properties.
        groupId:
          type: string
          description: "The group id for the component referencing a controller service.\
            \ If this component is another controller service or a reporting task,\
            \ this field is blank."
        id:
          type: string
          description: The id of the component referencing a controller service.
        name:
          type: string
          description: The name of the component referencing a controller service.
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties for the component.
          description: The properties for the component.
        referenceCycle:
          type: boolean
          description: "If the referencing component represents a controller service,\
            \ this indicates whether it has already been represented in this hierarchy."
        referenceType:
          type: string
          description: The type of reference this is.
          enum:
          - Processor
          - ControllerService
          - ReportingTask
          - FlowRegistryClient
        referencingComponents:
          type: array
          description: "If the referencing component represents a controller service,\
            \ these are the components that reference it."
          items:
            $ref: "#/components/schemas/ControllerServiceReferencingComponentEntity"
          uniqueItems: true
        state:
          type: string
          description: "The scheduled state of a processor or reporting task referencing\
            \ a controller service. If this component is another controller service,\
            \ this field represents the controller service state."
        type:
          type: string
          description: The type of the component referencing a controller service
            in simple Java class name format without package name.
        validationErrors:
          type: array
          description: The validation errors for the component.
          items:
            type: string
            description: The validation errors for the component.
    ControllerServiceReferencingComponentEntity:
      type: object
      description: All components referencing this controller service.
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ControllerServiceReferencingComponentDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        operatePermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: controllerServiceReferencingComponentEntity
    ControllerServiceReferencingComponentsEntity:
      type: object
      properties:
        controllerServiceReferencingComponents:
          type: array
          items:
            $ref: "#/components/schemas/ControllerServiceReferencingComponentEntity"
          uniqueItems: true
      xml:
        name: controllerServiceReferencingComponentsEntity
    ControllerServiceRunStatusEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        state:
          type: string
          description: The run status of the ControllerService.
          enum:
          - ENABLED
          - DISABLED
        uiOnly:
          type: boolean
          description: |
            Indicates whether or not responses should only include fields necessary for rendering the NiFi User Interface.
            As such, when this value is set to true, some fields may be returned as null values, and the selected fields may change at any time without notice.
            As a result, this value should not be set to true by any client other than the UI.
      xml:
        name: entity
    ControllerServiceStatusDTO:
      type: object
      description: The status for this ControllerService.
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The number of active threads for the component.
        runStatus:
          type: string
          description: The run status of this ControllerService
          enum:
          - ENABLED
          - ENABLING
          - DISABLED
          - DISABLING
          readOnly: true
        validationStatus:
          type: string
          description: "Indicates whether the component is valid, invalid, or still\
            \ in the process of validating (i.e., it is unknown whether or not the\
            \ component is valid)"
          enum:
          - VALID
          - INVALID
          - VALIDATING
          readOnly: true
      readOnly: true
    ControllerServiceTypesEntity:
      type: object
      properties:
        controllerServiceTypes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
      xml:
        name: controllerServiceTypesEntity
    ControllerServicesEntity:
      type: object
      properties:
        controllerServices:
          type: array
          items:
            $ref: "#/components/schemas/ControllerServiceEntity"
          uniqueItems: true
        currentTime:
          type: string
          description: The current time on the system.
      xml:
        name: controllerServicesEntity
    ControllerStatusDTO:
      type: object
      properties:
        activeRemotePortCount:
          type: integer
          format: int32
          description: The number of active remote ports in the NiFi.
        activeThreadCount:
          type: integer
          format: int32
          description: The number of active threads in the NiFi.
        bytesQueued:
          type: integer
          format: int64
          description: The size of the FlowFiles queued across the entire flow
        disabledCount:
          type: integer
          format: int32
          description: The number of disabled components in the NiFi.
        flowFilesQueued:
          type: integer
          format: int32
          description: The number of FlowFiles queued across the entire flow
        inactiveRemotePortCount:
          type: integer
          format: int32
          description: The number of inactive remote ports in the NiFi.
        invalidCount:
          type: integer
          format: int32
          description: The number of invalid components in the NiFi.
        locallyModifiedAndStaleCount:
          type: integer
          format: int32
          description: The number of locally modified and stale versioned process
            groups in the NiFi.
        locallyModifiedCount:
          type: integer
          format: int32
          description: The number of locally modified versioned process groups in
            the NiFi.
        queued:
          type: string
          description: The number of flowfiles queued in the NiFi.
        runningCount:
          type: integer
          format: int32
          description: The number of running components in the NiFi.
        staleCount:
          type: integer
          format: int32
          description: The number of stale versioned process groups in the NiFi.
        stoppedCount:
          type: integer
          format: int32
          description: The number of stopped components in the NiFi.
        syncFailureCount:
          type: integer
          format: int32
          description: The number of versioned process groups in the NiFi that are
            unable to sync to a registry.
        terminatedThreadCount:
          type: integer
          format: int32
          description: The number of terminated threads in the NiFi.
        upToDateCount:
          type: integer
          format: int32
          description: The number of up to date versioned process groups in the NiFi.
    ControllerStatusEntity:
      type: object
      properties:
        controllerStatus:
          $ref: "#/components/schemas/ControllerStatusDTO"
      xml:
        name: controllerStatusEntity
    CopyRequestEntity:
      type: object
      properties:
        connections:
          type: array
          description: The ids of the connections to be copied.
          items:
            type: string
            description: The ids of the connections to be copied.
          uniqueItems: true
        funnels:
          type: array
          description: The ids of the funnels to be copied.
          items:
            type: string
            description: The ids of the funnels to be copied.
          uniqueItems: true
        inputPorts:
          type: array
          description: The ids of the input ports to be copied.
          items:
            type: string
            description: The ids of the input ports to be copied.
          uniqueItems: true
        labels:
          type: array
          description: The ids of the labels to be copied.
          items:
            type: string
            description: The ids of the labels to be copied.
          uniqueItems: true
        outputPorts:
          type: array
          description: The ids of the output ports to be copied.
          items:
            type: string
            description: The ids of the output ports to be copied.
          uniqueItems: true
        processGroups:
          type: array
          description: The ids of the process groups to be copied.
          items:
            type: string
            description: The ids of the process groups to be copied.
          uniqueItems: true
        processors:
          type: array
          description: The ids of the processors to be copied.
          items:
            type: string
            description: The ids of the processors to be copied.
          uniqueItems: true
        remoteProcessGroups:
          type: array
          description: The ids of the remote process groups to be copied.
          items:
            type: string
            description: The ids of the remote process groups to be copied.
          uniqueItems: true
      xml:
        name: entity
    CopyResponseEntity:
      type: object
      description: The response from copying.
      properties:
        connections:
          type: array
          description: The connections being copied.
          items:
            $ref: "#/components/schemas/VersionedConnection"
          uniqueItems: true
        externalControllerServiceReferences:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ExternalControllerServiceReference"
          description: The external controller service references.
        funnels:
          type: array
          description: The funnels being copied.
          items:
            $ref: "#/components/schemas/VersionedFunnel"
          uniqueItems: true
        id:
          type: string
          description: The id for this copy action.
        inputPorts:
          type: array
          description: The input ports being copied.
          items:
            $ref: "#/components/schemas/VersionedPort"
          uniqueItems: true
        labels:
          type: array
          description: The labels being copied.
          items:
            $ref: "#/components/schemas/VersionedLabel"
          uniqueItems: true
        outputPorts:
          type: array
          description: The output ports being copied.
          items:
            $ref: "#/components/schemas/VersionedPort"
          uniqueItems: true
        parameterContexts:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/VersionedParameterContext"
          description: The referenced parameter contexts.
        parameterProviders:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ParameterProviderReference"
          description: The referenced parameter providers.
        processGroups:
          type: array
          description: The process groups being copied.
          items:
            $ref: "#/components/schemas/VersionedProcessGroup"
          uniqueItems: true
        processors:
          type: array
          description: The processors being copied.
          items:
            $ref: "#/components/schemas/VersionedProcessor"
          uniqueItems: true
        remoteProcessGroups:
          type: array
          description: The remote process groups being copied.
          items:
            $ref: "#/components/schemas/VersionedRemoteProcessGroup"
          uniqueItems: true
      xml:
        name: entity
    CopySnippetRequestEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        originX:
          type: number
          format: double
          description: The x coordinate of the origin of the bounding box where the
            new components will be placed.
        originY:
          type: number
          format: double
          description: The y coordinate of the origin of the bounding box where the
            new components will be placed.
        snippetId:
          type: string
          description: The identifier of the snippet.
      xml:
        name: copySnippetRequestEntity
    CounterDTO:
      type: object
      properties:
        context:
          type: string
          description: The context of the counter.
        id:
          type: string
          description: The id of the counter.
        name:
          type: string
          description: The name of the counter.
        value:
          type: string
          description: The value of the counter.
        valueCount:
          type: integer
          format: int64
          description: The value count.
    CounterEntity:
      type: object
      properties:
        counter:
          $ref: "#/components/schemas/CounterDTO"
      xml:
        name: counterEntity
    CountersDTO:
      type: object
      properties:
        aggregateSnapshot:
          $ref: "#/components/schemas/CountersSnapshotDTO"
        nodeSnapshots:
          type: array
          description: "A Counters snapshot for each node in the cluster. If the NiFi\
            \ instance is a standalone instance, rather than a cluster, this may be\
            \ null."
          items:
            $ref: "#/components/schemas/NodeCountersSnapshotDTO"
    CountersEntity:
      type: object
      properties:
        counters:
          $ref: "#/components/schemas/CountersDTO"
      xml:
        name: countersEntity
    CountersSnapshotDTO:
      type: object
      description: The counters from the node.
      properties:
        counters:
          type: array
          description: All counters in the NiFi.
          items:
            $ref: "#/components/schemas/CounterDTO"
        generated:
          type: string
          description: The timestamp when the report was generated.
    CreateActiveRequestEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        processGroupId:
          type: string
          description: The Process Group ID that this active request will update
      xml:
        name: createActiveRequestEntity
    CurrentUserEntity:
      type: object
      properties:
        anonymous:
          type: boolean
          description: Whether the current user is anonymous.
        canVersionFlows:
          type: boolean
          description: Whether the current user can version flows.
        componentRestrictionPermissions:
          type: array
          description: Permissions for specific component restrictions.
          items:
            $ref: "#/components/schemas/ComponentRestrictionPermissionDTO"
          uniqueItems: true
        controllerPermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        countersPermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        identity:
          type: string
          description: The user identity being serialized.
        logoutSupported:
          type: boolean
          description: Whether the system is configured to support logout operations
            based on current user authentication status
          readOnly: true
        parameterContextPermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        policiesPermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        provenancePermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        restrictedComponentsPermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        systemPermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        tenantsPermissions:
          $ref: "#/components/schemas/PermissionsDTO"
      xml:
        name: currentEntity
    DateTimeParameter:
      type: object
      properties:
        dateTime:
          type: string
          format: date-time
    DefinedType:
      type: object
      description: Indicates that this property is for selecting a controller service
        of the specified type
      properties:
        artifact:
          type: string
          description: The artifact name of the bundle that provides the referenced
            type.
        group:
          type: string
          description: The group name of the bundle that provides the referenced type.
        type:
          type: string
          description: The fully-qualified class type
        typeDescription:
          type: string
          description: The description of the type.
        version:
          type: string
          description: The version of the bundle that provides the referenced type.
    DifferenceDTO:
      type: object
      description: The differences in the component between the two flows
      properties:
        difference:
          type: string
          description: Description of the difference
        differenceType:
          type: string
          description: The type of difference
    DimensionsDTO:
      type: object
      properties:
        height:
          type: number
          format: double
          description: The height of the label in pixels when at a 1:1 scale.
        width:
          type: number
          format: double
          description: The width of the label in pixels when at a 1:1 scale.
    DocumentedTypeDTO:
      type: object
      properties:
        bundle:
          $ref: "#/components/schemas/BundleDTO"
        controllerServiceApis:
          type: array
          description: "If this type represents a ControllerService, this lists the\
            \ APIs it implements."
          items:
            $ref: "#/components/schemas/ControllerServiceApiDTO"
        deprecationReason:
          type: string
          description: The description of why the usage of this component is restricted.
        description:
          type: string
          description: The description of the type.
        explicitRestrictions:
          type: array
          description: "An optional collection of explicit restrictions. If specified,\
            \ these explicit restrictions will be enfored."
          items:
            $ref: "#/components/schemas/ExplicitRestrictionDTO"
          uniqueItems: true
        restricted:
          type: boolean
          description: Whether this type is restricted.
        tags:
          type: array
          description: The tags associated with this type.
          items:
            type: string
            description: The tags associated with this type.
          uniqueItems: true
        type:
          type: string
          description: The fully qualified name of the type.
        usageRestriction:
          type: string
          description: The optional description of why the usage of this component
            is restricted.
    DropRequestDTO:
      type: object
      properties:
        current:
          type: string
          description: The count and size of flow files currently queued.
        currentCount:
          type: integer
          format: int32
          description: The number of flow files currently queued.
        currentSize:
          type: integer
          format: int64
          description: The size of flow files currently queued in bytes.
        dropped:
          type: string
          description: The count and size of flow files that have been dropped thus
            far.
        droppedCount:
          type: integer
          format: int32
          description: The number of flow files that have been dropped thus far.
        droppedSize:
          type: integer
          format: int64
          description: The size of flow files that have been dropped thus far in bytes.
        failureReason:
          type: string
          description: "The reason, if any, that this drop request failed."
        finished:
          type: boolean
          description: Whether the query has finished.
        id:
          type: string
          description: The id for this drop request.
        lastUpdated:
          type: string
          description: The last time this drop request was updated.
        original:
          type: string
          description: The count and size of flow files to be dropped as a result
            of this request.
        originalCount:
          type: integer
          format: int32
          description: The number of flow files to be dropped as a result of this
            request.
        originalSize:
          type: integer
          format: int64
          description: The size of flow files to be dropped as a result of this request
            in bytes.
        percentCompleted:
          type: integer
          format: int32
          description: The current percent complete.
        state:
          type: string
          description: The current state of the drop request.
        submissionTime:
          type: string
          description: The timestamp when the query was submitted.
        uri:
          type: string
          description: The URI for future requests to this drop request.
    DropRequestEntity:
      type: object
      properties:
        dropRequest:
          $ref: "#/components/schemas/DropRequestDTO"
      xml:
        name: dropRequestEntity
    DynamicProperty:
      type: object
      description: Describes the dynamic properties supported by this component
      properties:
        description:
          type: string
          description: The description of the dynamic property
        expressionLanguageScope:
          type: string
          description: The scope of the expression language support
          enum:
          - NONE
          - ENVIRONMENT
          - FLOWFILE_ATTRIBUTES
        name:
          type: string
          description: The description of the dynamic property name
        value:
          type: string
          description: The description of the dynamic property value
    DynamicRelationship:
      type: object
      description: "If the processor supports dynamic relationships, this describes\
        \ the dynamic relationship"
      properties:
        description:
          type: string
          description: The description of the dynamic relationship
        name:
          type: string
          description: The description of the dynamic relationship name
    ExplicitRestrictionDTO:
      type: object
      description: "An optional collection of explicit restrictions. If specified,\
        \ these explicit restrictions will be enfored."
      properties:
        explanation:
          type: string
          description: The description of why the usage of this component is restricted
            for this required permission.
        requiredPermission:
          $ref: "#/components/schemas/RequiredPermissionDTO"
    ExternalControllerServiceReference:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the controller service
        name:
          type: string
          description: The name of the controller service
    FlowAnalysisResultEntity:
      type: object
      properties:
        flowAnalysisPending:
          type: boolean
        ruleViolations:
          type: array
          items:
            $ref: "#/components/schemas/FlowAnalysisRuleViolationDTO"
        rules:
          type: array
          items:
            $ref: "#/components/schemas/FlowAnalysisRuleDTO"
      xml:
        name: flowAnalysisResultEntity
    FlowAnalysisRuleDTO:
      type: object
      properties:
        bundle:
          $ref: "#/components/schemas/BundleDTO"
        comments:
          type: string
          description: The comments of the flow analysis rule.
        deprecated:
          type: boolean
          description: Whether the flow analysis rule has been deprecated.
        descriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptorDTO"
          description: The descriptors for the flow analysis rules properties.
        enforcementPolicy:
          type: string
          description: Enforcement Policy.
        extensionMissing:
          type: boolean
          description: Whether the underlying extension is missing.
        id:
          type: string
          description: The id of the component.
        multipleVersionsAvailable:
          type: boolean
          description: Whether the flow analysis rule has multiple versions available.
        name:
          type: string
          description: The name of the flow analysis rule.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        persistsState:
          type: boolean
          description: Whether the flow analysis rule persists state.
        position:
          $ref: "#/components/schemas/PositionDTO"
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties of the flow analysis rule.
          description: The properties of the flow analysis rule.
        restricted:
          type: boolean
          description: Whether the flow analysis rule requires elevated privileges.
        sensitiveDynamicPropertyNames:
          type: array
          description: Set of sensitive dynamic property names
          items:
            type: string
            description: Set of sensitive dynamic property names
          uniqueItems: true
        state:
          type: string
          description: The state of the flow analysis rule.
          enum:
          - ENABLED
          - DISABLED
        supportsSensitiveDynamicProperties:
          type: boolean
          description: Whether the flow analysis rule supports sensitive dynamic properties.
        type:
          type: string
          description: The fully qualified type of the flow analysis rule.
        validationErrors:
          type: array
          description: Gets the validation errors from the flow analysis rule. These
            validation errors represent the problems with the flow analysis rule that
            must be resolved before it can be scheduled to run.
          items:
            type: string
            description: Gets the validation errors from the flow analysis rule. These
              validation errors represent the problems with the flow analysis rule
              that must be resolved before it can be scheduled to run.
        validationStatus:
          type: string
          description: "Indicates whether the Flow Analysis Rule is valid, invalid,\
            \ or still in the process of validating (i.e., it is unknown whether or\
            \ not the Flow Analysis Rule is valid)"
          enum:
          - VALID
          - INVALID
          - VALIDATING
          readOnly: true
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    FlowAnalysisRuleDefinition:
      type: object
      description: Flow Analysis Rules provided in this bundle
      properties:
        additionalDetails:
          type: boolean
          description: Indicates if the component has additional details documentation
        artifact:
          type: string
          description: The artifact name of the bundle that provides the referenced
            type.
        buildInfo:
          $ref: "#/components/schemas/BuildInfo"
        deprecated:
          type: boolean
          description: Whether or not the component has been deprecated
        deprecationAlternatives:
          type: array
          description: "If this component has been deprecated, this optional field\
            \ provides alternatives to use"
          items:
            type: string
            description: "If this component has been deprecated, this optional field\
              \ provides alternatives to use"
          uniqueItems: true
        deprecationReason:
          type: string
          description: "If this component has been deprecated, this optional field\
            \ can be used to provide an explanation"
        dynamicProperties:
          type: array
          description: Describes the dynamic properties supported by this component
          items:
            $ref: "#/components/schemas/DynamicProperty"
        explicitRestrictions:
          type: array
          description: Explicit restrictions that indicate a require permission to
            use the component
          items:
            $ref: "#/components/schemas/Restriction"
          uniqueItems: true
        group:
          type: string
          description: The group name of the bundle that provides the referenced type.
        propertyDescriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptor"
          description: Descriptions of configuration properties applicable to this
            component.
        providedApiImplementations:
          type: array
          description: "If this type represents a provider for an interface, this\
            \ lists the APIs it implements"
          items:
            $ref: "#/components/schemas/DefinedType"
        restricted:
          type: boolean
          description: Whether or not the component has a general restriction
        restrictedExplanation:
          type: string
          description: An optional description of the general restriction
        seeAlso:
          type: array
          description: The names of other component types that may be related
          items:
            type: string
            description: The names of other component types that may be related
          uniqueItems: true
        stateful:
          $ref: "#/components/schemas/Stateful"
        supportsDynamicProperties:
          type: boolean
          description: Whether or not this component makes use of dynamic (user-set)
            properties.
        supportsSensitiveDynamicProperties:
          type: boolean
          description: Whether or not this component makes use of sensitive dynamic
            (user-set) properties.
        systemResourceConsiderations:
          type: array
          description: The system resource considerations for the given component
          items:
            $ref: "#/components/schemas/SystemResourceConsideration"
        tags:
          type: array
          description: The tags associated with this type
          items:
            type: string
            description: The tags associated with this type
          uniqueItems: true
        type:
          type: string
          description: The fully-qualified class type
        typeDescription:
          type: string
          description: The description of the type.
        version:
          type: string
          description: The version of the bundle that provides the referenced type.
    FlowAnalysisRuleEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/FlowAnalysisRuleDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        operatePermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        status:
          $ref: "#/components/schemas/FlowAnalysisRuleStatusDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: flowAnalysisRuleEntity
    FlowAnalysisRuleRunStatusEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        state:
          type: string
          description: The state of the FlowAnalysisRule.
          enum:
          - ENABLED
          - DISABLED
      xml:
        name: entity
    FlowAnalysisRuleStatusDTO:
      type: object
      description: The status for this FlowAnalysisRule.
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The number of active threads for the component.
        runStatus:
          type: string
          description: The run status of this FlowAnalysisRule
          enum:
          - ENABLED
          - DISABLED
          readOnly: true
        validationStatus:
          type: string
          description: "Indicates whether the component is valid, invalid, or still\
            \ in the process of validating (i.e., it is unknown whether or not the\
            \ component is valid)"
          enum:
          - VALID
          - INVALID
          - VALIDATING
          readOnly: true
      readOnly: true
    FlowAnalysisRuleTypesEntity:
      type: object
      properties:
        flowAnalysisRuleTypes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
      xml:
        name: flowAnalysisRuleTypesEntity
    FlowAnalysisRuleViolationDTO:
      type: object
      properties:
        enabled:
          type: boolean
        enforcementPolicy:
          type: string
        groupId:
          type: string
        issueId:
          type: string
        ruleId:
          type: string
        scope:
          type: string
        subjectComponentType:
          type: string
        subjectDisplayName:
          type: string
        subjectId:
          type: string
        subjectPermissionDto:
          $ref: "#/components/schemas/PermissionsDTO"
        violationMessage:
          type: string
    FlowAnalysisRulesEntity:
      type: object
      properties:
        currentTime:
          type: string
          description: The current time on the system.
        flowAnalysisRules:
          type: array
          items:
            $ref: "#/components/schemas/FlowAnalysisRuleEntity"
          uniqueItems: true
      xml:
        name: flowAnalysisRulesEntity
    FlowBreadcrumbDTO:
      type: object
      description: This breadcrumb.
      properties:
        id:
          type: string
          description: The id of the group.
        name:
          type: string
          description: The id of the group.
        versionControlInformation:
          $ref: "#/components/schemas/VersionControlInformationDTO"
    FlowBreadcrumbEntity:
      type: object
      description: The breadcrumb of the process group.
      properties:
        breadcrumb:
          $ref: "#/components/schemas/FlowBreadcrumbDTO"
        id:
          type: string
          description: The id of this ancestor ProcessGroup.
        parentBreadcrumb:
          $ref: "#/components/schemas/FlowBreadcrumbEntity"
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        versionedFlowState:
          type: string
          description: "The current state of the Process Group, as it relates to the\
            \ Versioned Flow"
          enum:
          - LOCALLY_MODIFIED
          - STALE
          - LOCALLY_MODIFIED_AND_STALE
          - UP_TO_DATE
          - SYNC_FAILURE
          readOnly: true
      xml:
        name: flowEntity
    FlowComparisonEntity:
      type: object
      properties:
        componentDifferences:
          type: array
          description: The list of differences for each component in the flow that
            is not the same between the two flows
          items:
            $ref: "#/components/schemas/ComponentDifferenceDTO"
          uniqueItems: true
      xml:
        name: flowComparisonEntity
    FlowConfigurationDTO:
      type: object
      description: The controller configuration.
      properties:
        currentTime:
          type: string
          description: The current time on the system.
        defaultBackPressureDataSizeThreshold:
          type: string
          description: The default back pressure data size threshold.
        defaultBackPressureObjectThreshold:
          type: integer
          format: int64
          description: The default back pressure object threshold.
        supportsConfigurableAuthorizer:
          type: boolean
          description: Whether this NiFi supports a configurable authorizer.
          readOnly: true
        supportsConfigurableUsersAndGroups:
          type: boolean
          description: Whether this NiFi supports configurable users and groups.
          readOnly: true
        supportsManagedAuthorizer:
          type: boolean
          description: "Whether this NiFi supports a managed authorizer. Managed authorizers\
            \ can visualize users, groups, and policies in the UI."
          readOnly: true
        timeOffset:
          type: integer
          format: int32
          description: The time offset of the system.
    FlowConfigurationEntity:
      type: object
      properties:
        flowConfiguration:
          $ref: "#/components/schemas/FlowConfigurationDTO"
      xml:
        name: flowConfigurationEntity
    FlowDTO:
      type: object
      description: Flow containing the components that were created as part of this
        paste action.
      properties:
        connections:
          type: array
          description: The connections in this flow.
          items:
            $ref: "#/components/schemas/ConnectionEntity"
          uniqueItems: true
        funnels:
          type: array
          description: The funnels in this flow.
          items:
            $ref: "#/components/schemas/FunnelEntity"
          uniqueItems: true
        inputPorts:
          type: array
          description: The input ports in this flow.
          items:
            $ref: "#/components/schemas/PortEntity"
          uniqueItems: true
        labels:
          type: array
          description: The labels in this flow.
          items:
            $ref: "#/components/schemas/LabelEntity"
          uniqueItems: true
        outputPorts:
          type: array
          description: The output ports in this flow.
          items:
            $ref: "#/components/schemas/PortEntity"
          uniqueItems: true
        processGroups:
          type: array
          description: The process groups in this flow.
          items:
            $ref: "#/components/schemas/ProcessGroupEntity"
          uniqueItems: true
        processors:
          type: array
          description: The processors in this flow.
          items:
            $ref: "#/components/schemas/ProcessorEntity"
          uniqueItems: true
        remoteProcessGroups:
          type: array
          description: The remote process groups in this flow.
          items:
            $ref: "#/components/schemas/RemoteProcessGroupEntity"
          uniqueItems: true
    FlowEntity:
      type: object
      properties:
        flow:
          $ref: "#/components/schemas/FlowDTO"
      xml:
        name: flowEntity
    FlowFileDTO:
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            type: string
            description: The FlowFile attributes.
          description: The FlowFile attributes.
        clusterNodeAddress:
          type: string
          description: The label for the node where this FlowFile resides.
        clusterNodeId:
          type: string
          description: The id of the node where this FlowFile resides.
        contentClaimContainer:
          type: string
          description: The container in which the content claim lives.
        contentClaimFileSize:
          type: string
          description: The file size of the content claim formatted.
        contentClaimFileSizeBytes:
          type: integer
          format: int64
          description: The file size of the content claim in bytes.
        contentClaimIdentifier:
          type: string
          description: The identifier of the content claim.
        contentClaimOffset:
          type: integer
          format: int64
          description: The offset into the content claim where the flowfile's content
            begins.
        contentClaimSection:
          type: string
          description: The section in which the content claim lives.
        filename:
          type: string
          description: The FlowFile filename.
        lineageDuration:
          type: integer
          format: int64
          description: Duration since the FlowFile's greatest ancestor entered the
            flow.
        mimeType:
          type: string
          description: The FlowFile mime type.
        penalized:
          type: boolean
          description: If the FlowFile is penalized.
        penaltyExpiresIn:
          type: integer
          format: int64
          description: How long in milliseconds until the FlowFile penalty expires.
        position:
          type: integer
          format: int32
          description: The FlowFile's position in the queue.
        queuedDuration:
          type: integer
          format: int64
          description: How long this FlowFile has been enqueued.
        size:
          type: integer
          format: int64
          description: The FlowFile file size.
        uri:
          type: string
          description: The URI that can be used to access this FlowFile.
        uuid:
          type: string
          description: The FlowFile UUID.
    FlowFileEntity:
      type: object
      properties:
        flowFile:
          $ref: "#/components/schemas/FlowFileDTO"
      xml:
        name: flowFileEntity
    FlowFileSummaryDTO:
      type: object
      description: The FlowFile summaries. The summaries will be populated once the
        request has completed.
      properties:
        clusterNodeAddress:
          type: string
          description: The label for the node where this FlowFile resides.
        clusterNodeId:
          type: string
          description: The id of the node where this FlowFile resides.
        filename:
          type: string
          description: The FlowFile filename.
        lineageDuration:
          type: integer
          format: int64
          description: Duration since the FlowFile's greatest ancestor entered the
            flow.
        mimeType:
          type: string
          description: The FlowFile mime type.
        penalized:
          type: boolean
          description: If the FlowFile is penalized.
        penaltyExpiresIn:
          type: integer
          format: int64
          description: How long in milliseconds until the FlowFile penalty expires.
        position:
          type: integer
          format: int32
          description: The FlowFile's position in the queue.
        queuedDuration:
          type: integer
          format: int64
          description: How long this FlowFile has been enqueued.
        size:
          type: integer
          format: int64
          description: The FlowFile file size.
        uri:
          type: string
          description: The URI that can be used to access this FlowFile.
        uuid:
          type: string
          description: The FlowFile UUID.
    FlowRegistryBranchDTO:
      type: object
      properties:
        name:
          type: string
          description: The branch name
    FlowRegistryBranchEntity:
      type: object
      properties:
        branch:
          $ref: "#/components/schemas/FlowRegistryBranchDTO"
      xml:
        name: branchEntity
    FlowRegistryBranchesEntity:
      type: object
      properties:
        branches:
          type: array
          items:
            $ref: "#/components/schemas/FlowRegistryBranchEntity"
          uniqueItems: true
      xml:
        name: branches
    FlowRegistryBucket:
      type: object
      properties:
        createdTimestamp:
          type: integer
          format: int64
        description:
          type: string
        identifier:
          type: string
        name:
          type: string
        permissions:
          $ref: "#/components/schemas/FlowRegistryPermissions"
    FlowRegistryBucketDTO:
      type: object
      properties:
        created:
          type: integer
          format: int64
          description: The created timestamp of this bucket
        description:
          type: string
          description: The bucket description
        id:
          type: string
          description: The bucket identifier
        name:
          type: string
          description: The bucket name
    FlowRegistryBucketEntity:
      type: object
      properties:
        bucket:
          $ref: "#/components/schemas/FlowRegistryBucketDTO"
        id:
          type: string
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
      xml:
        name: bucketEntity
    FlowRegistryBucketsEntity:
      type: object
      properties:
        buckets:
          type: array
          items:
            $ref: "#/components/schemas/FlowRegistryBucketEntity"
          uniqueItems: true
      xml:
        name: bucketsEntity
    FlowRegistryClientDTO:
      type: object
      properties:
        annotationData:
          type: string
          description: The annotation data for the registry client. This is how the
            custom UI relays configuration to the registry client.
        bundle:
          $ref: "#/components/schemas/BundleDTO"
        deprecated:
          type: boolean
          description: Whether the registry client has been deprecated.
        description:
          type: string
          description: The registry description
        descriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptorDTO"
          description: The descriptors for the registry client properties.
        extensionMissing:
          type: boolean
          description: Whether the underlying extension is missing.
        id:
          type: string
          description: The registry identifier
        multipleVersionsAvailable:
          type: boolean
          description: Whether the flow registry client has multiple versions available.
        name:
          type: string
          description: The registry name
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties of the registry client.
          description: The properties of the registry client.
        restricted:
          type: boolean
          description: Whether the registry client requires elevated privileges.
        sensitiveDynamicPropertyNames:
          type: array
          description: Set of sensitive dynamic property names
          items:
            type: string
            description: Set of sensitive dynamic property names
          uniqueItems: true
        supportsBranching:
          type: boolean
          description: Whether the registry client supports branching.
        supportsSensitiveDynamicProperties:
          type: boolean
          description: Whether the registry client supports sensitive dynamic properties.
        type:
          type: string
          description: The type of the registry client.
        validationErrors:
          type: array
          description: Gets the validation errors from the registry client. These
            validation errors represent the problems with the registry client that
            must be resolved before it can be used for interacting with the flow registry.
          items:
            type: string
            description: Gets the validation errors from the registry client. These
              validation errors represent the problems with the registry client that
              must be resolved before it can be used for interacting with the flow
              registry.
        validationStatus:
          type: string
          description: "Indicates whether the Registry Client is valid, invalid, or\
            \ still in the process of validating (i.e., it is unknown whether or not\
            \ the Registry Client is valid)"
          enum:
          - VALID
          - INVALID
          - VALIDATING
          readOnly: true
    FlowRegistryClientEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/FlowRegistryClientDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        operatePermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: registryClientEntity
    FlowRegistryClientTypesEntity:
      type: object
      properties:
        flowRegistryClientTypes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
      xml:
        name: flowRegistryClientTypesEntity
    FlowRegistryClientsEntity:
      type: object
      properties:
        currentTime:
          type: string
          description: The current time on the system.
        registries:
          type: array
          items:
            $ref: "#/components/schemas/FlowRegistryClientEntity"
          uniqueItems: true
      xml:
        name: registryClientsEntity
    FlowRegistryPermissions:
      type: object
      properties:
        canDelete:
          type: boolean
        canRead:
          type: boolean
        canWrite:
          type: boolean
    FlowSnippetDTO:
      type: object
      description: The contents of this process group.
      properties:
        connections:
          type: array
          description: The connections in this flow snippet.
          items:
            $ref: "#/components/schemas/ConnectionDTO"
          uniqueItems: true
        controllerServices:
          type: array
          description: The controller services in this flow snippet.
          items:
            $ref: "#/components/schemas/ControllerServiceDTO"
          uniqueItems: true
        funnels:
          type: array
          description: The funnels in this flow snippet.
          items:
            $ref: "#/components/schemas/FunnelDTO"
          uniqueItems: true
        inputPorts:
          type: array
          description: The input ports in this flow snippet.
          items:
            $ref: "#/components/schemas/PortDTO"
          uniqueItems: true
        labels:
          type: array
          description: The labels in this flow snippet.
          items:
            $ref: "#/components/schemas/LabelDTO"
          uniqueItems: true
        outputPorts:
          type: array
          description: The output ports in this flow snippet.
          items:
            $ref: "#/components/schemas/PortDTO"
          uniqueItems: true
        processGroups:
          type: array
          description: The process groups in this flow snippet.
          items:
            $ref: "#/components/schemas/ProcessGroupDTO"
          uniqueItems: true
        processors:
          type: array
          description: The processors in this flow snippet.
          items:
            $ref: "#/components/schemas/ProcessorDTO"
          uniqueItems: true
        remoteProcessGroups:
          type: array
          description: The remote process groups in this flow snippet.
          items:
            $ref: "#/components/schemas/RemoteProcessGroupDTO"
          uniqueItems: true
    FunnelDTO:
      type: object
      description: The funnels in this flow snippet.
      properties:
        id:
          type: string
          description: The id of the component.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    FunnelEntity:
      type: object
      description: The funnels in this flow.
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/FunnelDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: funnelEntity
    FunnelsEntity:
      type: object
      properties:
        funnels:
          type: array
          items:
            $ref: "#/components/schemas/FunnelEntity"
          uniqueItems: true
      xml:
        name: funnelsEntity
    GarbageCollectionDTO:
      type: object
      description: The garbage collection details.
      properties:
        collectionCount:
          type: integer
          format: int64
          description: The number of times garbage collection has run.
        collectionMillis:
          type: integer
          format: int64
          description: The total number of milliseconds spent garbage collecting.
        collectionTime:
          type: string
          description: The total amount of time spent garbage collecting.
        name:
          type: string
          description: The name of the garbage collector.
    HistoryDTO:
      type: object
      properties:
        actions:
          type: array
          description: The actions.
          items:
            $ref: "#/components/schemas/ActionEntity"
        lastRefreshed:
          type: string
          description: The timestamp when the report was generated.
        total:
          type: integer
          format: int32
          description: The number of number of actions that matched the search criteria..
    HistoryEntity:
      type: object
      properties:
        history:
          $ref: "#/components/schemas/HistoryDTO"
      xml:
        name: historyEntity
    InputPortsEntity:
      type: object
      properties:
        inputPorts:
          type: array
          items:
            $ref: "#/components/schemas/PortEntity"
          uniqueItems: true
      xml:
        name: inputPortsEntity
    IntegerParameter:
      type: object
      properties:
        integer:
          type: integer
          format: int32
    JmxMetricsResultDTO:
      type: object
      properties:
        attributeName:
          type: string
          description: The attribute name of the metrics bean's attribute.
        attributeValue:
          type: object
          description: The attribute value of the the metrics bean's attribute
        beanName:
          type: string
          description: The bean name of the metrics bean.
    JmxMetricsResultsEntity:
      type: object
      properties:
        jmxMetricsResults:
          type: array
          items:
            $ref: "#/components/schemas/JmxMetricsResultDTO"
      xml:
        name: jmxMetricsResult
    LabelDTO:
      type: object
      description: The labels in this flow snippet.
      properties:
        getzIndex:
          type: integer
          format: int64
          description: The z index of the label.
        height:
          type: number
          format: double
          description: The height of the label in pixels when at a 1:1 scale.
        id:
          type: string
          description: The id of the component.
        label:
          type: string
          description: The text that appears in the label.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        style:
          type: object
          additionalProperties:
            type: string
            description: "The styles for this label (font-size : 12px, background-color\
              \ : #eee, etc)."
          description: "The styles for this label (font-size : 12px, background-color\
            \ : #eee, etc)."
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
        width:
          type: number
          format: double
          description: The width of the label in pixels when at a 1:1 scale.
    LabelEntity:
      type: object
      description: The labels in this flow.
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/LabelDTO"
        dimensions:
          $ref: "#/components/schemas/DimensionsDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        getzIndex:
          type: integer
          format: int64
          description: The z index of the label.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: labelEntity
    LabelsEntity:
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: "#/components/schemas/LabelEntity"
          uniqueItems: true
      xml:
        name: labelsEntity
    LatestProvenanceEventsDTO:
      type: object
      properties:
        componentId:
          type: string
        provenanceEvents:
          type: array
          items:
            $ref: "#/components/schemas/ProvenanceEventDTO"
    LatestProvenanceEventsEntity:
      type: object
      properties:
        latestProvenanceEvents:
          $ref: "#/components/schemas/LatestProvenanceEventsDTO"
      xml:
        name: latestProvenanceEventsEntity
    LineageDTO:
      type: object
      properties:
        expiration:
          type: string
          description: When the lineage query will expire.
        finished:
          type: boolean
          description: Whether the lineage query has finished.
        id:
          type: string
          description: The id of this lineage query.
        percentCompleted:
          type: integer
          format: int32
          description: The percent complete for the lineage query.
        request:
          $ref: "#/components/schemas/LineageRequestDTO"
        results:
          $ref: "#/components/schemas/LineageResultsDTO"
        submissionTime:
          type: string
          description: When the lineage query was submitted.
        uri:
          type: string
          description: The URI for this lineage query for later retrieval and deletion.
    LineageEntity:
      type: object
      properties:
        lineage:
          $ref: "#/components/schemas/LineageDTO"
      xml:
        name: lineageEntity
    LineageRequestDTO:
      type: object
      description: The initial lineage result.
      properties:
        clusterNodeId:
          type: string
          description: The id of the node where this lineage originated if clustered.
        eventId:
          type: integer
          format: int64
          description: |
            The event id that was used to generate this lineage, if applicable.
            The event id is allowed for any type of lineageRequestType.
            If the lineageRequestType is FLOWFILE and the flowfile uuid is also included in the request, the event id will be ignored.
        lineageRequestType:
          type: string
          description: The type of lineage request. PARENTS will return the lineage
            for the flowfiles that are parents of the specified event. CHILDREN will
            return the lineage for the flowfiles that are children of the specified
            event. FLOWFILE will return the lineage for the specified flowfile.
          enum:
          - PARENTS
          - CHILDREN
          - FLOWFILE
          - PARENTS
          - CHILDREN
          - FLOWFILE
        uuid:
          type: string
          description: The flowfile uuid that was used to generate the lineage. The
            flowfile uuid is only allowed when the lineageRequestType is FLOWFILE
            and will take precedence over event id.
    LineageResultsDTO:
      type: object
      description: The results of the lineage query.
      properties:
        errors:
          type: array
          description: Any errors that occurred while generating the lineage.
          items:
            type: string
            description: Any errors that occurred while generating the lineage.
          uniqueItems: true
        links:
          type: array
          description: The links between the nodes in the lineage.
          items:
            $ref: "#/components/schemas/ProvenanceLinkDTO"
        nodes:
          type: array
          description: The nodes in the lineage.
          items:
            $ref: "#/components/schemas/ProvenanceNodeDTO"
    ListingRequestDTO:
      type: object
      properties:
        destinationRunning:
          type: boolean
          description: Whether the destination of the connection is running
        failureReason:
          type: string
          description: "The reason, if any, that this listing request failed."
        finished:
          type: boolean
          description: Whether the query has finished.
        flowFileSummaries:
          type: array
          description: The FlowFile summaries. The summaries will be populated once
            the request has completed.
          items:
            $ref: "#/components/schemas/FlowFileSummaryDTO"
        id:
          type: string
          description: The id for this listing request.
        lastUpdated:
          type: string
          description: The last time this listing request was updated.
        maxResults:
          type: integer
          format: int32
          description: The maximum number of FlowFileSummary objects to return
        percentCompleted:
          type: integer
          format: int32
          description: The current percent complete.
        queueSize:
          $ref: "#/components/schemas/QueueSizeDTO"
        sourceRunning:
          type: boolean
          description: Whether the source of the connection is running
        state:
          type: string
          description: The current state of the listing request.
        submissionTime:
          type: string
          description: The timestamp when the query was submitted.
        uri:
          type: string
          description: The URI for future requests to this listing request.
    ListingRequestEntity:
      type: object
      properties:
        listingRequest:
          $ref: "#/components/schemas/ListingRequestDTO"
      xml:
        name: listingRequestEntity
    LongParameter:
      type: object
      properties:
        long:
          type: integer
          format: int64
    MultiProcessorUseCase:
      type: object
      description: A list of use cases that have been documented that involve this
        Processor in conjunction with other Processors
      properties:
        configurations:
          type: array
          description: A description of how to configure the Processor to perform
            the task described in the use case
          items:
            $ref: "#/components/schemas/ProcessorConfiguration"
        description:
          type: string
          description: A description of the use case
        keywords:
          type: array
          description: Keywords that pertain to the use csae
          items:
            type: string
            description: Keywords that pertain to the use csae
        notes:
          type: string
          description: Any pertinent notes about the use case
    NarCoordinateDTO:
      type: object
      description: "The coordinate of another NAR that the this NAR is dependent on,\
        \ or null if not dependent on another NAR."
      properties:
        artifact:
          type: string
          description: The artifact id of the NAR.
        group:
          type: string
          description: The group of the NAR.
        version:
          type: string
          description: The version of the NAR.
    NarDetailsEntity:
      type: object
      properties:
        controllerServiceTypes:
          type: array
          description: The ControllerService types contained in the NAR
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
        dependentCoordinates:
          type: array
          description: The coordinates of NARs that depend on this NAR
          items:
            $ref: "#/components/schemas/NarCoordinateDTO"
          uniqueItems: true
        flowAnalysisRuleTypes:
          type: array
          description: The FlowAnalysisRule types contained in the NAR
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
        flowRegistryClientTypes:
          type: array
          description: The FlowRegistryClient types contained in the NAR
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
        narSummary:
          $ref: "#/components/schemas/NarSummaryDTO"
        parameterProviderTypes:
          type: array
          description: The ParameterProvider types contained in the NAR
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
        processorTypes:
          type: array
          description: The Processor types contained in the NAR
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
        reportingTaskTypes:
          type: array
          description: The ReportingTask types contained in the NAR
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
      xml:
        name: entity
    NarSummariesEntity:
      type: object
      properties:
        currentTime:
          type: string
          description: The current time on the system.
        narSummaries:
          type: array
          description: The NAR summaries
          items:
            $ref: "#/components/schemas/NarSummaryEntity"
      xml:
        name: entity
    NarSummaryDTO:
      type: object
      description: The NAR summary
      properties:
        buildTime:
          type: string
          description: The time the NAR was built according to it's MANIFEST
        coordinate:
          $ref: "#/components/schemas/NarCoordinateDTO"
        createdBy:
          type: string
          description: The plugin that created the NAR according to it's MANIFEST
        dependencyCoordinate:
          $ref: "#/components/schemas/NarCoordinateDTO"
        digest:
          type: string
          description: The hex digest of the NAR contents
        extensionCount:
          type: integer
          format: int32
          description: The number of extensions contained in this NAR
        failureMessage:
          type: string
          description: "Information about why the installation failed, only populated\
            \ when the state is failed"
        identifier:
          type: string
          description: The identifier of the NAR.
        installComplete:
          type: boolean
          description: Indicates if the install task has completed
        sourceIdentifier:
          type: string
          description: The identifier of the source of this NAR
        sourceType:
          type: string
          description: The source of this NAR
        state:
          type: string
          description: "The state of the NAR (i.e. Installed, or not)"
    NarSummaryEntity:
      type: object
      properties:
        narSummary:
          $ref: "#/components/schemas/NarSummaryDTO"
      xml:
        name: entity
    NodeConnectionStatisticsSnapshotDTO:
      type: object
      description: A list of status snapshots for each node
      properties:
        address:
          type: string
          description: The API address of the node
        apiPort:
          type: integer
          format: int32
          description: The API port used to communicate with the node
        nodeId:
          type: string
          description: The unique ID that identifies the node
        statisticsSnapshot:
          $ref: "#/components/schemas/ConnectionStatisticsSnapshotDTO"
    NodeConnectionStatusSnapshotDTO:
      type: object
      description: A list of status snapshots for each node
      properties:
        address:
          type: string
          description: The API address of the node
        apiPort:
          type: integer
          format: int32
          description: The API port used to communicate with the node
        nodeId:
          type: string
          description: The unique ID that identifies the node
        statusSnapshot:
          $ref: "#/components/schemas/ConnectionStatusSnapshotDTO"
    NodeCountersSnapshotDTO:
      type: object
      description: "A Counters snapshot for each node in the cluster. If the NiFi\
        \ instance is a standalone instance, rather than a cluster, this may be null."
      properties:
        address:
          type: string
          description: The API address of the node
        apiPort:
          type: integer
          format: int32
          description: The API port used to communicate with the node
        nodeId:
          type: string
          description: The unique ID that identifies the node
        snapshot:
          $ref: "#/components/schemas/CountersSnapshotDTO"
    NodeDTO:
      type: object
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The active threads for the NiFi on the node.
          readOnly: true
        address:
          type: string
          description: The node's host/ip address.
          readOnly: true
        apiPort:
          type: integer
          format: int32
          description: The port the node is listening for API requests.
          readOnly: true
        bytesQueued:
          type: integer
          format: int64
          description: The total size of all FlowFiles that are queued up on the node
          readOnly: true
        connectionRequested:
          type: string
          description: The time of the node's last connection request.
          readOnly: true
        events:
          type: array
          description: The node's events.
          items:
            $ref: "#/components/schemas/NodeEventDTO"
          readOnly: true
        flowFileBytes:
          type: integer
          format: int64
          writeOnly: true
        flowFilesQueued:
          type: integer
          format: int32
          description: The number of FlowFiles that are queued up on the node
          readOnly: true
        heartbeat:
          type: string
          description: the time of the nodes's last heartbeat.
          readOnly: true
        nodeId:
          type: string
          description: The id of the node.
          readOnly: true
        nodeStartTime:
          type: string
          description: The time at which this Node was last refreshed.
          readOnly: true
        queued:
          type: string
          description: The queue the NiFi on the node.
          readOnly: true
        roles:
          type: array
          description: The roles of this node.
          items:
            type: string
            description: The roles of this node.
            readOnly: true
          readOnly: true
          uniqueItems: true
        status:
          type: string
          description: The node's status.
    NodeEntity:
      type: object
      properties:
        node:
          $ref: "#/components/schemas/NodeDTO"
      xml:
        name: nodeEntity
    NodeEventDTO:
      type: object
      description: The node's events.
      properties:
        category:
          type: string
          description: The category of the node event.
        message:
          type: string
          description: The message in the node event.
        timestamp:
          type: string
          description: The timestamp of the node event.
      readOnly: true
    NodePortStatusSnapshotDTO:
      type: object
      description: "A status snapshot for each node in the cluster. If the NiFi instance\
        \ is a standalone instance, rather than a cluster, this may be null."
      properties:
        address:
          type: string
          description: The API address of the node
        apiPort:
          type: integer
          format: int32
          description: The API port used to communicate with the node
        nodeId:
          type: string
          description: The unique ID that identifies the node
        statusSnapshot:
          $ref: "#/components/schemas/PortStatusSnapshotDTO"
    NodeProcessGroupStatusSnapshotDTO:
      type: object
      description: "The status reported by each node in the cluster. If the NiFi instance\
        \ is a standalone instance, rather than a clustered instance, this value may\
        \ be null."
      properties:
        address:
          type: string
          description: The API address of the node
        apiPort:
          type: integer
          format: int32
          description: The API port used to communicate with the node
        nodeId:
          type: string
          description: The unique ID that identifies the node
        statusSnapshot:
          $ref: "#/components/schemas/ProcessGroupStatusSnapshotDTO"
    NodeProcessorStatusSnapshotDTO:
      type: object
      description: "A status snapshot for each node in the cluster. If the NiFi instance\
        \ is a standalone instance, rather than a cluster, this may be null."
      properties:
        address:
          type: string
          description: The API address of the node
        apiPort:
          type: integer
          format: int32
          description: The API port used to communicate with the node
        nodeId:
          type: string
          description: The unique ID that identifies the node
        statusSnapshot:
          $ref: "#/components/schemas/ProcessorStatusSnapshotDTO"
    NodeRemoteProcessGroupStatusSnapshotDTO:
      type: object
      description: "A status snapshot for each node in the cluster. If the NiFi instance\
        \ is a standalone instance, rather than a cluster, this may be null."
      properties:
        address:
          type: string
          description: The API address of the node
        apiPort:
          type: integer
          format: int32
          description: The API port used to communicate with the node
        nodeId:
          type: string
          description: The unique ID that identifies the node
        statusSnapshot:
          $ref: "#/components/schemas/RemoteProcessGroupStatusSnapshotDTO"
    NodeReplayLastEventSnapshotDTO:
      type: object
      description: The node-wise results
      properties:
        address:
          type: string
          description: The API address of the node
        apiPort:
          type: integer
          format: int32
          description: The API port used to communicate with the node
        nodeId:
          type: string
          description: The unique ID that identifies the node
        snapshot:
          $ref: "#/components/schemas/ReplayLastEventSnapshotDTO"
      xml:
        name: nodeReplayLastEventSnapshot
    NodeSearchResultDTO:
      type: object
      properties:
        address:
          type: string
          description: The address of the node that matched the search.
        id:
          type: string
          description: The id of the node that matched the search.
    NodeStatusSnapshotsDTO:
      type: object
      description: "The NodeStatusSnapshotsDTO objects that provide the actual metric\
        \ values for the component, for each node. If the NiFi instance is not clustered,\
        \ this value will be null."
      properties:
        address:
          type: string
          description: The node's host/ip address.
        apiPort:
          type: integer
          format: int32
          description: The port the node is listening for API requests.
        nodeId:
          type: string
          description: The id of the node.
        statusSnapshots:
          type: array
          description: A list of StatusSnapshotDTO objects that provide the actual
            metric values for the component for this node.
          items:
            $ref: "#/components/schemas/StatusSnapshotDTO"
    NodeSystemDiagnosticsSnapshotDTO:
      type: object
      description: "A systems diagnostics snapshot for each node in the cluster. If\
        \ the NiFi instance is a standalone instance, rather than a cluster, this\
        \ may be null."
      properties:
        address:
          type: string
          description: The API address of the node
        apiPort:
          type: integer
          format: int32
          description: The API port used to communicate with the node
        nodeId:
          type: string
          description: The unique ID that identifies the node
        snapshot:
          $ref: "#/components/schemas/SystemDiagnosticsSnapshotDTO"
    OutputPortsEntity:
      type: object
      properties:
        outputPorts:
          type: array
          items:
            $ref: "#/components/schemas/PortEntity"
          uniqueItems: true
      xml:
        name: outputPortsEntity
    ParameterContextDTO:
      type: object
      description: The Parameter Context that is being operated on. This may not be
        populated until the request has successfully completed.
      properties:
        boundProcessGroups:
          type: array
          description: The Process Groups that are bound to this Parameter Context
          items:
            $ref: "#/components/schemas/ProcessGroupEntity"
          readOnly: true
          uniqueItems: true
        description:
          type: string
          description: The Description of the Parameter Context.
        id:
          type: string
          description: The ID the Parameter Context.
          readOnly: true
        inheritedParameterContexts:
          type: array
          description: A list of references of Parameter Contexts from which this
            one inherits parameters
          items:
            $ref: "#/components/schemas/ParameterContextReferenceEntity"
        name:
          type: string
          description: The Name of the Parameter Context.
        parameterProviderConfiguration:
          $ref: "#/components/schemas/ParameterProviderConfigurationEntity"
        parameters:
          type: array
          description: The Parameters for the Parameter Context
          items:
            $ref: "#/components/schemas/ParameterEntity"
          uniqueItems: true
      readOnly: true
    ParameterContextEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ParameterContextDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: parameterContextEntity
    ParameterContextReferenceDTO:
      type: object
      properties:
        id:
          type: string
          description: The ID of the Parameter Context
        name:
          type: string
          description: The name of the Parameter Context
    ParameterContextReferenceEntity:
      type: object
      description: "The Parameter Context, or null if no Parameter Context has been\
        \ bound to the Process Group"
      properties:
        component:
          $ref: "#/components/schemas/ParameterContextReferenceDTO"
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
      xml:
        name: parameterContextReferenceEntity
    ParameterContextUpdateEntity:
      type: object
      description: The Parameter Contexts updated by this Parameter Provider. This
        may not be populated until the request has successfully completed.
      properties:
        parameterContext:
          $ref: "#/components/schemas/ParameterContextDTO"
        parameterContextRevision:
          $ref: "#/components/schemas/RevisionDTO"
        referencingComponents:
          type: array
          description: The components that are referenced by the update.
          items:
            $ref: "#/components/schemas/AffectedComponentEntity"
          readOnly: true
          uniqueItems: true
      readOnly: true
      xml:
        name: parameterContextUpdateEntity
    ParameterContextUpdateRequestDTO:
      type: object
      description: The Update Request
      properties:
        complete:
          type: boolean
          description: Whether or not the request is completed
          readOnly: true
        failureReason:
          type: string
          description: "The reason for the request failing, or null if the request\
            \ has not failed"
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          description: The timestamp of when the request was last updated
          readOnly: true
        parameterContext:
          $ref: "#/components/schemas/ParameterContextDTO"
        percentCompleted:
          type: integer
          format: int32
          description: A value between 0 and 100 (inclusive) indicating how close
            the request is to completion
          readOnly: true
        referencingComponents:
          type: array
          description: The components that are referenced by the update.
          items:
            $ref: "#/components/schemas/AffectedComponentEntity"
          readOnly: true
          uniqueItems: true
        requestId:
          type: string
          description: The ID of the request
          readOnly: true
        state:
          type: string
          description: A description of the current state of the request
          readOnly: true
        submissionTime:
          type: string
          format: date-time
          description: The timestamp of when the request was submitted
          readOnly: true
        updateSteps:
          type: array
          description: "The steps that are required in order to complete the request,\
            \ along with the status of each"
          items:
            $ref: "#/components/schemas/ParameterContextUpdateStepDTO"
          readOnly: true
        uri:
          type: string
          description: The URI for the request
          readOnly: true
    ParameterContextUpdateRequestEntity:
      type: object
      properties:
        parameterContextRevision:
          $ref: "#/components/schemas/RevisionDTO"
        request:
          $ref: "#/components/schemas/ParameterContextUpdateRequestDTO"
      xml:
        name: parameterContextUpdateRequestEntity
    ParameterContextUpdateStepDTO:
      type: object
      description: "The steps that are required in order to complete the request,\
        \ along with the status of each"
      properties:
        complete:
          type: boolean
          description: Whether or not this step has completed
          readOnly: true
        description:
          type: string
          description: Explanation of what happens in this step
          readOnly: true
        failureReason:
          type: string
          description: "An explanation of why this step failed, or null if this step\
            \ did not fail"
          readOnly: true
      readOnly: true
    ParameterContextValidationRequestDTO:
      type: object
      description: The Update Request
      properties:
        complete:
          type: boolean
          description: Whether or not the request is completed
          readOnly: true
        componentValidationResults:
          $ref: "#/components/schemas/ComponentValidationResultsEntity"
        failureReason:
          type: string
          description: "The reason for the request failing, or null if the request\
            \ has not failed"
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          description: The timestamp of when the request was last updated
          readOnly: true
        parameterContext:
          $ref: "#/components/schemas/ParameterContextDTO"
        percentCompleted:
          type: integer
          format: int32
          description: A value between 0 and 100 (inclusive) indicating how close
            the request is to completion
          readOnly: true
        requestId:
          type: string
          description: The ID of the request
          readOnly: true
        state:
          type: string
          description: A description of the current state of the request
          readOnly: true
        submissionTime:
          type: string
          format: date-time
          description: The timestamp of when the request was submitted
          readOnly: true
        updateSteps:
          type: array
          description: "The steps that are required in order to complete the request,\
            \ along with the status of each"
          items:
            $ref: "#/components/schemas/ParameterContextValidationStepDTO"
          readOnly: true
        uri:
          type: string
          description: The URI for the request
          readOnly: true
    ParameterContextValidationRequestEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        request:
          $ref: "#/components/schemas/ParameterContextValidationRequestDTO"
      xml:
        name: parameterContextValidationRequestEntity
    ParameterContextValidationStepDTO:
      type: object
      description: "The steps that are required in order to complete the request,\
        \ along with the status of each"
      properties:
        complete:
          type: boolean
          description: Whether or not this step has completed
          readOnly: true
        description:
          type: string
          description: Explanation of what happens in this step
          readOnly: true
        failureReason:
          type: string
          description: "An explanation of why this step failed, or null if this step\
            \ did not fail"
          readOnly: true
      readOnly: true
    ParameterContextsEntity:
      type: object
      properties:
        currentTime:
          type: string
          description: The current time on the system.
          readOnly: true
        parameterContexts:
          type: array
          description: The Parameter Contexts
          items:
            $ref: "#/components/schemas/ParameterContextEntity"
          uniqueItems: true
      xml:
        name: parameterContexts
    ParameterDTO:
      type: object
      description: The parameter information
      properties:
        description:
          type: string
          description: The description of the Parameter
        inherited:
          type: boolean
          description: Whether or not the Parameter is inherited from another context
          readOnly: true
        name:
          type: string
          description: The name of the Parameter
        parameterContext:
          $ref: "#/components/schemas/ParameterContextReferenceEntity"
        provided:
          type: boolean
          description: Whether or not the Parameter is provided by a ParameterProvider
        referencedAssets:
          type: array
          description: A list of identifiers of the assets that are referenced by
            the parameter
          items:
            $ref: "#/components/schemas/AssetReferenceDTO"
        referencingComponents:
          type: array
          description: The set of all components in the flow that are referencing
            this Parameter
          items:
            $ref: "#/components/schemas/AffectedComponentEntity"
          uniqueItems: true
        sensitive:
          type: boolean
          description: Whether or not the Parameter is sensitive
        value:
          type: string
          description: The value of the Parameter
        valueRemoved:
          type: boolean
          description: |
            Whether or not the value of the Parameter was removed.
            When a request is made to change a parameter, the value may be null.
            The absence of the value may be used either to indicate that the value is not to be changed, or that the value is to be set to null (i.e., removed).
            This denotes which of the two scenarios is being encountered.
    ParameterEntity:
      type: object
      description: The name of the Parameter
      properties:
        canWrite:
          type: boolean
          description: Indicates whether the user can write a given resource.
          readOnly: true
        parameter:
          $ref: "#/components/schemas/ParameterDTO"
      xml:
        name: parameterEntity
    ParameterGroupConfigurationEntity:
      type: object
      description: Configuration for any fetched parameter groups.
      properties:
        groupName:
          type: string
          description: The name of the external parameter group to which the provided
            parameter names apply.
        parameterContextName:
          type: string
          description: The name of the ParameterContext that receives the parameters
            in this group
        parameterSensitivities:
          type: object
          additionalProperties:
            type: string
            description: All fetched parameter names that should be applied.
            enum:
            - SENSITIVE
            - NON_SENSITIVE
          description: All fetched parameter names that should be applied.
        synchronized:
          type: boolean
          description: "True if this group should be synchronized to a ParameterContext,\
            \ including creating one if it does not exist."
      xml:
        name: entity
    ParameterProviderApplyParametersRequestDTO:
      type: object
      description: The Apply Parameters Request
      properties:
        complete:
          type: boolean
          description: Whether or not the request is completed
          readOnly: true
        failureReason:
          type: string
          description: "The reason for the request failing, or null if the request\
            \ has not failed"
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          description: The timestamp of when the request was last updated
          readOnly: true
        parameterContextUpdates:
          type: array
          description: The Parameter Contexts updated by this Parameter Provider.
            This may not be populated until the request has successfully completed.
          items:
            $ref: "#/components/schemas/ParameterContextUpdateEntity"
          readOnly: true
        parameterProvider:
          $ref: "#/components/schemas/ParameterProviderDTO"
        percentCompleted:
          type: integer
          format: int32
          description: A value between 0 and 100 (inclusive) indicating how close
            the request is to completion
          readOnly: true
        referencingComponents:
          type: array
          description: The components that are referenced by the update.
          items:
            $ref: "#/components/schemas/AffectedComponentEntity"
          readOnly: true
          uniqueItems: true
        requestId:
          type: string
          description: The ID of the request
          readOnly: true
        state:
          type: string
          description: A description of the current state of the request
          readOnly: true
        submissionTime:
          type: string
          format: date-time
          description: The timestamp of when the request was submitted
          readOnly: true
        updateSteps:
          type: array
          description: "The steps that are required in order to complete the request,\
            \ along with the status of each"
          items:
            $ref: "#/components/schemas/ParameterProviderApplyParametersUpdateStepDTO"
          readOnly: true
        uri:
          type: string
          description: The URI for the request
          readOnly: true
    ParameterProviderApplyParametersRequestEntity:
      type: object
      properties:
        request:
          $ref: "#/components/schemas/ParameterProviderApplyParametersRequestDTO"
      xml:
        name: parameterProviderApplyParametersRequestEntity
    ParameterProviderApplyParametersUpdateStepDTO:
      type: object
      description: "The steps that are required in order to complete the request,\
        \ along with the status of each"
      properties:
        complete:
          type: boolean
          description: Whether or not this step has completed
          readOnly: true
        description:
          type: string
          description: Explanation of what happens in this step
          readOnly: true
        failureReason:
          type: string
          description: "An explanation of why this step failed, or null if this step\
            \ did not fail"
          readOnly: true
      readOnly: true
    ParameterProviderConfigurationDTO:
      type: object
      properties:
        parameterGroupName:
          type: string
          description: The Parameter Group name that maps to the Parameter Context
        parameterProviderId:
          type: string
          description: The ID of the Parameter Provider
        parameterProviderName:
          type: string
          description: The name of the Parameter Provider
        synchronized:
          type: boolean
          description: True if the Parameter Context should receive the parameters
            from the mapped Parameter Group
    ParameterProviderConfigurationEntity:
      type: object
      description: Optional configuration for a Parameter Provider
      properties:
        component:
          $ref: "#/components/schemas/ParameterProviderConfigurationDTO"
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
      xml:
        name: parameterProviderConfigurationEntity
    ParameterProviderDTO:
      type: object
      properties:
        affectedComponents:
          type: array
          description: The set of all components in the flow that are referencing
            Parameters provided by this provider
          items:
            $ref: "#/components/schemas/AffectedComponentEntity"
          uniqueItems: true
        annotationData:
          type: string
          description: The annotation data for the parameter provider. This is how
            the custom UI relays configuration to the parameter provider.
        bundle:
          $ref: "#/components/schemas/BundleDTO"
        comments:
          type: string
          description: The comments of the parameter provider.
        customUiUrl:
          type: string
          description: The URL for the custom configuration UI for the parameter provider.
        deprecated:
          type: boolean
          description: Whether the parameter provider has been deprecated.
        descriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptorDTO"
          description: The descriptors for the parameter providers properties.
        extensionMissing:
          type: boolean
          description: Whether the underlying extension is missing.
        id:
          type: string
          description: The id of the component.
        multipleVersionsAvailable:
          type: boolean
          description: Whether the parameter provider has multiple versions available.
        name:
          type: string
          description: The name of the parameter provider.
        parameterGroupConfigurations:
          type: array
          description: Configuration for any fetched parameter groups.
          items:
            $ref: "#/components/schemas/ParameterGroupConfigurationEntity"
        parameterStatus:
          type: array
          description: The status of all provided parameters for this parameter provider
          items:
            $ref: "#/components/schemas/ParameterStatusDTO"
          uniqueItems: true
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        persistsState:
          type: boolean
          description: Whether the parameter provider persists state.
        position:
          $ref: "#/components/schemas/PositionDTO"
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties of the parameter provider.
          description: The properties of the parameter provider.
        referencingParameterContexts:
          type: array
          description: The Parameter Contexts that reference this Parameter Provider
          items:
            $ref: "#/components/schemas/ParameterProviderReferencingComponentEntity"
          readOnly: true
          uniqueItems: true
        restricted:
          type: boolean
          description: Whether the parameter provider requires elevated privileges.
        type:
          type: string
          description: The fully qualified type of the parameter provider.
        validationErrors:
          type: array
          description: Gets the validation errors from the parameter provider. These
            validation errors represent the problems with the parameter provider that
            must be resolved before it can be scheduled to run.
          items:
            type: string
            description: Gets the validation errors from the parameter provider. These
              validation errors represent the problems with the parameter provider
              that must be resolved before it can be scheduled to run.
        validationStatus:
          type: string
          description: "Indicates whether the Parameter Provider is valid, invalid,\
            \ or still in the process of validating (i.e., it is unknown whether or\
            \ not the Parameter Provider is valid)"
          enum:
          - VALID
          - INVALID
          - VALIDATING
          readOnly: true
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    ParameterProviderDefinition:
      type: object
      description: Parameter Providers provided in this bundle
      properties:
        additionalDetails:
          type: boolean
          description: Indicates if the component has additional details documentation
        artifact:
          type: string
          description: The artifact name of the bundle that provides the referenced
            type.
        buildInfo:
          $ref: "#/components/schemas/BuildInfo"
        deprecated:
          type: boolean
          description: Whether or not the component has been deprecated
        deprecationAlternatives:
          type: array
          description: "If this component has been deprecated, this optional field\
            \ provides alternatives to use"
          items:
            type: string
            description: "If this component has been deprecated, this optional field\
              \ provides alternatives to use"
          uniqueItems: true
        deprecationReason:
          type: string
          description: "If this component has been deprecated, this optional field\
            \ can be used to provide an explanation"
        dynamicProperties:
          type: array
          description: Describes the dynamic properties supported by this component
          items:
            $ref: "#/components/schemas/DynamicProperty"
        explicitRestrictions:
          type: array
          description: Explicit restrictions that indicate a require permission to
            use the component
          items:
            $ref: "#/components/schemas/Restriction"
          uniqueItems: true
        group:
          type: string
          description: The group name of the bundle that provides the referenced type.
        propertyDescriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptor"
          description: Descriptions of configuration properties applicable to this
            component.
        providedApiImplementations:
          type: array
          description: "If this type represents a provider for an interface, this\
            \ lists the APIs it implements"
          items:
            $ref: "#/components/schemas/DefinedType"
        restricted:
          type: boolean
          description: Whether or not the component has a general restriction
        restrictedExplanation:
          type: string
          description: An optional description of the general restriction
        seeAlso:
          type: array
          description: The names of other component types that may be related
          items:
            type: string
            description: The names of other component types that may be related
          uniqueItems: true
        stateful:
          $ref: "#/components/schemas/Stateful"
        supportsDynamicProperties:
          type: boolean
          description: Whether or not this component makes use of dynamic (user-set)
            properties.
        supportsSensitiveDynamicProperties:
          type: boolean
          description: Whether or not this component makes use of sensitive dynamic
            (user-set) properties.
        systemResourceConsiderations:
          type: array
          description: The system resource considerations for the given component
          items:
            $ref: "#/components/schemas/SystemResourceConsideration"
        tags:
          type: array
          description: The tags associated with this type
          items:
            type: string
            description: The tags associated with this type
          uniqueItems: true
        type:
          type: string
          description: The fully-qualified class type
        typeDescription:
          type: string
          description: The description of the type.
        version:
          type: string
          description: The version of the bundle that provides the referenced type.
    ParameterProviderEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ParameterProviderDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: parameterProviderEntity
    ParameterProviderParameterApplicationEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the parameter provider.
        parameterGroupConfigurations:
          type: array
          description: Configuration for the fetched Parameter Groups
          items:
            $ref: "#/components/schemas/ParameterGroupConfigurationEntity"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
      xml:
        name: entity
    ParameterProviderParameterFetchEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the parameter provider.
        revision:
          $ref: "#/components/schemas/RevisionDTO"
      xml:
        name: entity
    ParameterProviderReference:
      type: object
      properties:
        bundle:
          $ref: "#/components/schemas/Bundle"
        identifier:
          type: string
          description: The identifier of the parameter provider
        name:
          type: string
          description: The name of the parameter provider
        type:
          type: string
          description: The fully qualified name of the parameter provider class.
    ParameterProviderReferencingComponentDTO:
      type: object
      properties:
        id:
          type: string
          description: The id of the component referencing a parameter provider.
        name:
          type: string
          description: The name of the component referencing a parameter provider.
    ParameterProviderReferencingComponentEntity:
      type: object
      description: The Parameter Contexts that reference this Parameter Provider
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ParameterProviderReferencingComponentDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      readOnly: true
      xml:
        name: parameterProviderReferencingComponentEntity
    ParameterProviderReferencingComponentsEntity:
      type: object
      properties:
        parameterProviderReferencingComponents:
          type: array
          items:
            $ref: "#/components/schemas/ParameterProviderReferencingComponentEntity"
          uniqueItems: true
      xml:
        name: parameterProviderReferencingComponentsEntity
    ParameterProviderTypesEntity:
      type: object
      properties:
        parameterProviderTypes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
      xml:
        name: parameterProviderTypesEntity
    ParameterProvidersEntity:
      type: object
      properties:
        currentTime:
          type: string
          description: The current time on the system.
        parameterProviders:
          type: array
          items:
            $ref: "#/components/schemas/ParameterProviderEntity"
          uniqueItems: true
      xml:
        name: parameterProvidersEntity
    ParameterStatusDTO:
      type: object
      description: The status of all provided parameters for this parameter provider
      properties:
        parameter:
          $ref: "#/components/schemas/ParameterEntity"
        status:
          type: string
          description: "Indicates the status of the parameter, compared to the existing\
            \ parameter context"
          enum:
          - NEW
          - CHANGED
          - REMOVED
          - MISSING_BUT_REFERENCED
          - UNCHANGED
    PasteRequestEntity:
      type: object
      properties:
        copyResponse:
          $ref: "#/components/schemas/CopyResponseEntity"
        disconnectedNodeAcknowledged:
          type: boolean
        revision:
          $ref: "#/components/schemas/RevisionDTO"
      xml:
        name: entity
    PasteResponseEntity:
      type: object
      properties:
        flow:
          $ref: "#/components/schemas/FlowDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
      xml:
        name: entity
    PeerDTO:
      type: object
      properties:
        flowFileCount:
          type: integer
          format: int32
          description: The number of flowFiles this peer holds.
        hostname:
          type: string
          description: The hostname of this peer.
        port:
          type: integer
          format: int32
          description: The port number of this peer.
        secure:
          type: boolean
          description: Returns if this peer connection is secure.
    PeersEntity:
      type: object
      properties:
        peers:
          type: array
          items:
            $ref: "#/components/schemas/PeerDTO"
      xml:
        name: peersEntity
    PermissionsDTO:
      type: object
      description: The permissions for this component.
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        canWrite:
          type: boolean
          description: Indicates whether the user can write a given resource.
          readOnly: true
    PortDTO:
      type: object
      description: The output ports available to received data from the NiFi.
      properties:
        allowRemoteAccess:
          type: boolean
          description: Whether this port can be accessed remotely via Site-to-Site
            protocol.
        comments:
          type: string
          description: The comments for the port.
        concurrentlySchedulableTaskCount:
          type: integer
          format: int32
          description: The number of tasks that should be concurrently scheduled for
            the port.
        id:
          type: string
          description: The id of the component.
        name:
          type: string
          description: The name of the port.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        portFunction:
          type: string
          description: Specifies how the Port functions
          enum:
          - STANDARD
          - FAILURE
        position:
          $ref: "#/components/schemas/PositionDTO"
        state:
          type: string
          description: The state of the port.
          enum:
          - RUNNING
          - STOPPED
          - DISABLED
        transmitting:
          type: boolean
          description: Whether the port has incoming or output connections to a remote
            NiFi. This is only applicable when the port is allowed to be accessed
            remotely.
        type:
          type: string
          description: The type of port.
          enum:
          - INPUT_PORT
          - OUTPUT_PORT
        validationErrors:
          type: array
          description: Gets the validation errors from this port. These validation
            errors represent the problems with the port that must be resolved before
            it can be started.
          items:
            type: string
            description: Gets the validation errors from this port. These validation
              errors represent the problems with the port that must be resolved before
              it can be started.
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    PortEntity:
      type: object
      description: The output ports in this flow.
      properties:
        allowRemoteAccess:
          type: boolean
          description: Whether this port can be accessed remotely via Site-to-Site
            protocol.
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/PortDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        operatePermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        portType:
          type: string
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        status:
          $ref: "#/components/schemas/PortStatusDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: portEntity
    PortRunStatusEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        state:
          type: string
          description: The run status of the Port.
          enum:
          - RUNNING
          - STOPPED
          - DISABLED
      xml:
        name: entity
    PortStatusDTO:
      type: object
      description: The status of the port.
      properties:
        aggregateSnapshot:
          $ref: "#/components/schemas/PortStatusSnapshotDTO"
        groupId:
          type: string
          description: The id of the parent process group of the port.
        id:
          type: string
          description: The id of the port.
        name:
          type: string
          description: The name of the port.
        nodeSnapshots:
          type: array
          description: "A status snapshot for each node in the cluster. If the NiFi\
            \ instance is a standalone instance, rather than a cluster, this may be\
            \ null."
          items:
            $ref: "#/components/schemas/NodePortStatusSnapshotDTO"
        runStatus:
          type: string
          description: The run status of the port.
          enum:
          - Running
          - Stopped
          - Validating
          - Disabled
          - Invalid
        statsLastRefreshed:
          type: string
          description: The time the status for the process group was last refreshed.
        transmitting:
          type: boolean
          description: Whether the port has incoming or outgoing connections to a
            remote NiFi.
    PortStatusEntity:
      type: object
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        portStatus:
          $ref: "#/components/schemas/PortStatusDTO"
      xml:
        name: portStatusEntity
    PortStatusSnapshotDTO:
      type: object
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The active thread count for the port.
        bytesIn:
          type: integer
          format: int64
          description: The size of hte FlowFiles that have been accepted in the last
            5 minutes.
        bytesOut:
          type: integer
          format: int64
          description: The number of bytes that have been processed in the last 5
            minutes.
        flowFilesIn:
          type: integer
          format: int32
          description: The number of FlowFiles that have been accepted in the last
            5 minutes.
        flowFilesOut:
          type: integer
          format: int32
          description: The number of FlowFiles that have been processed in the last
            5 minutes.
        groupId:
          type: string
          description: The id of the parent process group of the port.
        id:
          type: string
          description: The id of the port.
        input:
          type: string
          description: The count/size of flowfiles that have been accepted in the
            last 5 minutes.
        name:
          type: string
          description: The name of the port.
        output:
          type: string
          description: The count/size of flowfiles that have been processed in the
            last 5 minutes.
        runStatus:
          type: string
          description: The run status of the port.
          enum:
          - Running
          - Stopped
          - Validating
          - Disabled
          - Invalid
        transmitting:
          type: boolean
          description: Whether the port has incoming or outgoing connections to a
            remote NiFi.
    PortStatusSnapshotEntity:
      type: object
      description: The status of all output ports in the process group.
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        id:
          type: string
          description: The id of the port.
        portStatusSnapshot:
          $ref: "#/components/schemas/PortStatusSnapshotDTO"
      xml:
        name: entity
    Position:
      type: object
      description: The position of a component on the graph
      properties:
        x:
          type: number
          format: double
          description: The x coordinate.
        "y":
          type: number
          format: double
          description: The y coordinate.
    PositionDTO:
      type: object
      description: The position of this component in the UI if applicable.
      properties:
        x:
          type: number
          format: double
          description: The x coordinate.
        "y":
          type: number
          format: double
          description: The y coordinate.
    PreviousValueDTO:
      type: object
      description: Previous values for a given property.
      properties:
        previousValue:
          type: string
          description: The previous value.
        timestamp:
          type: string
          description: The timestamp when the value was modified.
        userIdentity:
          type: string
          description: The user who changed the previous value.
    PrioritizerTypesEntity:
      type: object
      properties:
        prioritizerTypes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
      xml:
        name: prioritizerTypesEntity
    ProcessGroupDTO:
      type: object
      properties:
        activeRemotePortCount:
          type: integer
          format: int32
          description: The number of active remote ports in the process group.
        comments:
          type: string
          description: The comments for the process group.
        contents:
          $ref: "#/components/schemas/FlowSnippetDTO"
        defaultBackPressureDataSizeThreshold:
          type: string
          description: Default value used in this Process Group for the maximum data
            size of objects that can be queued before back pressure is applied.
        defaultBackPressureObjectThreshold:
          type: integer
          format: int64
          description: Default value used in this Process Group for the maximum number
            of objects that can be queued before back pressure is applied.
        defaultFlowFileExpiration:
          type: string
          description: The default FlowFile Expiration for this Process Group.
        disabledCount:
          type: integer
          format: int32
          description: The number of disabled components in the process group.
        executionEngine:
          type: string
          description: The Execution Engine that should be used to run the flow represented
            by this Process Group.
          enum:
          - STATELESS
          - STANDARD
          - INHERITED
        flowfileConcurrency:
          type: string
          description: The FlowFile Concurrency for this Process Group.
          enum:
          - UNBOUNDED
          - SINGLE_FLOWFILE_PER_NODE
          - SINGLE_BATCH_PER_NODE
        flowfileOutboundPolicy:
          type: string
          description: The Outbound Policy that is used for determining how FlowFiles
            should be transferred out of the Process Group.
          enum:
          - STREAM_WHEN_AVAILABLE
          - BATCH_OUTPUT
        id:
          type: string
          description: The id of the component.
        inactiveRemotePortCount:
          type: integer
          format: int32
          description: The number of inactive remote ports in the process group.
        inputPortCount:
          type: integer
          format: int32
          description: The number of input ports in the process group.
          readOnly: true
        invalidCount:
          type: integer
          format: int32
          description: The number of invalid components in the process group.
        localInputPortCount:
          type: integer
          format: int32
          description: The number of local input ports in the process group.
        localOutputPortCount:
          type: integer
          format: int32
          description: The number of local output ports in the process group.
        locallyModifiedAndStaleCount:
          type: integer
          format: int32
          description: The number of locally modified and stale versioned process
            groups in the process group.
        locallyModifiedCount:
          type: integer
          format: int32
          description: The number of locally modified versioned process groups in
            the process group.
        logFileSuffix:
          type: string
          description: The log file suffix for this Process Group for dedicated logging.
        maxConcurrentTasks:
          type: integer
          format: int32
          description: The maximum number of concurrent tasks to use when running
            the flow using the Stateless Engine
        name:
          type: string
          description: The name of the process group.
        outputPortCount:
          type: integer
          format: int32
          description: The number of output ports in the process group.
          readOnly: true
        parameterContext:
          $ref: "#/components/schemas/ParameterContextReferenceEntity"
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        publicInputPortCount:
          type: integer
          format: int32
          description: The number of public input ports in the process group.
        publicOutputPortCount:
          type: integer
          format: int32
          description: The number of public output ports in the process group.
        runningCount:
          type: integer
          format: int32
          description: The number of running components in this process group.
        staleCount:
          type: integer
          format: int32
          description: The number of stale versioned process groups in the process
            group.
        statelessFlowTimeout:
          type: string
          description: The maximum amount of time that the flow can be run using the
            Stateless Engine before the flow times out
        statelessGroupScheduledState:
          type: string
          description: "If the Process Group is configured to run in using the Stateless\
            \ Engine, represents the current state. Otherwise, will be STOPPED."
          enum:
          - STOPPED
          - RUNNING
        stoppedCount:
          type: integer
          format: int32
          description: The number of stopped components in the process group.
        syncFailureCount:
          type: integer
          format: int32
          description: The number of versioned process groups in the process group
            that are unable to sync to a registry.
        upToDateCount:
          type: integer
          format: int32
          description: The number of up to date versioned process groups in the process
            group.
        versionControlInformation:
          $ref: "#/components/schemas/VersionControlInformationDTO"
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    ProcessGroupEntity:
      type: object
      properties:
        activeRemotePortCount:
          type: integer
          format: int32
          description: The number of active remote ports in the process group.
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ProcessGroupDTO"
        disabledCount:
          type: integer
          format: int32
          description: The number of disabled components in the process group.
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        inactiveRemotePortCount:
          type: integer
          format: int32
          description: The number of inactive remote ports in the process group.
        inputPortCount:
          type: integer
          format: int32
          description: The number of input ports in the process group.
          readOnly: true
        invalidCount:
          type: integer
          format: int32
          description: The number of invalid components in the process group.
        localInputPortCount:
          type: integer
          format: int32
          description: The number of local input ports in the process group.
        localOutputPortCount:
          type: integer
          format: int32
          description: The number of local output ports in the process group.
        locallyModifiedAndStaleCount:
          type: integer
          format: int32
          description: The number of locally modified and stale versioned process
            groups in the process group.
        locallyModifiedCount:
          type: integer
          format: int32
          description: The number of locally modified versioned process groups in
            the process group.
        outputPortCount:
          type: integer
          format: int32
          description: The number of output ports in the process group.
          readOnly: true
        parameterContext:
          $ref: "#/components/schemas/ParameterContextReferenceEntity"
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        processGroupUpdateStrategy:
          type: string
          description: Determines the process group update strategy
          enum:
          - CURRENT_GROUP
          - CURRENT_GROUP_WITH_CHILDREN
        publicInputPortCount:
          type: integer
          format: int32
          description: The number of public input ports in the process group.
        publicOutputPortCount:
          type: integer
          format: int32
          description: The number of public output ports in the process group.
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        runningCount:
          type: integer
          format: int32
          description: The number of running components in this process group.
        staleCount:
          type: integer
          format: int32
          description: The number of stale versioned process groups in the process
            group.
        status:
          $ref: "#/components/schemas/ProcessGroupStatusDTO"
        stoppedCount:
          type: integer
          format: int32
          description: The number of stopped components in the process group.
        syncFailureCount:
          type: integer
          format: int32
          description: The number of versioned process groups in the process group
            that are unable to sync to a registry.
        upToDateCount:
          type: integer
          format: int32
          description: The number of up to date versioned process groups in the process
            group.
        uri:
          type: string
          description: The URI for futures requests to the component.
        versionedFlowSnapshot:
          $ref: "#/components/schemas/RegisteredFlowSnapshot"
        versionedFlowState:
          type: string
          description: "The current state of the Process Group, as it relates to the\
            \ Versioned Flow"
          enum:
          - LOCALLY_MODIFIED
          - STALE
          - LOCALLY_MODIFIED_AND_STALE
          - UP_TO_DATE
          - SYNC_FAILURE
          readOnly: true
      xml:
        name: processGroupEntity
    ProcessGroupFlowDTO:
      type: object
      properties:
        breadcrumb:
          $ref: "#/components/schemas/FlowBreadcrumbEntity"
        flow:
          $ref: "#/components/schemas/FlowDTO"
        id:
          type: string
          description: The id of the component.
        lastRefreshed:
          type: string
          description: The time the flow for the process group was last refreshed.
        parameterContext:
          $ref: "#/components/schemas/ParameterContextReferenceEntity"
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        uri:
          type: string
          description: The URI for futures requests to the component.
    ProcessGroupFlowEntity:
      type: object
      properties:
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        processGroupFlow:
          $ref: "#/components/schemas/ProcessGroupFlowDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
      xml:
        name: processGroupFlowEntity
    ProcessGroupImportEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        processGroupRevision:
          $ref: "#/components/schemas/RevisionDTO"
        versionedFlowSnapshot:
          $ref: "#/components/schemas/RegisteredFlowSnapshot"
      xml:
        name: processGroupImportEntity
    ProcessGroupNameDTO:
      type: object
      description: The Process Group that the component belongs to
      properties:
        id:
          type: string
          description: The ID of the Process Group
        name:
          type: string
          description: "The name of the Process Group, or the ID of the Process Group\
            \ if the user does not have the READ policy for the Process Group"
    ProcessGroupReplaceRequestDTO:
      type: object
      description: The Process Group Change Request
      properties:
        complete:
          type: boolean
          description: Whether or not this request has completed
          readOnly: true
        failureReason:
          type: string
          description: "An explanation of why this request failed, or null if this\
            \ request has not failed"
          readOnly: true
        lastUpdated:
          type: string
          description: The last time this request was updated.
          readOnly: true
        percentCompleted:
          type: integer
          format: int32
          description: "The percentage complete for the request, between 0 and 100"
          readOnly: true
        processGroupId:
          type: string
          description: The unique ID of the Process Group being updated
        requestId:
          type: string
          description: The unique ID of this request.
          readOnly: true
        state:
          type: string
          description: The state of the request
          readOnly: true
        uri:
          type: string
          description: The URI for future requests to this drop request.
          readOnly: true
    ProcessGroupReplaceRequestEntity:
      type: object
      properties:
        processGroupRevision:
          $ref: "#/components/schemas/RevisionDTO"
        request:
          $ref: "#/components/schemas/ProcessGroupReplaceRequestDTO"
        versionedFlowSnapshot:
          $ref: "#/components/schemas/RegisteredFlowSnapshot"
      xml:
        name: processGroupReplaceRequestEntity
    ProcessGroupStatusDTO:
      type: object
      description: The status of the process group.
      properties:
        aggregateSnapshot:
          $ref: "#/components/schemas/ProcessGroupStatusSnapshotDTO"
        id:
          type: string
          description: The ID of the Process Group
        name:
          type: string
          description: The name of the Process Group
        nodeSnapshots:
          type: array
          description: "The status reported by each node in the cluster. If the NiFi\
            \ instance is a standalone instance, rather than a clustered instance,\
            \ this value may be null."
          items:
            $ref: "#/components/schemas/NodeProcessGroupStatusSnapshotDTO"
        statsLastRefreshed:
          type: string
          description: The time the status for the process group was last refreshed.
    ProcessGroupStatusEntity:
      type: object
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        processGroupStatus:
          $ref: "#/components/schemas/ProcessGroupStatusDTO"
      xml:
        name: processGroupStatusEntity
    ProcessGroupStatusSnapshotDTO:
      type: object
      description: The process group status snapshot from the node.
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The active thread count for this process group.
        bytesIn:
          type: integer
          format: int64
          description: The number of bytes that have come into this ProcessGroup in
            the last 5 minutes
        bytesOut:
          type: integer
          format: int64
          description: The number of bytes transferred out of this ProcessGroup in
            the last 5 minutes
        bytesQueued:
          type: integer
          format: int64
          description: The number of bytes that are queued up in this ProcessGroup
            right now
        bytesRead:
          type: integer
          format: int64
          description: The number of bytes read by components in this ProcessGroup
            in the last 5 minutes
        bytesReceived:
          type: integer
          format: int64
          description: The number of bytes received from external sources by components
            within this ProcessGroup in the last 5 minutes
        bytesSent:
          type: integer
          format: int64
          description: The number of bytes sent to an external sink by components
            within this ProcessGroup in the last 5 minutes
        bytesTransferred:
          type: integer
          format: int64
          description: The number of bytes transferred in this ProcessGroup in the
            last 5 minutes
        bytesWritten:
          type: integer
          format: int64
          description: The number of bytes written by components in this ProcessGroup
            in the last 5 minutes
        connectionStatusSnapshots:
          type: array
          description: The status of all connections in the process group.
          items:
            $ref: "#/components/schemas/ConnectionStatusSnapshotEntity"
        flowFilesIn:
          type: integer
          format: int32
          description: The number of FlowFiles that have come into this ProcessGroup
            in the last 5 minutes
        flowFilesOut:
          type: integer
          format: int32
          description: The number of FlowFiles transferred out of this ProcessGroup
            in the last 5 minutes
        flowFilesQueued:
          type: integer
          format: int32
          description: The number of FlowFiles that are queued up in this ProcessGroup
            right now
        flowFilesReceived:
          type: integer
          format: int32
          description: The number of FlowFiles received from external sources by components
            within this ProcessGroup in the last 5 minutes
        flowFilesSent:
          type: integer
          format: int32
          description: The number of FlowFiles sent to an external sink by components
            within this ProcessGroup in the last 5 minutes
        flowFilesTransferred:
          type: integer
          format: int32
          description: The number of FlowFiles transferred in this ProcessGroup in
            the last 5 minutes
        id:
          type: string
          description: The id of the process group.
        input:
          type: string
          description: The input count/size for the process group in the last 5 minutes
            (pretty printed).
        inputPortStatusSnapshots:
          type: array
          description: The status of all input ports in the process group.
          items:
            $ref: "#/components/schemas/PortStatusSnapshotEntity"
        name:
          type: string
          description: The name of this process group.
        output:
          type: string
          description: The output count/size for the process group in the last 5 minutes.
        outputPortStatusSnapshots:
          type: array
          description: The status of all output ports in the process group.
          items:
            $ref: "#/components/schemas/PortStatusSnapshotEntity"
        processGroupStatusSnapshots:
          type: array
          description: The status of all process groups in the process group.
          items:
            $ref: "#/components/schemas/ProcessGroupStatusSnapshotEntity"
        processingNanos:
          type: integer
          format: int64
        processingPerformanceStatus:
          $ref: "#/components/schemas/ProcessingPerformanceStatusDTO"
        processorStatusSnapshots:
          type: array
          description: The status of all processors in the process group.
          items:
            $ref: "#/components/schemas/ProcessorStatusSnapshotEntity"
        queued:
          type: string
          description: The count/size that is queued in the the process group.
        queuedCount:
          type: string
          description: The count that is queued for the process group.
        queuedSize:
          type: string
          description: The size that is queued for the process group.
        read:
          type: string
          description: The number of bytes read in the last 5 minutes.
        received:
          type: string
          description: The count/size sent to the process group in the last 5 minutes.
        remoteProcessGroupStatusSnapshots:
          type: array
          description: The status of all remote process groups in the process group.
          items:
            $ref: "#/components/schemas/RemoteProcessGroupStatusSnapshotEntity"
        sent:
          type: string
          description: The count/size sent from this process group in the last 5 minutes.
        statelessActiveThreadCount:
          type: integer
          format: int32
          description: "The current number of active threads for the Process Group,\
            \ when running in Stateless mode."
          readOnly: true
        terminatedThreadCount:
          type: integer
          format: int32
          description: The number of threads currently terminated for the process
            group.
        transferred:
          type: string
          description: The count/size transferred to/from queues in the process group
            in the last 5 minutes.
        versionedFlowState:
          type: string
          description: "The current state of the Process Group, as it relates to the\
            \ Versioned Flow"
          enum:
          - LOCALLY_MODIFIED
          - STALE
          - LOCALLY_MODIFIED_AND_STALE
          - UP_TO_DATE
          - SYNC_FAILURE
          readOnly: true
        written:
          type: string
          description: The number of bytes written in the last 5 minutes.
    ProcessGroupStatusSnapshotEntity:
      type: object
      description: The status of all process groups in the process group.
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        id:
          type: string
          description: The id of the process group.
        processGroupStatusSnapshot:
          $ref: "#/components/schemas/ProcessGroupStatusSnapshotDTO"
      xml:
        name: entity
    ProcessGroupUploadEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
        flowSnapshot:
          $ref: "#/components/schemas/RegisteredFlowSnapshot"
        groupId:
          type: string
        groupName:
          type: string
        positionDTO:
          $ref: "#/components/schemas/PositionDTO"
        revisionDTO:
          $ref: "#/components/schemas/RevisionDTO"
      xml:
        name: processGroupUploadEntity
    ProcessGroupsEntity:
      type: object
      properties:
        processGroups:
          type: array
          items:
            $ref: "#/components/schemas/ProcessGroupEntity"
          uniqueItems: true
      xml:
        name: processGroupsEntity
    ProcessingPerformanceStatusDTO:
      type: object
      description: Represents the processor's processing performance.
      properties:
        contentReadDuration:
          type: integer
          format: int64
          description: The number of nanoseconds has spent to read content in the
            last 5 minutes.
        contentWriteDuration:
          type: integer
          format: int64
          description: The number of nanoseconds has spent to write content in the
            last 5 minutes.
        cpuDuration:
          type: integer
          format: int64
          description: The number of nanoseconds has spent on CPU usage in the last
            5 minutes.
        garbageCollectionDuration:
          type: integer
          format: int64
          description: The number of nanoseconds has spent running garbage collection
            in the last 5 minutes.
        identifier:
          type: string
          description: The unique ID of the process group that the Processor belongs
            to
        sessionCommitDuration:
          type: integer
          format: int64
          description: The number of nanoseconds has spent running to commit sessions
            the last 5 minutes.
    ProcessorConfigDTO:
      type: object
      description: The configuration details for the processor. These details will
        be included in a response if the verbose flag is included in a request.
      properties:
        annotationData:
          type: string
          description: The annotation data for the processor used to relay configuration
            between a custom UI and the procesosr.
        autoTerminatedRelationships:
          type: array
          description: "The names of all relationships that cause a flow file to be\
            \ terminated if the relationship is not connected elsewhere. This property\
            \ differs from the 'isAutoTerminate' property of the RelationshipDTO in\
            \ that the RelationshipDTO is meant to depict the current configuration,\
            \ whereas this property can be set in a DTO when updating a Processor\
            \ in order to change which Relationships should be auto-terminated."
          items:
            type: string
            description: "The names of all relationships that cause a flow file to\
              \ be terminated if the relationship is not connected elsewhere. This\
              \ property differs from the 'isAutoTerminate' property of the RelationshipDTO\
              \ in that the RelationshipDTO is meant to depict the current configuration,\
              \ whereas this property can be set in a DTO when updating a Processor\
              \ in order to change which Relationships should be auto-terminated."
          uniqueItems: true
        backoffMechanism:
          type: string
          description: Determines whether the FlowFile should be penalized or the
            processor should be yielded between retries.
          enum:
          - PENALIZE_FLOWFILE
          - YIELD_PROCESSOR
        bulletinLevel:
          type: string
          description: The level at which the processor will report bulletins.
        comments:
          type: string
          description: The comments for the processor.
        concurrentlySchedulableTaskCount:
          type: integer
          format: int32
          description: The number of tasks that should be concurrently schedule for
            the processor. If the processor doesn't allow parallol processing then
            any positive input will be ignored.
        customUiUrl:
          type: string
          description: The URL for the processor's custom configuration UI if applicable.
        defaultConcurrentTasks:
          type: object
          additionalProperties:
            type: string
            description: Maps default values for concurrent tasks for each applicable
              scheduling strategy.
          description: Maps default values for concurrent tasks for each applicable
            scheduling strategy.
        defaultSchedulingPeriod:
          type: object
          additionalProperties:
            type: string
            description: Maps default values for scheduling period for each applicable
              scheduling strategy.
          description: Maps default values for scheduling period for each applicable
            scheduling strategy.
        descriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptorDTO"
          description: Descriptors for the processor's properties.
        executionNode:
          type: string
          description: Indicates the node where the process will execute.
        lossTolerant:
          type: boolean
          description: Whether the processor is loss tolerant.
        maxBackoffPeriod:
          type: string
          description: Maximum amount of time to be waited during a retry period.
        penaltyDuration:
          type: string
          description: The amount of time that is used when the process penalizes
            a flowfile.
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties for the processor. Properties whose value
              is not set will only contain the property name.
          description: The properties for the processor. Properties whose value is
            not set will only contain the property name.
        retriedRelationships:
          type: array
          description: All the relationships should be retried.
          items:
            type: string
            description: All the relationships should be retried.
          uniqueItems: true
        retryCount:
          type: integer
          format: int32
          description: Overall number of retries.
        runDurationMillis:
          type: integer
          format: int64
          description: The run duration for the processor in milliseconds.
        schedulingPeriod:
          type: string
          description: The frequency with which to schedule the processor. The format
            of the value will depend on th value of schedulingStrategy.
        schedulingStrategy:
          type: string
          description: Indicates how the processor should be scheduled to run.
        sensitiveDynamicPropertyNames:
          type: array
          description: Set of sensitive dynamic property names
          items:
            type: string
            description: Set of sensitive dynamic property names
          uniqueItems: true
        yieldDuration:
          type: string
          description: The amount of time that must elapse before this processor is
            scheduled again after yielding.
    ProcessorConfiguration:
      type: object
      description: A description of how to configure the Processor to perform the
        task described in the use case
      properties:
        configuration:
          type: string
          description: A description of how the Processor should be configured in
            order to accomplish the use case
        processorClassName:
          type: string
          description: The fully qualified classname of the Processor that should
            be used to accomplish the use case
    ProcessorDTO:
      type: object
      properties:
        bundle:
          $ref: "#/components/schemas/BundleDTO"
        config:
          $ref: "#/components/schemas/ProcessorConfigDTO"
        deprecated:
          type: boolean
          description: Whether the processor has been deprecated.
        description:
          type: string
          description: The description of the processor.
        executionNodeRestricted:
          type: boolean
          description: Indicates if the execution node of a processor is restricted
            to run only on the primary node
        extensionMissing:
          type: boolean
          description: Whether the underlying extension is missing.
        id:
          type: string
          description: The id of the component.
        inputRequirement:
          type: string
          description: The input requirement for this processor.
        multipleVersionsAvailable:
          type: boolean
          description: Whether the processor has multiple versions available.
        name:
          type: string
          description: The name of the processor.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        persistsState:
          type: boolean
          description: Whether the processor persists state.
        position:
          $ref: "#/components/schemas/PositionDTO"
        relationships:
          type: array
          description: The available relationships that the processor currently supports.
          items:
            $ref: "#/components/schemas/RelationshipDTO"
          readOnly: true
        restricted:
          type: boolean
          description: Whether the processor requires elevated privileges.
        state:
          type: string
          description: The state of the processor
          enum:
          - RUNNING
          - STOPPED
          - DISABLED
        style:
          type: object
          additionalProperties:
            type: string
            description: "Styles for the processor (background-color : #eee)."
          description: "Styles for the processor (background-color : #eee)."
        supportsBatching:
          type: boolean
          description: Whether the processor supports batching. This makes the run
            duration settings available.
        supportsParallelProcessing:
          type: boolean
          description: Whether the processor supports parallel processing.
        supportsSensitiveDynamicProperties:
          type: boolean
          description: Whether the processor supports sensitive dynamic properties.
        type:
          type: string
          description: The type of the processor.
        validationErrors:
          type: array
          description: The validation errors for the processor. These validation errors
            represent the problems with the processor that must be resolved before
            it can be started.
          items:
            type: string
            description: The validation errors for the processor. These validation
              errors represent the problems with the processor that must be resolved
              before it can be started.
        validationStatus:
          type: string
          description: "Indicates whether the Processor is valid, invalid, or still\
            \ in the process of validating (i.e., it is unknown whether or not the\
            \ Processor is valid)"
          enum:
          - VALID
          - INVALID
          - VALIDATING
          readOnly: true
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    ProcessorDefinition:
      type: object
      description: Processors provided in this bundle
      properties:
        additionalDetails:
          type: boolean
          description: Indicates if the component has additional details documentation
        artifact:
          type: string
          description: The artifact name of the bundle that provides the referenced
            type.
        buildInfo:
          $ref: "#/components/schemas/BuildInfo"
        defaultBulletinLevel:
          type: string
          description: "The default bulletin level, such as WARN, INFO, DEBUG, etc."
        defaultConcurrentTasksBySchedulingStrategy:
          type: object
          additionalProperties:
            type: integer
            format: int32
            description: The default concurrent tasks for each scheduling strategy.
          description: The default concurrent tasks for each scheduling strategy.
        defaultPenaltyDuration:
          type: string
          description: "The default penalty duration as a time period, such as \"\
            30 sec\"."
        defaultSchedulingPeriodBySchedulingStrategy:
          type: object
          additionalProperties:
            type: string
            description: "The default scheduling period for each scheduling strategy.\
              \ The scheduling period is expected to be a time period, such as \"\
              30 sec\"."
          description: "The default scheduling period for each scheduling strategy.\
            \ The scheduling period is expected to be a time period, such as \"30\
            \ sec\"."
        defaultSchedulingStrategy:
          type: string
          description: The default scheduling strategy for the processor.
        defaultYieldDuration:
          type: string
          description: "The default yield duration as a time period, such as \"1 sec\"\
            ."
        deprecated:
          type: boolean
          description: Whether or not the component has been deprecated
        deprecationAlternatives:
          type: array
          description: "If this component has been deprecated, this optional field\
            \ provides alternatives to use"
          items:
            type: string
            description: "If this component has been deprecated, this optional field\
              \ provides alternatives to use"
          uniqueItems: true
        deprecationReason:
          type: string
          description: "If this component has been deprecated, this optional field\
            \ can be used to provide an explanation"
        dynamicProperties:
          type: array
          description: Describes the dynamic properties supported by this component
          items:
            $ref: "#/components/schemas/DynamicProperty"
        dynamicRelationship:
          $ref: "#/components/schemas/DynamicRelationship"
        explicitRestrictions:
          type: array
          description: Explicit restrictions that indicate a require permission to
            use the component
          items:
            $ref: "#/components/schemas/Restriction"
          uniqueItems: true
        group:
          type: string
          description: The group name of the bundle that provides the referenced type.
        inputRequirement:
          type: string
          description: Any input requirements this processor has.
          enum:
          - INPUT_REQUIRED
          - INPUT_ALLOWED
          - INPUT_FORBIDDEN
        multiProcessorUseCases:
          type: array
          description: A list of use cases that have been documented that involve
            this Processor in conjunction with other Processors
          items:
            $ref: "#/components/schemas/MultiProcessorUseCase"
        primaryNodeOnly:
          type: boolean
          description: Whether or not this processor should be scheduled only on the
            primary node in a cluster.
        propertyDescriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptor"
          description: Descriptions of configuration properties applicable to this
            component.
        providedApiImplementations:
          type: array
          description: "If this type represents a provider for an interface, this\
            \ lists the APIs it implements"
          items:
            $ref: "#/components/schemas/DefinedType"
        readsAttributes:
          type: array
          description: The FlowFile attributes this processor reads
          items:
            $ref: "#/components/schemas/Attribute"
        restricted:
          type: boolean
          description: Whether or not the component has a general restriction
        restrictedExplanation:
          type: string
          description: An optional description of the general restriction
        seeAlso:
          type: array
          description: The names of other component types that may be related
          items:
            type: string
            description: The names of other component types that may be related
          uniqueItems: true
        sideEffectFree:
          type: boolean
          description: Whether or not this processor is considered side-effect free.
            Side-effect free indicate that the processor's operations on FlowFiles
            can be safely repeated across process sessions.
        stateful:
          $ref: "#/components/schemas/Stateful"
        supportedRelationships:
          type: array
          description: The supported relationships for this processor.
          items:
            $ref: "#/components/schemas/Relationship"
        supportedSchedulingStrategies:
          type: array
          description: "The supported scheduling strategies, such as TIME_DRIVER,\
            \ CRON, or EVENT_DRIVEN."
          items:
            type: string
            description: "The supported scheduling strategies, such as TIME_DRIVER,\
              \ CRON, or EVENT_DRIVEN."
        supportsBatching:
          type: boolean
          description: "Whether or not this processor supports batching. If a Processor\
            \ uses this annotation, it allows the Framework to batch calls to session\
            \ commits, as well as allowing the Framework to return the same session\
            \ multiple times."
        supportsDynamicProperties:
          type: boolean
          description: Whether or not this component makes use of dynamic (user-set)
            properties.
        supportsDynamicRelationships:
          type: boolean
          description: Whether or not this processor supports dynamic relationships.
        supportsSensitiveDynamicProperties:
          type: boolean
          description: Whether or not this component makes use of sensitive dynamic
            (user-set) properties.
        systemResourceConsiderations:
          type: array
          description: The system resource considerations for the given component
          items:
            $ref: "#/components/schemas/SystemResourceConsideration"
        tags:
          type: array
          description: The tags associated with this type
          items:
            type: string
            description: The tags associated with this type
          uniqueItems: true
        triggerSerially:
          type: boolean
          description: Whether or not this processor should be triggered serially
            (i.e. no concurrent execution).
        triggerWhenAnyDestinationAvailable:
          type: boolean
          description: Whether or not this processor should be triggered when any
            destination queue has room.
        triggerWhenEmpty:
          type: boolean
          description: Whether or not this processor should be triggered when incoming
            queues are empty.
        type:
          type: string
          description: The fully-qualified class type
        typeDescription:
          type: string
          description: The description of the type.
        useCases:
          type: array
          description: A list of use cases that have been documented for this Processor
          items:
            $ref: "#/components/schemas/UseCase"
        version:
          type: string
          description: The version of the bundle that provides the referenced type.
        writesAttributes:
          type: array
          description: The FlowFile attributes this processor writes/updates
          items:
            $ref: "#/components/schemas/Attribute"
    ProcessorEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ProcessorDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        inputRequirement:
          type: string
          description: The input requirement for this processor.
        operatePermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        status:
          $ref: "#/components/schemas/ProcessorStatusDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: processorEntity
    ProcessorRunStatusDetailsDTO:
      type: object
      description: The details of a Processor's run status
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The current number of threads that the processor is currently
            using
        id:
          type: string
          description: The ID of the processor
        name:
          type: string
          description: The name of the processor
        runStatus:
          type: string
          description: The run status of the processor
          enum:
          - Running
          - Stopped
          - Invalid
          - Validating
          - Disabled
        validationErrors:
          type: array
          description: The processor's validation errors
          items:
            type: string
            description: The processor's validation errors
          uniqueItems: true
    ProcessorRunStatusDetailsEntity:
      type: object
      properties:
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        runStatusDetails:
          $ref: "#/components/schemas/ProcessorRunStatusDetailsDTO"
      xml:
        name: entity
    ProcessorRunStatusEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        state:
          type: string
          description: The run status of the Processor.
          enum:
          - RUNNING
          - STOPPED
          - DISABLED
          - RUN_ONCE
      xml:
        name: entity
    ProcessorStatusDTO:
      type: object
      properties:
        aggregateSnapshot:
          $ref: "#/components/schemas/ProcessorStatusSnapshotDTO"
        groupId:
          type: string
          description: The unique ID of the process group that the Processor belongs
            to
        id:
          type: string
          description: The unique ID of the Processor
        name:
          type: string
          description: The name of the Processor
        nodeSnapshots:
          type: array
          description: "A status snapshot for each node in the cluster. If the NiFi\
            \ instance is a standalone instance, rather than a cluster, this may be\
            \ null."
          items:
            $ref: "#/components/schemas/NodeProcessorStatusSnapshotDTO"
        runStatus:
          type: string
          description: The run status of the Processor
          enum:
          - Running
          - Stopped
          - Validating
          - Disabled
          - Invalid
        statsLastRefreshed:
          type: string
          description: The timestamp of when the stats were last refreshed
        type:
          type: string
          description: The type of the Processor
    ProcessorStatusEntity:
      type: object
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        processorStatus:
          $ref: "#/components/schemas/ProcessorStatusDTO"
      xml:
        name: processorStatusEntity
    ProcessorStatusSnapshotDTO:
      type: object
      description: The processor status snapshot from the node.
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The number of threads currently executing in the processor.
        bytesIn:
          type: integer
          format: int64
          description: The size of the FlowFiles that have been accepted in the last
            5 minutes
        bytesOut:
          type: integer
          format: int64
          description: The size of the FlowFiles transferred to a Connection in the
            last 5 minutes
        bytesRead:
          type: integer
          format: int64
          description: The number of bytes read by this Processor in the last 5 mintues
        bytesWritten:
          type: integer
          format: int64
          description: The number of bytes written by this Processor in the last 5
            minutes
        executionNode:
          type: string
          description: Indicates the node where the process will execute.
          enum:
          - ALL
          - PRIMARY
        flowFilesIn:
          type: integer
          format: int32
          description: The number of FlowFiles that have been accepted in the last
            5 minutes
        flowFilesOut:
          type: integer
          format: int32
          description: The number of FlowFiles transferred to a Connection in the
            last 5 minutes
        groupId:
          type: string
          description: The id of the parent process group to which the processor belongs.
        id:
          type: string
          description: The id of the processor.
        input:
          type: string
          description: The count/size of flowfiles that have been accepted in the
            last 5 minutes.
        name:
          type: string
          description: The name of the prcessor.
        output:
          type: string
          description: The count/size of flowfiles that have been processed in the
            last 5 minutes.
        processingPerformanceStatus:
          $ref: "#/components/schemas/ProcessingPerformanceStatusDTO"
        read:
          type: string
          description: The number of bytes read in the last 5 minutes.
        runStatus:
          type: string
          description: The state of the processor.
          enum:
          - Running
          - Stopped
          - Validating
          - Disabled
          - Invalid
        taskCount:
          type: integer
          format: int32
          description: The number of times this Processor has run in the last 5 minutes
        tasks:
          type: string
          description: The total number of task this connectable has completed over
            the last 5 minutes.
        tasksDuration:
          type: string
          description: The total duration of all tasks for this connectable over the
            last 5 minutes.
        tasksDurationNanos:
          type: integer
          format: int64
          description: The number of nanoseconds that this Processor has spent running
            in the last 5 minutes
        terminatedThreadCount:
          type: integer
          format: int32
          description: The number of threads currently terminated for the processor.
        type:
          type: string
          description: The type of the processor.
        written:
          type: string
          description: The number of bytes written in the last 5 minutes.
    ProcessorStatusSnapshotEntity:
      type: object
      description: The status of all processors in the process group.
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        id:
          type: string
          description: The id of the processor.
        processorStatusSnapshot:
          $ref: "#/components/schemas/ProcessorStatusSnapshotDTO"
      xml:
        name: entity
    ProcessorTypesEntity:
      type: object
      properties:
        processorTypes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
      xml:
        name: processorTypesEntity
    ProcessorsEntity:
      type: object
      properties:
        processors:
          type: array
          items:
            $ref: "#/components/schemas/ProcessorEntity"
          uniqueItems: true
      xml:
        name: processorsEntity
    ProcessorsRunStatusDetailsEntity:
      type: object
      properties:
        runStatusDetails:
          type: array
          items:
            $ref: "#/components/schemas/ProcessorRunStatusDetailsEntity"
      xml:
        name: processorsRunStatusDetails
    PropertyAllowableValue:
      type: object
      description: A list of the allowable values for the property
      properties:
        description:
          type: string
          description: "The description of the value, e.g., the behavior it produces."
        displayName:
          type: string
          description: "The display name of the value, if different from the internal\
            \ value"
        value:
          type: string
          description: The internal value
    PropertyDependency:
      type: object
      description: The dependencies that this property has on other properties
      properties:
        dependentValues:
          type: array
          description: The values that satisfy the dependency
          items:
            type: string
            description: The values that satisfy the dependency
        propertyDisplayName:
          type: string
          description: The name of the property that is depended upon
        propertyName:
          type: string
          description: The name of the property that is depended upon
    PropertyDependencyDTO:
      type: object
      description: "A list of dependencies that must be met in order for this Property\
        \ to be relevant. If any of these dependencies is not met, the property described\
        \ by this Property Descriptor is not relevant."
      properties:
        dependentValues:
          type: array
          description: "The values for the property that satisfies the dependency,\
            \ or null if the dependency is satisfied by the presence of any value\
            \ for the associated property name"
          items:
            type: string
            description: "The values for the property that satisfies the dependency,\
              \ or null if the dependency is satisfied by the presence of any value\
              \ for the associated property name"
          uniqueItems: true
        propertyName:
          type: string
          description: The name of the property that is being depended upon
    PropertyDescriptor:
      type: object
      description: Descriptions of configuration properties applicable to this component.
      properties:
        allowableValues:
          type: array
          description: A list of the allowable values for the property
          items:
            $ref: "#/components/schemas/PropertyAllowableValue"
        defaultValue:
          type: string
          description: The default value if a user-set value is not specified
        dependencies:
          type: array
          description: The dependencies that this property has on other properties
          items:
            $ref: "#/components/schemas/PropertyDependency"
        description:
          type: string
          description: The description of what the property does
        displayName:
          type: string
          description: "The display name of the property key, if different from the\
            \ name"
        dynamic:
          type: boolean
          description: Whether or not the descriptor is for a dynamically added property
        expressionLanguageScope:
          type: string
          description: The scope of expression language supported by this property
          enum:
          - NONE
          - ENVIRONMENT
          - FLOWFILE_ATTRIBUTES
        expressionLanguageScopeDescription:
          type: string
          description: The description of the expression language scope supported
            by this property
          readOnly: true
        name:
          type: string
          description: The name of the property key
        required:
          type: boolean
          description: Whether or not  the property is required for the component
        resourceDefinition:
          $ref: "#/components/schemas/PropertyResourceDefinition"
        sensitive:
          type: boolean
          description: "Whether or not  the value of the property is considered sensitive\
            \ (e.g., passwords and keys)"
        typeProvidedByValue:
          $ref: "#/components/schemas/DefinedType"
        validRegex:
          type: string
          description: A regular expression that can be used to validate the value
            of this property
        validator:
          type: string
          description: Name of the validator used for this property descriptor
    PropertyDescriptorDTO:
      type: object
      description: The descriptors for the reporting tasks properties.
      properties:
        allowableValues:
          type: array
          description: Allowable values for the property. If empty then the allowed
            values are not constrained.
          items:
            $ref: "#/components/schemas/AllowableValueEntity"
        defaultValue:
          type: string
          description: The default value for the property.
        dependencies:
          type: array
          description: "A list of dependencies that must be met in order for this\
            \ Property to be relevant. If any of these dependencies is not met, the\
            \ property described by this Property Descriptor is not relevant."
          items:
            $ref: "#/components/schemas/PropertyDependencyDTO"
        description:
          type: string
          description: The description for the property. Used to relay additional
            details to a user or provide a mechanism of documenting intent.
        displayName:
          type: string
          description: The human readable name for the property.
        dynamic:
          type: boolean
          description: Whether the property is dynamic (user-defined).
        expressionLanguageScope:
          type: string
          description: Scope of the Expression Language evaluation for the property.
        identifiesControllerService:
          type: string
          description: If the property identifies a controller service this returns
            the fully qualified type.
        identifiesControllerServiceBundle:
          $ref: "#/components/schemas/BundleDTO"
        name:
          type: string
          description: The name for the property.
        required:
          type: boolean
          description: Whether the property is required.
        sensitive:
          type: boolean
          description: Whether the property is sensitive and protected whenever stored
            or represented.
        supportsEl:
          type: boolean
          description: Whether the property supports expression language.
    PropertyDescriptorEntity:
      type: object
      properties:
        propertyDescriptor:
          $ref: "#/components/schemas/PropertyDescriptorDTO"
      xml:
        name: propertyDescriptor
    PropertyHistoryDTO:
      type: object
      description: The history for the properties of the component.
      properties:
        previousValues:
          type: array
          description: Previous values for a given property.
          items:
            $ref: "#/components/schemas/PreviousValueDTO"
    PropertyResourceDefinition:
      type: object
      description: Indicates that this property references external resources
      properties:
        cardinality:
          type: string
          description: The cardinality of the resource definition (i.e. single or
            multiple)
          enum:
          - SINGLE
          - MULTIPLE
        resourceTypes:
          type: array
          description: The types of resources that can be referenced
          items:
            type: string
            description: The types of resources that can be referenced
            enum:
            - FILE
            - DIRECTORY
            - TEXT
            - URL
          uniqueItems: true
    ProvenanceDTO:
      type: object
      properties:
        expiration:
          type: string
          description: The timestamp when the query will expire.
        finished:
          type: boolean
          description: Whether the query has finished.
        id:
          type: string
          description: The id of the provenance query.
        percentCompleted:
          type: integer
          format: int32
          description: The current percent complete.
        request:
          $ref: "#/components/schemas/ProvenanceRequestDTO"
        results:
          $ref: "#/components/schemas/ProvenanceResultsDTO"
        submissionTime:
          type: string
          description: The timestamp when the query was submitted.
        uri:
          type: string
          description: The URI for this query. Used for obtaining/deleting the request
            at a later time
    ProvenanceEntity:
      type: object
      properties:
        provenance:
          $ref: "#/components/schemas/ProvenanceDTO"
      xml:
        name: provenanceEntity
    ProvenanceEventDTO:
      type: object
      description: The provenance events that matched the search criteria.
      properties:
        alternateIdentifierUri:
          type: string
          description: The alternate identifier uri for the fileflow for the event.
        attributes:
          type: array
          description: The attributes of the flowfile for the event.
          items:
            $ref: "#/components/schemas/AttributeDTO"
        childUuids:
          type: array
          description: The child uuids for the event.
          items:
            type: string
            description: The child uuids for the event.
        clusterNodeAddress:
          type: string
          description: The label for the node where the event originated.
        clusterNodeId:
          type: string
          description: The identifier for the node where the event originated.
        componentId:
          type: string
          description: The id of the component that generated the event.
        componentName:
          type: string
          description: The name of the component that generated the event.
        componentType:
          type: string
          description: The type of the component that generated the event.
        contentEqual:
          type: boolean
          description: Whether the input and output content claim is the same.
        details:
          type: string
          description: The event details.
        eventDuration:
          type: integer
          format: int64
          description: The event duration in milliseconds.
        eventId:
          type: integer
          format: int64
          description: The event id. This is a one up number thats unique per node.
        eventTime:
          type: string
          description: The timestamp of the event.
        eventType:
          type: string
          description: The type of the event.
        fileSize:
          type: string
          description: The size of the flowfile for the event.
        fileSizeBytes:
          type: integer
          format: int64
          description: The size of the flowfile in bytes for the event.
        flowFileUuid:
          type: string
          description: The uuid of the flowfile for the event.
        groupId:
          type: string
          description: "The id of the group that the component resides in. If the\
            \ component is no longer in the flow, the group id will not be set."
        id:
          type: string
          description: The event uuid.
        inputContentAvailable:
          type: boolean
          description: Whether the input content is still available.
        inputContentClaimContainer:
          type: string
          description: The container in which the input content claim lives.
        inputContentClaimFileSize:
          type: string
          description: The file size of the input content claim formatted.
        inputContentClaimFileSizeBytes:
          type: integer
          format: int64
          description: The file size of the intput content claim in bytes.
        inputContentClaimIdentifier:
          type: string
          description: The identifier of the input content claim.
        inputContentClaimOffset:
          type: integer
          format: int64
          description: The offset into the input content claim where the flowfiles
            content begins.
        inputContentClaimSection:
          type: string
          description: The section in which the input content claim lives.
        lineageDuration:
          type: integer
          format: int64
          description: "The duration since the lineage began, in milliseconds."
        outputContentAvailable:
          type: boolean
          description: Whether the output content is still available.
        outputContentClaimContainer:
          type: string
          description: The container in which the output content claim lives.
        outputContentClaimFileSize:
          type: string
          description: The file size of the output content claim formatted.
        outputContentClaimFileSizeBytes:
          type: integer
          format: int64
          description: The file size of the output content claim in bytes.
        outputContentClaimIdentifier:
          type: string
          description: The identifier of the output content claim.
        outputContentClaimOffset:
          type: integer
          format: int64
          description: The offset into the output content claim where the flowfiles
            content begins.
        outputContentClaimSection:
          type: string
          description: The section in which the output content claim lives.
        parentUuids:
          type: array
          description: The parent uuids for the event.
          items:
            type: string
            description: The parent uuids for the event.
        relationship:
          type: string
          description: The relationship to which the flowfile was routed if the event
            is of type ROUTE.
        replayAvailable:
          type: boolean
          description: Whether or not replay is available.
        replayExplanation:
          type: string
          description: Explanation as to why replay is unavailable.
        sourceConnectionIdentifier:
          type: string
          description: The identifier of the queue/connection from which the flowfile
            was pulled to genereate this event. May be null if the queue/connection
            is unknown or the flowfile was generated from this event.
        sourceSystemFlowFileId:
          type: string
          description: The source system flowfile id.
        transitUri:
          type: string
          description: The source/destination system uri if the event was a RECEIVE/SEND.
    ProvenanceEventEntity:
      type: object
      properties:
        provenanceEvent:
          $ref: "#/components/schemas/ProvenanceEventDTO"
      xml:
        name: provenanceEventEntity
    ProvenanceLinkDTO:
      type: object
      description: The links between the nodes in the lineage.
      properties:
        flowFileUuid:
          type: string
          description: The flowfile uuid that traversed the link.
        millis:
          type: integer
          format: int64
          description: The timestamp of this link in milliseconds.
        sourceId:
          type: string
          description: The source node id of the link.
        targetId:
          type: string
          description: The target node id of the link.
        timestamp:
          type: string
          description: The timestamp of the link (based on the destination).
    ProvenanceNodeDTO:
      type: object
      description: The nodes in the lineage.
      properties:
        childUuids:
          type: array
          description: The uuid of the childrent flowfiles of the provenance event.
          items:
            type: string
            description: The uuid of the childrent flowfiles of the provenance event.
        clusterNodeIdentifier:
          type: string
          description: The identifier of the node that this event/flowfile originated
            from.
        eventType:
          type: string
          description: "If the type is EVENT, this is the type of event."
        flowFileUuid:
          type: string
          description: The uuid of the flowfile associated with the provenance event.
        id:
          type: string
          description: The id of the node.
        millis:
          type: integer
          format: int64
          description: The timestamp of the node in milliseconds.
        parentUuids:
          type: array
          description: The uuid of the parent flowfiles of the provenance event.
          items:
            type: string
            description: The uuid of the parent flowfiles of the provenance event.
        timestamp:
          type: string
          description: The timestamp of the node formatted.
        type:
          type: string
          description: The type of the node.
          enum:
          - FLOWFILE
          - EVENT
    ProvenanceOptionsDTO:
      type: object
      properties:
        searchableFields:
          type: array
          description: The available searchable field for the NiFi.
          items:
            $ref: "#/components/schemas/ProvenanceSearchableFieldDTO"
    ProvenanceOptionsEntity:
      type: object
      properties:
        provenanceOptions:
          $ref: "#/components/schemas/ProvenanceOptionsDTO"
      xml:
        name: provenanceOptionsEntity
    ProvenanceRequestDTO:
      type: object
      description: The provenance request.
      properties:
        clusterNodeId:
          type: string
          description: The id of the node in the cluster where this provenance originated.
        endDate:
          type: string
          description: The latest event time to include in the query.
        incrementalResults:
          type: boolean
          description: "Whether or not incremental results are returned. If false,\
            \ provenance events are only returned once the query completes. This property\
            \ is true by default."
        maxResults:
          type: integer
          format: int32
          description: The maximum number of results to include.
        maximumFileSize:
          type: string
          description: The maximum file size to include in the query.
        minimumFileSize:
          type: string
          description: The minimum file size to include in the query.
        searchTerms:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ProvenanceSearchValueDTO"
          description: The search terms used to perform the search.
        startDate:
          type: string
          description: The earliest event time to include in the query.
        summarize:
          type: boolean
          description: Whether or not to summarize provenance events returned. This
            property is false by default.
    ProvenanceResultsDTO:
      type: object
      description: The provenance results.
      properties:
        errors:
          type: array
          description: Any errors that occurred while performing the provenance request.
          items:
            type: string
            description: Any errors that occurred while performing the provenance
              request.
          uniqueItems: true
        generated:
          type: string
          description: Then the search was performed.
        oldestEvent:
          type: string
          description: The oldest event available in the provenance repository.
        provenanceEvents:
          type: array
          description: The provenance events that matched the search criteria.
          items:
            $ref: "#/components/schemas/ProvenanceEventDTO"
        timeOffset:
          type: integer
          format: int32
          description: The time offset of the server that's used for event time.
        total:
          type: string
          description: The total number of results formatted.
        totalCount:
          type: integer
          format: int64
          description: The total number of results.
    ProvenanceSearchValueDTO:
      type: object
      description: The search terms used to perform the search.
      properties:
        inverse:
          type: boolean
          description: Query for all except for search value.
        value:
          type: string
          description: The search value.
    ProvenanceSearchableFieldDTO:
      type: object
      description: The available searchable field for the NiFi.
      properties:
        field:
          type: string
          description: The searchable field.
        id:
          type: string
          description: The id of the searchable field.
        label:
          type: string
          description: The label for the searchable field.
        type:
          type: string
          description: The type of the searchable field.
    QueueSizeDTO:
      type: object
      description: The size of the queue
      properties:
        byteCount:
          type: integer
          format: int64
          description: The size of objects in a queue.
        objectCount:
          type: integer
          format: int32
          description: The count of objects in a queue.
    RegisteredFlow:
      type: object
      properties:
        branch:
          type: string
        bucketIdentifier:
          type: string
        bucketName:
          type: string
        createdTimestamp:
          type: integer
          format: int64
        description:
          type: string
        identifier:
          type: string
        lastModifiedTimestamp:
          type: integer
          format: int64
        name:
          type: string
        permissions:
          $ref: "#/components/schemas/FlowRegistryPermissions"
        versionCount:
          type: integer
          format: int64
        versionInfo:
          $ref: "#/components/schemas/RegisteredFlowVersionInfo"
    RegisteredFlowSnapshot:
      type: object
      properties:
        bucket:
          $ref: "#/components/schemas/FlowRegistryBucket"
        externalControllerServices:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ExternalControllerServiceReference"
        flow:
          $ref: "#/components/schemas/RegisteredFlow"
        flowContents:
          $ref: "#/components/schemas/VersionedProcessGroup"
        flowEncodingVersion:
          type: string
        latest:
          type: boolean
        parameterContexts:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/VersionedParameterContext"
        parameterProviders:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ParameterProviderReference"
        snapshotMetadata:
          $ref: "#/components/schemas/RegisteredFlowSnapshotMetadata"
    RegisteredFlowSnapshotMetadata:
      type: object
      properties:
        author:
          type: string
        branch:
          type: string
        bucketIdentifier:
          type: string
        comments:
          type: string
        flowIdentifier:
          type: string
        timestamp:
          type: integer
          format: int64
        version:
          type: string
    RegisteredFlowVersionInfo:
      type: object
      properties:
        version:
          type: integer
          format: int64
    Relationship:
      type: object
      description: The supported relationships for this processor.
      properties:
        description:
          type: string
          description: The description of the relationship
        name:
          type: string
          description: The name of the relationship
    RelationshipDTO:
      type: object
      description: The available relationships that the processor currently supports.
      properties:
        autoTerminate:
          type: boolean
          description: Whether or not flowfiles sent to this relationship should auto
            terminate.
        description:
          type: string
          description: The relationship description.
        name:
          type: string
          description: The relationship name.
        retry:
          type: boolean
          description: Whether or not flowfiles sent to this relationship should retry.
      readOnly: true
    RemotePortRunStatusEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        state:
          type: string
          description: The run status of the RemotePort.
          enum:
          - TRANSMITTING
          - STOPPED
      xml:
        name: entity
    RemoteProcessGroupContentsDTO:
      type: object
      description: The contents of the remote process group. Will contain available
        input/output ports.
      properties:
        inputPorts:
          type: array
          description: The input ports to which data can be sent.
          items:
            $ref: "#/components/schemas/RemoteProcessGroupPortDTO"
          uniqueItems: true
        outputPorts:
          type: array
          description: The output ports from which data can be retrieved.
          items:
            $ref: "#/components/schemas/RemoteProcessGroupPortDTO"
          uniqueItems: true
    RemoteProcessGroupDTO:
      type: object
      properties:
        activeRemoteInputPortCount:
          type: integer
          format: int32
          description: The number of active remote input ports.
        activeRemoteOutputPortCount:
          type: integer
          format: int32
          description: The number of active remote output ports.
        authorizationIssues:
          type: array
          description: Any remote authorization issues for the remote process group.
          items:
            type: string
            description: Any remote authorization issues for the remote process group.
        comments:
          type: string
          description: The comments for the remote process group.
        communicationsTimeout:
          type: string
          description: The time period used for the timeout when communicating with
            the target.
        contents:
          $ref: "#/components/schemas/RemoteProcessGroupContentsDTO"
        flowRefreshed:
          type: string
          description: The timestamp when this remote process group was last refreshed.
        id:
          type: string
          description: The id of the component.
        inactiveRemoteInputPortCount:
          type: integer
          format: int32
          description: The number of inactive remote input ports.
        inactiveRemoteOutputPortCount:
          type: integer
          format: int32
          description: The number of inactive remote output ports.
        inputPortCount:
          type: integer
          format: int32
          description: The number of remote input ports currently available on the
            target.
        localNetworkInterface:
          type: string
          description: "The local network interface to send/receive data. If not specified,\
            \ any local address is used. If clustered, all nodes must have an interface\
            \ with this identifier."
        name:
          type: string
          description: The name of the remote process group.
        outputPortCount:
          type: integer
          format: int32
          description: The number of remote output ports currently available on the
            target.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        proxyHost:
          type: string
        proxyPassword:
          type: string
        proxyPort:
          type: integer
          format: int32
        proxyUser:
          type: string
        targetSecure:
          type: boolean
          description: Whether the target is running securely.
        targetUri:
          type: string
          description: "The target URI of the remote process group. If target uri\
            \ is not set, but uris are set, then returns the first url in the urls.\
            \ If neither target uri nor uris are set, then returns null."
        targetUris:
          type: string
          description: "The target URI of the remote process group. If target uris\
            \ is not set but target uri is set, then returns a collection containing\
            \ the single target uri. If neither target uris nor uris are set, then\
            \ returns null."
        transmitting:
          type: boolean
          description: Whether the remote process group is actively transmitting.
        transportProtocol:
          type: string
        validationErrors:
          type: array
          description: |
            The validation errors for the remote process group.
            These validation errors represent the problems with the remote process group that must be resolved before it can transmit.
          items:
            type: string
            description: |
              The validation errors for the remote process group.
              These validation errors represent the problems with the remote process group that must be resolved before it can transmit.
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
        yieldDuration:
          type: string
          description: "When yielding, this amount of time must elapse before the\
            \ remote process group is scheduled again."
    RemoteProcessGroupEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/RemoteProcessGroupDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        inputPortCount:
          type: integer
          format: int32
          description: The number of remote input ports currently available on the
            target.
        operatePermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        outputPortCount:
          type: integer
          format: int32
          description: The number of remote output ports currently available on the
            target.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        status:
          $ref: "#/components/schemas/RemoteProcessGroupStatusDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: remoteProcessGroupEntity
    RemoteProcessGroupPortDTO:
      type: object
      description: The output ports from which data can be retrieved.
      properties:
        batchSettings:
          $ref: "#/components/schemas/BatchSettingsDTO"
        comments:
          type: string
          description: The comments as configured on the target port.
        concurrentlySchedulableTaskCount:
          type: integer
          format: int32
          description: The number of task that may transmit flowfiles to the target
            port concurrently.
        connected:
          type: boolean
          description: Whether the port has either an incoming or outgoing connection.
        exists:
          type: boolean
          description: Whether the target port exists.
        groupId:
          type: string
          description: The id of the remote process group that the port resides in.
        id:
          type: string
          description: The id of the port.
        name:
          type: string
          description: The name of the target port.
        targetId:
          type: string
          description: The id of the target port.
        targetRunning:
          type: boolean
          description: Whether the target port is running.
        transmitting:
          type: boolean
          description: Whether the remote port is configured for transmission.
        useCompression:
          type: boolean
          description: Whether the flowfiles are compressed when sent to the target
            port.
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    RemoteProcessGroupPortEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        operatePermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        remoteProcessGroupPort:
          $ref: "#/components/schemas/RemoteProcessGroupPortDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: remoteProcessGroupPortEntity
    RemoteProcessGroupStatusDTO:
      type: object
      description: The status of the remote process group.
      properties:
        aggregateSnapshot:
          $ref: "#/components/schemas/RemoteProcessGroupStatusSnapshotDTO"
        groupId:
          type: string
          description: The unique ID of the process group that the Processor belongs
            to
        id:
          type: string
          description: The unique ID of the Processor
        name:
          type: string
          description: The name of the remote process group.
        nodeSnapshots:
          type: array
          description: "A status snapshot for each node in the cluster. If the NiFi\
            \ instance is a standalone instance, rather than a cluster, this may be\
            \ null."
          items:
            $ref: "#/components/schemas/NodeRemoteProcessGroupStatusSnapshotDTO"
        statsLastRefreshed:
          type: string
          description: The time the status for the process group was last refreshed.
        targetUri:
          type: string
          description: The URI of the target system.
        transmissionStatus:
          type: string
          description: The transmission status of the remote process group.
        validationStatus:
          type: string
          description: "Indicates whether the component is valid, invalid, or still\
            \ in the process of validating (i.e., it is unknown whether or not the\
            \ component is valid)"
          enum:
          - VALID
          - INVALID
          - VALIDATING
          readOnly: true
    RemoteProcessGroupStatusEntity:
      type: object
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        remoteProcessGroupStatus:
          $ref: "#/components/schemas/RemoteProcessGroupStatusDTO"
      xml:
        name: remoteProcessGroupStatusEntity
    RemoteProcessGroupStatusSnapshotDTO:
      type: object
      description: The remote process group status snapshot from the node.
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The number of active threads for the remote process group.
        bytesReceived:
          type: integer
          format: int64
          description: The size of the FlowFiles received from the remote process
            group in the last 5 minutes.
        bytesSent:
          type: integer
          format: int64
          description: The size of the FlowFiles sent to the remote process group
            in the last 5 minutes.
        flowFilesReceived:
          type: integer
          format: int32
          description: The number of FlowFiles received from the remote process group
            in the last 5 minutes.
        flowFilesSent:
          type: integer
          format: int32
          description: The number of FlowFiles sent to the remote process group in
            the last 5 minutes.
        groupId:
          type: string
          description: The id of the parent process group the remote process group
            resides in.
        id:
          type: string
          description: The id of the remote process group.
        name:
          type: string
          description: The name of the remote process group.
        received:
          type: string
          description: The count/size of the flowfiles received from the remote process
            group in the last 5 minutes.
        sent:
          type: string
          description: The count/size of the flowfiles sent to the remote process
            group in the last 5 minutes.
        targetUri:
          type: string
          description: The URI of the target system.
        transmissionStatus:
          type: string
          description: The transmission status of the remote process group.
    RemoteProcessGroupStatusSnapshotEntity:
      type: object
      description: The status of all remote process groups in the process group.
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        id:
          type: string
          description: The id of the remote process group.
        remoteProcessGroupStatusSnapshot:
          $ref: "#/components/schemas/RemoteProcessGroupStatusSnapshotDTO"
      xml:
        name: entity
    RemoteProcessGroupsEntity:
      type: object
      properties:
        remoteProcessGroups:
          type: array
          items:
            $ref: "#/components/schemas/RemoteProcessGroupEntity"
          uniqueItems: true
      xml:
        name: remoteProcessGroupsEntity
    ReplayLastEventRequestEntity:
      type: object
      properties:
        componentId:
          type: string
          description: The UUID of the component whose last event should be replayed.
        nodes:
          type: string
          description: Which nodes are to replay their last provenance event.
          enum:
          - ALL
          - PRIMARY
      xml:
        name: replayLastEventRequestEntity
    ReplayLastEventResponseEntity:
      type: object
      properties:
        aggregateSnapshot:
          $ref: "#/components/schemas/ReplayLastEventSnapshotDTO"
        componentId:
          type: string
          description: The UUID of the component whose last event should be replayed.
        nodeSnapshots:
          type: array
          description: The node-wise results
          items:
            $ref: "#/components/schemas/NodeReplayLastEventSnapshotDTO"
        nodes:
          type: string
          description: Which nodes were requested to replay their last provenance
            event.
          enum:
          - ALL
          - PRIMARY
      xml:
        name: replayLastEventResponseEntity
    ReplayLastEventSnapshotDTO:
      type: object
      description: The snapshot from the node
      properties:
        eventAvailable:
          type: boolean
          description: Whether or not an event was available. This may not be populated
            if there was a failure.
        eventsReplayed:
          type: array
          description: The IDs of the events that were successfully replayed
          items:
            type: integer
            format: int64
            description: The IDs of the events that were successfully replayed
        failureExplanation:
          type: string
          description: "If unable to replay an event, specifies why the event could\
            \ not be replayed"
      xml:
        name: replayLastEventSnapshot
    ReportingTaskDTO:
      type: object
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The number of active threads for the reporting task.
        annotationData:
          type: string
          description: The annotation data for the repoting task. This is how the
            custom UI relays configuration to the reporting task.
        bundle:
          $ref: "#/components/schemas/BundleDTO"
        comments:
          type: string
          description: The comments of the reporting task.
        customUiUrl:
          type: string
          description: The URL for the custom configuration UI for the reporting task.
        defaultSchedulingPeriod:
          type: object
          additionalProperties:
            type: string
            description: The default scheduling period for the different scheduling
              strategies.
          description: The default scheduling period for the different scheduling
            strategies.
        deprecated:
          type: boolean
          description: Whether the reporting task has been deprecated.
        descriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptorDTO"
          description: The descriptors for the reporting tasks properties.
        extensionMissing:
          type: boolean
          description: Whether the underlying extension is missing.
        id:
          type: string
          description: The id of the component.
        multipleVersionsAvailable:
          type: boolean
          description: Whether the reporting task has multiple versions available.
        name:
          type: string
          description: The name of the reporting task.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        persistsState:
          type: boolean
          description: Whether the reporting task persists state.
        position:
          $ref: "#/components/schemas/PositionDTO"
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties of the reporting task.
          description: The properties of the reporting task.
        restricted:
          type: boolean
          description: Whether the reporting task requires elevated privileges.
        schedulingPeriod:
          type: string
          description: The frequency with which to schedule the reporting task. The
            format of the value will depend on the value of the schedulingStrategy.
        schedulingStrategy:
          type: string
          description: The scheduling strategy that determines how the schedulingPeriod
            value should be interpreted.
        sensitiveDynamicPropertyNames:
          type: array
          description: Set of sensitive dynamic property names
          items:
            type: string
            description: Set of sensitive dynamic property names
          uniqueItems: true
        state:
          type: string
          description: The state of the reporting task.
          enum:
          - RUNNING
          - STOPPED
          - DISABLED
        supportsSensitiveDynamicProperties:
          type: boolean
          description: Whether the reporting task supports sensitive dynamic properties.
        type:
          type: string
          description: The fully qualified type of the reporting task.
        validationErrors:
          type: array
          description: Gets the validation errors from the reporting task. These validation
            errors represent the problems with the reporting task that must be resolved
            before it can be scheduled to run.
          items:
            type: string
            description: Gets the validation errors from the reporting task. These
              validation errors represent the problems with the reporting task that
              must be resolved before it can be scheduled to run.
        validationStatus:
          type: string
          description: "Indicates whether the Reporting Task is valid, invalid, or\
            \ still in the process of validating (i.e., it is unknown whether or not\
            \ the Reporting Task is valid)"
          enum:
          - VALID
          - INVALID
          - VALIDATING
          readOnly: true
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    ReportingTaskDefinition:
      type: object
      description: Reporting Tasks provided in this bundle
      properties:
        additionalDetails:
          type: boolean
          description: Indicates if the component has additional details documentation
        artifact:
          type: string
          description: The artifact name of the bundle that provides the referenced
            type.
        buildInfo:
          $ref: "#/components/schemas/BuildInfo"
        defaultSchedulingPeriodBySchedulingStrategy:
          type: object
          additionalProperties:
            type: string
            description: "The default scheduling period for each scheduling strategy.\
              \ The scheduling period is expected to be a time period, such as \"\
              30 sec\"."
          description: "The default scheduling period for each scheduling strategy.\
            \ The scheduling period is expected to be a time period, such as \"30\
            \ sec\"."
        defaultSchedulingStrategy:
          type: string
          description: The default scheduling strategy for the reporting task.
        deprecated:
          type: boolean
          description: Whether or not the component has been deprecated
        deprecationAlternatives:
          type: array
          description: "If this component has been deprecated, this optional field\
            \ provides alternatives to use"
          items:
            type: string
            description: "If this component has been deprecated, this optional field\
              \ provides alternatives to use"
          uniqueItems: true
        deprecationReason:
          type: string
          description: "If this component has been deprecated, this optional field\
            \ can be used to provide an explanation"
        dynamicProperties:
          type: array
          description: Describes the dynamic properties supported by this component
          items:
            $ref: "#/components/schemas/DynamicProperty"
        explicitRestrictions:
          type: array
          description: Explicit restrictions that indicate a require permission to
            use the component
          items:
            $ref: "#/components/schemas/Restriction"
          uniqueItems: true
        group:
          type: string
          description: The group name of the bundle that provides the referenced type.
        propertyDescriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDescriptor"
          description: Descriptions of configuration properties applicable to this
            component.
        providedApiImplementations:
          type: array
          description: "If this type represents a provider for an interface, this\
            \ lists the APIs it implements"
          items:
            $ref: "#/components/schemas/DefinedType"
        restricted:
          type: boolean
          description: Whether or not the component has a general restriction
        restrictedExplanation:
          type: string
          description: An optional description of the general restriction
        seeAlso:
          type: array
          description: The names of other component types that may be related
          items:
            type: string
            description: The names of other component types that may be related
          uniqueItems: true
        stateful:
          $ref: "#/components/schemas/Stateful"
        supportedSchedulingStrategies:
          type: array
          description: "The supported scheduling strategies, such as TIME_DRIVER or\
            \ CRON."
          items:
            type: string
            description: "The supported scheduling strategies, such as TIME_DRIVER\
              \ or CRON."
        supportsDynamicProperties:
          type: boolean
          description: Whether or not this component makes use of dynamic (user-set)
            properties.
        supportsSensitiveDynamicProperties:
          type: boolean
          description: Whether or not this component makes use of sensitive dynamic
            (user-set) properties.
        systemResourceConsiderations:
          type: array
          description: The system resource considerations for the given component
          items:
            $ref: "#/components/schemas/SystemResourceConsideration"
        tags:
          type: array
          description: The tags associated with this type
          items:
            type: string
            description: The tags associated with this type
          uniqueItems: true
        type:
          type: string
          description: The fully-qualified class type
        typeDescription:
          type: string
          description: The description of the type.
        version:
          type: string
          description: The version of the bundle that provides the referenced type.
    ReportingTaskEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/ReportingTaskDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        operatePermissions:
          $ref: "#/components/schemas/PermissionsDTO"
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        status:
          $ref: "#/components/schemas/ReportingTaskStatusDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: reportingTaskEntity
    ReportingTaskRunStatusEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        state:
          type: string
          description: The run status of the ReportingTask.
          enum:
          - RUNNING
          - STOPPED
      xml:
        name: entity
    ReportingTaskStatusDTO:
      type: object
      description: The status for this ReportingTask.
      properties:
        activeThreadCount:
          type: integer
          format: int32
          description: The number of active threads for the component.
        runStatus:
          type: string
          description: The run status of this ReportingTask
          enum:
          - RUNNING
          - STOPPED
          - DISABLED
          readOnly: true
        validationStatus:
          type: string
          description: "Indicates whether the component is valid, invalid, or still\
            \ in the process of validating (i.e., it is unknown whether or not the\
            \ component is valid)"
          enum:
          - VALID
          - INVALID
          - VALIDATING
          readOnly: true
      readOnly: true
    ReportingTaskTypesEntity:
      type: object
      properties:
        reportingTaskTypes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentedTypeDTO"
          uniqueItems: true
      xml:
        name: reportingTaskTypesEntity
    ReportingTasksEntity:
      type: object
      properties:
        currentTime:
          type: string
          description: The current time on the system.
        reportingTasks:
          type: array
          items:
            $ref: "#/components/schemas/ReportingTaskEntity"
          uniqueItems: true
      xml:
        name: reportingTasksEntity
    RequiredPermissionDTO:
      type: object
      description: The required permission necessary for this restriction.
      properties:
        id:
          type: string
          description: The required sub-permission necessary for this restriction.
        label:
          type: string
          description: The label for the required sub-permission necessary for this
            restriction.
    ResourceClaimDetailsDTO:
      type: object
      properties:
        awaitingDestruction:
          type: boolean
          description: Whether or not the Resource Claim is awaiting destruction
        claimantCount:
          type: integer
          format: int32
          description: The number of FlowFiles that have a claim to the Resource
        container:
          type: string
          description: The container of the Content Repository in which the Resource
            Claim exists
        identifier:
          type: string
          description: The identifier of the Resource Claim
        inUse:
          type: boolean
          description: Whether or not the Resource Claim is in use
        section:
          type: string
          description: The section of the Content Repository in which the Resource
            Claim exists
        writable:
          type: boolean
          description: Whether or not the Resource Claim can still have more data
            written to it
    ResourceDTO:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the resource.
        name:
          type: string
          description: The name of the resource.
    ResourcesEntity:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: "#/components/schemas/ResourceDTO"
      xml:
        name: resourcesEntity
    Restriction:
      type: object
      description: Explicit restrictions that indicate a require permission to use
        the component
      properties:
        explanation:
          type: string
          description: The explanation of this restriction
        requiredPermission:
          type: string
          description: The permission required for this restriction
    RevisionDTO:
      type: object
      description: The revision of the Process Group
      properties:
        clientId:
          type: string
          description: |
            A client identifier used to make a request.
            By including a client identifier, the API can allow multiple requests without needing the current revision.
            Due to the asynchronous nature of requests/responses this was implemented to allow the client to make numerous requests without having to wait for the previous response to come back
        lastModifier:
          type: string
          description: The user that last modified the flow.
          readOnly: true
        version:
          type: integer
          format: int64
          description: |
            NiFi employs an optimistic locking strategy where the client must include a revision in their request when performing an update.
            In a response to a mutable flow request, this field represents the updated base version.
    RunStatusDetailsRequestEntity:
      type: object
      properties:
        processorIds:
          type: array
          description: The IDs of all processors whose run status details should be
            provided
          items:
            type: string
            description: The IDs of all processors whose run status details should
              be provided
          uniqueItems: true
      xml:
        name: runStatusDetailsRequest
    RuntimeManifest:
      type: object
      properties:
        agentType:
          type: string
          description: "The type of the runtime binary, e.g., 'minifi-java' or 'minifi-cpp'"
        buildInfo:
          $ref: "#/components/schemas/BuildInfo"
        bundles:
          type: array
          description: All extension bundles included with this runtime
          items:
            $ref: "#/components/schemas/Bundle"
        identifier:
          type: string
          description: A unique identifier for the manifest
        schedulingDefaults:
          $ref: "#/components/schemas/SchedulingDefaults"
        version:
          type: string
          description: "The version of the runtime binary, e.g., '1.0.1'"
    RuntimeManifestEntity:
      type: object
      properties:
        runtimeManifest:
          $ref: "#/components/schemas/RuntimeManifest"
      xml:
        name: runtimeManifestEntity
    ScheduleComponentsEntity:
      type: object
      properties:
        components:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: "Optional components to schedule. If not specified, all authorized\
            \ descendant components will be used."
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the ProcessGroup
        state:
          type: string
          description: The desired state of the descendant components
          enum:
          - RUNNING
          - STOPPED
          - ENABLED
          - DISABLED
      xml:
        name: scheduleComponentEntity
    SchedulingDefaults:
      type: object
      description: Scheduling defaults for components defined in this manifest
      properties:
        defaultConcurrentTasksBySchedulingStrategy:
          type: object
          additionalProperties:
            type: integer
            format: int32
            description: The default concurrent tasks for each scheduling strategy
          description: The default concurrent tasks for each scheduling strategy
        defaultMaxConcurrentTasks:
          type: string
          description: The default concurrent tasks
        defaultRunDurationNanos:
          type: integer
          format: int64
          description: The default run duration in nano-seconds
        defaultSchedulingPeriodMillis:
          type: integer
          format: int64
          description: The default scheduling period in milliseconds
        defaultSchedulingPeriodsBySchedulingStrategy:
          type: object
          additionalProperties:
            type: string
            description: The default scheduling period for each scheduling strategy
          description: The default scheduling period for each scheduling strategy
        defaultSchedulingStrategy:
          type: string
          description: The name of the default scheduling strategy
          enum:
          - TIMER_DRIVEN
          - CRON_DRIVEN
        penalizationPeriodMillis:
          type: integer
          format: int64
          description: The default penalization period in milliseconds
        yieldDurationMillis:
          type: integer
          format: int64
          description: The default yield duration in milliseconds
    SearchResultGroupDTO:
      type: object
      description: The nearest versioned ancestor group of the component that matched
        the search.
      properties:
        id:
          type: string
          description: The id of the group.
        name:
          type: string
          description: The name of the group.
      required:
      - id
    SearchResultsDTO:
      type: object
      properties:
        connectionResults:
          type: array
          description: The connections that matched the search.
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        controllerServiceNodeResults:
          type: array
          description: The controller service nodes that matched the search
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        funnelResults:
          type: array
          description: The funnels that matched the search.
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        inputPortResults:
          type: array
          description: The input ports that matched the search.
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        labelResults:
          type: array
          description: The labels that matched the search.
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        outputPortResults:
          type: array
          description: The output ports that matched the search.
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        parameterContextResults:
          type: array
          description: The parameter contexts that matched the search.
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        parameterProviderNodeResults:
          type: array
          description: The parameter provider nodes that matched the search
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        parameterResults:
          type: array
          description: The parameters that matched the search.
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        processGroupResults:
          type: array
          description: The process groups that matched the search.
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        processorResults:
          type: array
          description: The processors that matched the search.
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
        remoteProcessGroupResults:
          type: array
          description: The remote process groups that matched the search.
          items:
            $ref: "#/components/schemas/ComponentSearchResultDTO"
    SearchResultsEntity:
      type: object
      properties:
        searchResultsDTO:
          $ref: "#/components/schemas/SearchResultsDTO"
      xml:
        name: searchResultsEntity
    SnippetDTO:
      type: object
      description: The snippet.
      properties:
        connections:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: "The ids of the connections in this snippet. These ids will\
            \ be populated within each response. They can be specified when creating\
            \ a snippet. However, once a snippet has been created its contents cannot\
            \ be modified (these ids are ignored during update requests)."
        funnels:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: "The ids of the funnels in this snippet. These ids will be\
            \ populated within each response. They can be specified when creating\
            \ a snippet. However, once a snippet has been created its contents cannot\
            \ be modified (these ids are ignored during update requests)."
        id:
          type: string
          description: The id of the snippet.
        inputPorts:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: "The ids of the input ports in this snippet. These ids will\
            \ be populated within each response. They can be specified when creating\
            \ a snippet. However, once a snippet has been created its contents cannot\
            \ be modified (these ids are ignored during update requests)."
        labels:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: "The ids of the labels in this snippet. These ids will be populated\
            \ within each response. They can be specified when creating a snippet.\
            \ However, once a snippet has been created its contents cannot be modified\
            \ (these ids are ignored during update requests)."
        outputPorts:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: "The ids of the output ports in this snippet. These ids will\
            \ be populated within each response. They can be specified when creating\
            \ a snippet. However, once a snippet has been created its contents cannot\
            \ be modified (these ids are ignored during update requests)."
        parentGroupId:
          type: string
          description: The group id for the components in the snippet.
        processGroups:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: "The ids of the process groups in this snippet. These ids will\
            \ be populated within each response. They can be specified when creating\
            \ a snippet. However, once a snippet has been created its contents cannot\
            \ be modified (these ids are ignored during update requests)."
        processors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: "The ids of the processors in this snippet. These ids will\
            \ be populated within each response. They can be specified when creating\
            \ a snippet. However, once a snippet has been created its contents cannot\
            \ be modified (these ids are ignored during update requests)."
        remoteProcessGroups:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: |
            The ids of the remote process groups in this snippet.
            These ids will be populated within each response.
            They can be specified when creating a snippet.
            However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
        uri:
          type: string
          description: The URI of the snippet.
    SnippetEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        snippet:
          $ref: "#/components/schemas/SnippetDTO"
      xml:
        name: snippetEntity
    StartVersionControlRequestEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        processGroupRevision:
          $ref: "#/components/schemas/RevisionDTO"
        versionedFlow:
          $ref: "#/components/schemas/VersionedFlowDTO"
      xml:
        name: startVersionControlRequestEntity
    StateEntryDTO:
      type: object
      description: The state.
      properties:
        clusterNodeAddress:
          type: string
          description: The label for the node where the state originated.
        clusterNodeId:
          type: string
          description: The identifier for the node where the state originated.
        key:
          type: string
          description: The key for this state.
        value:
          type: string
          description: The value for this state.
    StateMapDTO:
      type: object
      description: The local state for this component.
      properties:
        scope:
          type: string
          description: The scope of this StateMap.
        state:
          type: array
          description: The state.
          items:
            $ref: "#/components/schemas/StateEntryDTO"
        totalEntryCount:
          type: integer
          format: int32
          description: "The total number of state entries. When the state map is lengthy,\
            \ only of portion of the entries are returned."
    Stateful:
      type: object
      description: Indicates if the component stores state
      properties:
        description:
          type: string
          description: Description of what information is being stored in the StateManager
        scopes:
          type: array
          description: Indicates the Scope(s) associated with the State that is stored
            and retrieved
          items:
            type: string
            description: Indicates the Scope(s) associated with the State that is
              stored and retrieved
            enum:
            - CLUSTER
            - LOCAL
          uniqueItems: true
    StatusDescriptorDTO:
      type: object
      description: The Descriptors that provide information on each of the metrics
        provided in the status history
      properties:
        description:
          type: string
          description: The description of the status field.
        field:
          type: string
          description: The name of the status field.
        formatter:
          type: string
          description: The formatter for the status descriptor.
        label:
          type: string
          description: The label for the status field.
    StatusHistoryDTO:
      type: object
      properties:
        aggregateSnapshots:
          type: array
          description: "A list of StatusSnapshotDTO objects that provide the actual\
            \ metric values for the component. If the NiFi instance is clustered,\
            \ this will represent the aggregate status across all nodes. If the NiFi\
            \ instance is not clustered, this will represent the status of the entire\
            \ NiFi instance."
          items:
            $ref: "#/components/schemas/StatusSnapshotDTO"
        componentDetails:
          type: object
          additionalProperties:
            type: string
            description: A Map of key/value pairs that describe the component that
              the status history belongs to
          description: A Map of key/value pairs that describe the component that the
            status history belongs to
        fieldDescriptors:
          type: array
          description: The Descriptors that provide information on each of the metrics
            provided in the status history
          items:
            $ref: "#/components/schemas/StatusDescriptorDTO"
        generated:
          type: string
          description: When the status history was generated.
        nodeSnapshots:
          type: array
          description: "The NodeStatusSnapshotsDTO objects that provide the actual\
            \ metric values for the component, for each node. If the NiFi instance\
            \ is not clustered, this value will be null."
          items:
            $ref: "#/components/schemas/NodeStatusSnapshotsDTO"
    StatusHistoryEntity:
      type: object
      properties:
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        statusHistory:
          $ref: "#/components/schemas/StatusHistoryDTO"
      xml:
        name: statusHistoryEntity
    StatusSnapshotDTO:
      type: object
      description: A list of StatusSnapshotDTO objects that provide the actual metric
        values for the component for this node.
      properties:
        statusMetrics:
          type: object
          additionalProperties:
            type: integer
            format: int64
            description: The status metrics.
          description: The status metrics.
        timestamp:
          type: string
          format: date-time
          description: The timestamp of the snapshot.
    StorageUsageDTO:
      type: object
      description: The provenance repository storage usage.
      properties:
        freeSpace:
          type: string
          description: Amount of free space.
        freeSpaceBytes:
          type: integer
          format: int64
          description: The number of bytes of free space.
        identifier:
          type: string
          description: The identifier of this storage location. The identifier will
            correspond to the identifier keyed in the storage configuration.
        totalSpace:
          type: string
          description: Amount of total space.
        totalSpaceBytes:
          type: integer
          format: int64
          description: The number of bytes of total space.
        usedSpace:
          type: string
          description: Amount of used space.
        usedSpaceBytes:
          type: integer
          format: int64
          description: The number of bytes of used space.
        utilization:
          type: string
          description: Utilization of this storage location.
    StreamingOutput:
      type: object
    SubmitReplayRequestEntity:
      type: object
      properties:
        clusterNodeId:
          type: string
          description: The identifier of the node where to submit the replay request.
        eventId:
          type: integer
          format: int64
          description: The event identifier
      xml:
        name: copySnippetRequestEntity
    SupportedMimeTypesDTO:
      type: object
      description: The mime types this Content Viewer supports.
      properties:
        displayName:
          type: string
          description: The display name of the mime types.
          readOnly: true
        mimeTypes:
          type: array
          description: The mime types this Content Viewer supports.
          items:
            type: string
            description: The mime types this Content Viewer supports.
            readOnly: true
          readOnly: true
      readOnly: true
    SystemDiagnosticsDTO:
      type: object
      properties:
        aggregateSnapshot:
          $ref: "#/components/schemas/SystemDiagnosticsSnapshotDTO"
        nodeSnapshots:
          type: array
          description: "A systems diagnostics snapshot for each node in the cluster.\
            \ If the NiFi instance is a standalone instance, rather than a cluster,\
            \ this may be null."
          items:
            $ref: "#/components/schemas/NodeSystemDiagnosticsSnapshotDTO"
    SystemDiagnosticsEntity:
      type: object
      properties:
        systemDiagnostics:
          $ref: "#/components/schemas/SystemDiagnosticsDTO"
      xml:
        name: systemDiagnosticsEntity
    SystemDiagnosticsSnapshotDTO:
      type: object
      description: The System Diagnostics snapshot from the node.
      properties:
        availableProcessors:
          type: integer
          format: int32
          description: Number of available processors if supported by the underlying
            system.
        contentRepositoryStorageUsage:
          type: array
          description: The content repository storage usage.
          items:
            $ref: "#/components/schemas/StorageUsageDTO"
          uniqueItems: true
        daemonThreads:
          type: integer
          format: int32
          description: Number of daemon threads.
        flowFileRepositoryStorageUsage:
          $ref: "#/components/schemas/StorageUsageDTO"
        freeHeap:
          type: string
          description: Amount of free heap.
        freeHeapBytes:
          type: integer
          format: int64
          description: The number of bytes that are allocated to the JVM heap but
            not currently being used
        freeNonHeap:
          type: string
          description: Amount of free non heap.
        freeNonHeapBytes:
          type: integer
          format: int64
          description: Total number of free non-heap bytes available to the JVM
        garbageCollection:
          type: array
          description: The garbage collection details.
          items:
            $ref: "#/components/schemas/GarbageCollectionDTO"
          uniqueItems: true
        heapUtilization:
          type: string
          description: Utilization of heap.
        maxHeap:
          type: string
          description: Maximum size of heap.
        maxHeapBytes:
          type: integer
          format: int64
          description: The maximum number of bytes that can be used by the JVM
        maxNonHeap:
          type: string
          description: Maximum size of non heap.
        maxNonHeapBytes:
          type: integer
          format: int64
          description: The maximum number of bytes that the JVM can use for non-heap
            purposes
        nonHeapUtilization:
          type: string
          description: Utilization of non heap.
        processorLoadAverage:
          type: number
          format: double
          description: The processor load average if supported by the underlying system.
        provenanceRepositoryStorageUsage:
          type: array
          description: The provenance repository storage usage.
          items:
            $ref: "#/components/schemas/StorageUsageDTO"
          uniqueItems: true
        resourceClaimDetails:
          type: array
          items:
            $ref: "#/components/schemas/ResourceClaimDetailsDTO"
        statsLastRefreshed:
          type: string
          description: When the diagnostics were generated.
        totalHeap:
          type: string
          description: Total size of heap.
        totalHeapBytes:
          type: integer
          format: int64
          description: The total number of bytes that are available for the JVM heap
            to use
        totalNonHeap:
          type: string
          description: Total size of non heap.
        totalNonHeapBytes:
          type: integer
          format: int64
          description: Total number of bytes allocated to the JVM not used for heap
        totalThreads:
          type: integer
          format: int32
          description: Total number of threads.
        uptime:
          type: string
          description: The uptime of the Java virtual machine
        usedHeap:
          type: string
          description: Amount of used heap.
        usedHeapBytes:
          type: integer
          format: int64
          description: The number of bytes of JVM heap that are currently being used
        usedNonHeap:
          type: string
          description: Amount of use non heap.
        usedNonHeapBytes:
          type: integer
          format: int64
          description: Total number of bytes used by the JVM not in the heap space
        versionInfo:
          $ref: "#/components/schemas/VersionInfoDTO"
    SystemResourceConsideration:
      type: object
      description: The system resource considerations for the given component
      properties:
        description:
          type: string
          description: The description of how the resource is affected
        resource:
          type: string
          description: The resource to consider
    TenantDTO:
      type: object
      properties:
        configurable:
          type: boolean
          description: Whether this tenant is configurable.
        id:
          type: string
          description: The id of the component.
        identity:
          type: string
          description: The identity of the tenant.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    TenantEntity:
      type: object
      description: The set of user group IDs associated with this access policy.
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/TenantDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: tenantEntity
    TenantsEntity:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: "#/components/schemas/TenantEntity"
        users:
          type: array
          items:
            $ref: "#/components/schemas/TenantEntity"
      xml:
        name: tenantsEntity
    TransactionResultEntity:
      type: object
      properties:
        flowFileSent:
          type: integer
          format: int32
        message:
          type: string
        responseCode:
          type: integer
          format: int32
      xml:
        name: transactionResultEntity
    UpdateControllerServiceReferenceRequestEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The identifier of the Controller Service.
        referencingComponentRevisions:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RevisionDTO"
          description: The revisions for all referencing components.
        state:
          type: string
          description: The new state of the references for the controller service.
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
          - STOPPED
        uiOnly:
          type: boolean
          description: |
            Indicates whether or not the response should only include fields necessary for rendering the NiFi User Interface.
            As such, when this value is set to true, some fields may be returned as null values, and the selected fields may change at any time without notice.
            As a result, this value should not be set to true by any client other than the UI.
      xml:
        name: updateControllerServiceReferenceRequestEntity
    UseCase:
      type: object
      description: A list of use cases that have been documented for this Processor
      properties:
        configuration:
          type: string
          description: A description of how to configure the Processor to perform
            the task described in the use case
        description:
          type: string
          description: A description of the use case
        inputRequirement:
          type: string
          description: Specifies whether an incoming FlowFile is expected for this
            use case
          enum:
          - INPUT_REQUIRED
          - INPUT_ALLOWED
          - INPUT_FORBIDDEN
        keywords:
          type: array
          description: Keywords that pertain to the use case
          items:
            type: string
            description: Keywords that pertain to the use case
        notes:
          type: string
          description: Any pertinent notes about the use case
    UserDTO:
      type: object
      properties:
        accessPolicies:
          type: array
          description: The access policies this user belongs to.
          items:
            $ref: "#/components/schemas/AccessPolicySummaryEntity"
          readOnly: true
          uniqueItems: true
        configurable:
          type: boolean
          description: Whether this tenant is configurable.
        id:
          type: string
          description: The id of the component.
        identity:
          type: string
          description: The identity of the tenant.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        userGroups:
          type: array
          description: The groups to which the user belongs. This field is read only
            and it provided for convenience.
          items:
            $ref: "#/components/schemas/TenantEntity"
          readOnly: true
          uniqueItems: true
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    UserEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/UserDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: userEntity
    UserGroupDTO:
      type: object
      properties:
        accessPolicies:
          type: array
          description: "The access policies this user group belongs to. This field\
            \ was incorrectly defined as an AccessPolicyEntity. For compatibility\
            \ reasons the field will remain of this type, however only the fields\
            \ that are present in the AccessPolicySummaryEntity will be populated\
            \ here."
          items:
            $ref: "#/components/schemas/AccessPolicyEntity"
          readOnly: true
          uniqueItems: true
        configurable:
          type: boolean
          description: Whether this tenant is configurable.
        id:
          type: string
          description: The id of the component.
        identity:
          type: string
          description: The identity of the tenant.
        parentGroupId:
          type: string
          description: The id of parent process group of this component if applicable.
        position:
          $ref: "#/components/schemas/PositionDTO"
        users:
          type: array
          description: The users that belong to the user group.
          items:
            $ref: "#/components/schemas/TenantEntity"
          uniqueItems: true
        versionedComponentId:
          type: string
          description: The ID of the corresponding component that is under version
            control
    UserGroupEntity:
      type: object
      properties:
        bulletins:
          type: array
          description: The bulletins for this component.
          items:
            $ref: "#/components/schemas/BulletinEntity"
        component:
          $ref: "#/components/schemas/UserGroupDTO"
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        id:
          type: string
          description: The id of the component.
        permissions:
          $ref: "#/components/schemas/PermissionsDTO"
        position:
          $ref: "#/components/schemas/PositionDTO"
        revision:
          $ref: "#/components/schemas/RevisionDTO"
        uri:
          type: string
          description: The URI for futures requests to the component.
      xml:
        name: userGroupEntity
    UserGroupsEntity:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: "#/components/schemas/UserGroupEntity"
      xml:
        name: userGroupsEntity
    UsersEntity:
      type: object
      properties:
        generated:
          type: string
          description: When this content was generated.
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserEntity"
      xml:
        name: usersEntity
    VerifyConfigRequestDTO:
      type: object
      description: The request
      properties:
        attributes:
          type: object
          additionalProperties:
            type: string
            description: FlowFile Attributes that should be used to evaluate Expression
              Language for resolving property values
          description: FlowFile Attributes that should be used to evaluate Expression
            Language for resolving property values
        complete:
          type: boolean
          description: Whether or not the request is completed
          readOnly: true
        componentId:
          type: string
          description: The ID of the component whose configuration was verified
        failureReason:
          type: string
          description: "The reason for the request failing, or null if the request\
            \ has not failed"
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          description: The timestamp of when the request was last updated
          readOnly: true
        percentCompleted:
          type: integer
          format: int32
          description: A value between 0 and 100 (inclusive) indicating how close
            the request is to completion
          readOnly: true
        properties:
          type: object
          additionalProperties:
            type: string
            description: The configured component properties
          description: The configured component properties
        requestId:
          type: string
          description: The ID of the request
          readOnly: true
        results:
          type: array
          description: The Results of the verification
          items:
            $ref: "#/components/schemas/ConfigVerificationResultDTO"
          readOnly: true
        state:
          type: string
          description: A description of the current state of the request
          readOnly: true
        submissionTime:
          type: string
          format: date-time
          description: The timestamp of when the request was submitted
          readOnly: true
        updateSteps:
          type: array
          description: "The steps that are required in order to complete the request,\
            \ along with the status of each"
          items:
            $ref: "#/components/schemas/VerifyConfigUpdateStepDTO"
          readOnly: true
        uri:
          type: string
          description: The URI for the request
          readOnly: true
    VerifyConfigRequestEntity:
      type: object
      properties:
        request:
          $ref: "#/components/schemas/VerifyConfigRequestDTO"
      xml:
        name: verifyConfigRequest
    VerifyConfigUpdateStepDTO:
      type: object
      description: "The steps that are required in order to complete the request,\
        \ along with the status of each"
      properties:
        complete:
          type: boolean
          description: Whether or not this step has completed
          readOnly: true
        description:
          type: string
          description: Explanation of what happens in this step
          readOnly: true
        failureReason:
          type: string
          description: "An explanation of why this step failed, or null if this step\
            \ did not fail"
          readOnly: true
      readOnly: true
    VersionControlComponentMappingEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        processGroupRevision:
          $ref: "#/components/schemas/RevisionDTO"
        versionControlComponentMapping:
          type: object
          additionalProperties:
            type: string
            description: The mapping of Versioned Component Identifiers to instance
              ID's
          description: The mapping of Versioned Component Identifiers to instance
            ID's
        versionControlInformation:
          $ref: "#/components/schemas/VersionControlInformationDTO"
      xml:
        name: versionControlComponentMappingEntity
    VersionControlInformationDTO:
      type: object
      description: The Version Control information
      properties:
        branch:
          type: string
          description: The ID of the branch that the flow is stored in
        bucketId:
          type: string
          description: The ID of the bucket that the flow is stored in
        bucketName:
          type: string
          description: The name of the bucket that the flow is stored in
          readOnly: true
        flowDescription:
          type: string
          description: The description of the flow
        flowId:
          type: string
          description: The ID of the flow
        flowName:
          type: string
          description: The name of the flow
        groupId:
          type: string
          description: The ID of the Process Group that is under version control
        registryId:
          type: string
          description: The ID of the registry that the flow is stored in
        registryName:
          type: string
          description: The name of the registry that the flow is stored in
          readOnly: true
        state:
          type: string
          description: "The current state of the Process Group, as it relates to the\
            \ Versioned Flow"
          enum:
          - LOCALLY_MODIFIED
          - STALE
          - LOCALLY_MODIFIED_AND_STALE
          - UP_TO_DATE
          - SYNC_FAILURE
          readOnly: true
        stateExplanation:
          type: string
          description: Explanation of why the group is in the specified state
          readOnly: true
        storageLocation:
          type: string
          description: The storage location
        version:
          type: string
          description: The version of the flow
    VersionControlInformationEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        processGroupRevision:
          $ref: "#/components/schemas/RevisionDTO"
        versionControlInformation:
          $ref: "#/components/schemas/VersionControlInformationDTO"
      xml:
        name: versionControlInformationEntity
    VersionInfoDTO:
      type: object
      description: "The nifi, os, java, and build version information"
      properties:
        buildBranch:
          type: string
          description: Build branch
        buildRevision:
          type: string
          description: Build revision or commit hash
        buildTag:
          type: string
          description: Build tag
        buildTimestamp:
          type: string
          format: date-time
          description: Build timestamp
        javaVendor:
          type: string
          description: Java JVM vendor
        javaVersion:
          type: string
          description: Java version
        niFiVersion:
          type: string
          description: The version of this NiFi.
        osArchitecture:
          type: string
          description: Host operating system architecture
        osName:
          type: string
          description: Host operating system name
        osVersion:
          type: string
          description: Host operating system version
    VersionedAsset:
      type: object
      description: The assets that are referenced by this parameter
      properties:
        identifier:
          type: string
          description: The identifier of the asset
        name:
          type: string
          description: The name of the asset
    VersionedConnection:
      type: object
      description: The Connections
      properties:
        backPressureDataSizeThreshold:
          type: string
          description: The object data size threshold for determining when back pressure
            is applied. Updating this value is a passive change in the sense that
            it won't impact whether existing files over the limit are affected but
            it does help feeder processors to stop pushing too much into this work
            queue.
        backPressureObjectThreshold:
          type: integer
          format: int64
          description: The object count threshold for determining when back pressure
            is applied. Updating this value is a passive change in the sense that
            it won't impact whether existing files over the limit are affected but
            it does help feeder processors to stop pushing too much into this work
            queue.
        bends:
          type: array
          description: The bend points on the connection.
          items:
            $ref: "#/components/schemas/Position"
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        destination:
          $ref: "#/components/schemas/ConnectableComponent"
        flowFileExpiration:
          type: string
          description: The amount of time a flow file may be in the flow before it
            will be automatically aged out of the flow. Once a flow file reaches this
            age it will be terminated from the flow the next time a processor attempts
            to start work on it.
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        labelIndex:
          type: integer
          format: int32
          description: The index of the bend point where to place the connection label.
        loadBalanceCompression:
          type: string
          description: Whether or not compression should be used when transferring
            FlowFiles between nodes
          enum:
          - "DO_NOT_COMPRESS, COMPRESS_ATTRIBUTES_ONLY, COMPRESS_ATTRIBUTES_AND_CONTENT"
        loadBalanceStrategy:
          type: string
          description: "The Strategy to use for load balancing data across the cluster,\
            \ or null, if no Load Balance Strategy has been specified."
          enum:
          - "DO_NOT_LOAD_BALANCE, PARTITION_BY_ATTRIBUTE, ROUND_ROBIN, SINGLE_NODE"
        name:
          type: string
          description: The component's name
        partitioningAttribute:
          type: string
          description: "The attribute to use for partitioning data as it is load balanced\
            \ across the cluster. If the Load Balance Strategy is configured to use\
            \ PARTITION_BY_ATTRIBUTE, the value returned by this method is the name\
            \ of the FlowFile Attribute that will be used to determine which node\
            \ in the cluster should receive a given FlowFile. If the Load Balance\
            \ Strategy is unset or is set to any other value, the Partitioning Attribute\
            \ has no effect."
        position:
          $ref: "#/components/schemas/Position"
        prioritizers:
          type: array
          description: The comparators used to prioritize the queue.
          items:
            type: string
            description: The comparators used to prioritize the queue.
        selectedRelationships:
          type: array
          description: The selected relationship that comprise the connection.
          items:
            type: string
            description: The selected relationship that comprise the connection.
          uniqueItems: true
        source:
          $ref: "#/components/schemas/ConnectableComponent"
        zIndex:
          type: integer
          format: int64
          description: The z index of the connection.
    VersionedControllerService:
      type: object
      description: The Controller Services
      properties:
        annotationData:
          type: string
          description: The annotation for the controller service. This is how the
            custom UI relays configuration to the controller service.
        bulletinLevel:
          type: string
          description: The level at which the controller service will report bulletins.
        bundle:
          $ref: "#/components/schemas/Bundle"
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        controllerServiceApis:
          type: array
          description: Lists the APIs this Controller Service implements.
          items:
            $ref: "#/components/schemas/ControllerServiceAPI"
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        position:
          $ref: "#/components/schemas/Position"
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties for the component. Properties whose value
              is not set will only contain the property name.
          description: The properties for the component. Properties whose value is
            not set will only contain the property name.
        propertyDescriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/VersionedPropertyDescriptor"
          description: The property descriptors for the component.
        scheduledState:
          type: string
          description: The ScheduledState denoting whether the Controller Service
            is ENABLED or DISABLED
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        type:
          type: string
          description: The type of the extension component
    VersionedFlowCoordinates:
      type: object
      description: "The coordinates where the remote flow is stored, or null if the\
        \ Process Group is not directly under Version Control"
      properties:
        branch:
          type: string
          description: The name of the branch that the flow resides in
        bucketId:
          type: string
          description: The UUID of the bucket that the flow resides in
        flowId:
          type: string
          description: The UUID of the flow
        latest:
          type: boolean
          description: Whether or not these coordinates point to the latest version
            of the flow
        registryId:
          type: string
          description: The identifier of the Flow Registry that contains the flow
        storageLocation:
          type: string
          description: The location of the Flow Registry that stores the flow
        version:
          type: string
          description: The version of the flow
    VersionedFlowDTO:
      type: object
      description: The versioned flow
      properties:
        action:
          type: string
          description: The action being performed
          enum:
          - COMMIT
          - FORCE_COMMIT
        branch:
          type: string
          description: The branch where the flow is stored
        bucketId:
          type: string
          description: The ID of the bucket where the flow is stored
        comments:
          type: string
          description: Comments for the changeset
        description:
          type: string
          description: A description of the flow
        flowId:
          type: string
          description: The ID of the flow
        flowName:
          type: string
          description: The name of the flow
        registryId:
          type: string
          description: The ID of the registry that the flow is tracked to
    VersionedFlowEntity:
      type: object
      properties:
        versionedFlow:
          $ref: "#/components/schemas/VersionedFlowDTO"
      xml:
        name: versionedFlowEntity
    VersionedFlowSnapshotEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: Acknowledges that this node is disconnected to allow for mutable
            requests to proceed.
        processGroupRevision:
          $ref: "#/components/schemas/RevisionDTO"
        registryId:
          type: string
          description: The ID of the Registry that this flow belongs to
        updateDescendantVersionedFlows:
          type: boolean
          description: "If the Process Group to be updated has a child or descendant\
            \ Process Group that is also under Version Control, this specifies whether\
            \ or not the contents of that child/descendant Process Group should be\
            \ updated."
        versionedFlow:
          $ref: "#/components/schemas/RegisteredFlowSnapshot"
        versionedFlowSnapshot:
          $ref: "#/components/schemas/RegisteredFlowSnapshot"
      xml:
        name: versionedFlowSnapshotEntity
    VersionedFlowSnapshotMetadataEntity:
      type: object
      properties:
        registryId:
          type: string
          description: The ID of the Registry that this flow belongs to
        versionedFlowSnapshotMetadata:
          $ref: "#/components/schemas/RegisteredFlowSnapshotMetadata"
      xml:
        name: versionedFlowSnapshotMetadataEntity
    VersionedFlowSnapshotMetadataSetEntity:
      type: object
      properties:
        versionedFlowSnapshotMetadataSet:
          type: array
          items:
            $ref: "#/components/schemas/VersionedFlowSnapshotMetadataEntity"
          uniqueItems: true
      xml:
        name: versionedFlowSnapshotMetadataSetEntity
    VersionedFlowUpdateRequestDTO:
      type: object
      description: The Flow Update Request
      properties:
        complete:
          type: boolean
          description: Whether or not this request has completed
          readOnly: true
        failureReason:
          type: string
          description: "An explanation of why this request failed, or null if this\
            \ request has not failed"
          readOnly: true
        lastUpdated:
          type: string
          description: The last time this request was updated.
          readOnly: true
        percentCompleted:
          type: integer
          format: int32
          description: "The percentage complete for the request, between 0 and 100"
          readOnly: true
        processGroupId:
          type: string
          description: The unique ID of the Process Group being updated
        requestId:
          type: string
          description: The unique ID of this request.
          readOnly: true
        state:
          type: string
          description: The state of the request
          readOnly: true
        uri:
          type: string
          description: The URI for future requests to this drop request.
          readOnly: true
        versionControlInformation:
          $ref: "#/components/schemas/VersionControlInformationDTO"
    VersionedFlowUpdateRequestEntity:
      type: object
      properties:
        processGroupRevision:
          $ref: "#/components/schemas/RevisionDTO"
        request:
          $ref: "#/components/schemas/VersionedFlowUpdateRequestDTO"
      xml:
        name: registeredFlowUpdateRequestEntity
    VersionedFlowsEntity:
      type: object
      properties:
        versionedFlows:
          type: array
          items:
            $ref: "#/components/schemas/VersionedFlowEntity"
          uniqueItems: true
      xml:
        name: versionedFlowsEntity
    VersionedFunnel:
      type: object
      description: The Funnels
      properties:
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        position:
          $ref: "#/components/schemas/Position"
    VersionedLabel:
      type: object
      description: The Labels
      properties:
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        height:
          type: number
          format: double
          description: The height of the label in pixels when at a 1:1 scale.
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        label:
          type: string
          description: The text that appears in the label.
        name:
          type: string
          description: The component's name
        position:
          $ref: "#/components/schemas/Position"
        style:
          type: object
          additionalProperties:
            type: string
            description: "The styles for this label (font-size : 12px, background-color\
              \ : #eee, etc)."
          description: "The styles for this label (font-size : 12px, background-color\
            \ : #eee, etc)."
        width:
          type: number
          format: double
          description: The width of the label in pixels when at a 1:1 scale.
        zIndex:
          type: integer
          format: int64
          description: The z index of the connection.
    VersionedParameter:
      type: object
      description: The parameters in the context
      properties:
        description:
          type: string
          description: The description of the param
        name:
          type: string
          description: The name of the parameter
        provided:
          type: boolean
          description: Whether or not the parameter value is provided by a ParameterProvider
        referencedAssets:
          type: array
          description: The assets that are referenced by this parameter
          items:
            $ref: "#/components/schemas/VersionedAsset"
        sensitive:
          type: boolean
          description: Whether or not the parameter value is sensitive
        value:
          type: string
          description: The value of the parameter
    VersionedParameterContext:
      type: object
      properties:
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        description:
          type: string
          description: The description of the parameter context
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        inheritedParameterContexts:
          type: array
          description: The names of additional parameter contexts from which to inherit
            parameters
          items:
            type: string
            description: The names of additional parameter contexts from which to
              inherit parameters
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        parameterGroupName:
          type: string
          description: "The corresponding parameter group name fetched from the parameter\
            \ provider, if applicable"
        parameterProvider:
          type: string
          description: The identifier of an optional parameter provider
        parameters:
          type: array
          description: The parameters in the context
          items:
            $ref: "#/components/schemas/VersionedParameter"
          uniqueItems: true
        position:
          $ref: "#/components/schemas/Position"
        synchronized:
          type: boolean
          description: True if the parameter provider is set and the context should
            receive updates when its parameters are next fetched
    VersionedPort:
      type: object
      description: The Output Ports
      properties:
        allowRemoteAccess:
          type: boolean
          description: Whether or not this port allows remote access for site-to-site
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        concurrentlySchedulableTaskCount:
          type: integer
          format: int32
          description: The number of tasks that should be concurrently scheduled for
            the port.
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        portFunction:
          type: string
          description: Specifies how the Port should function
          enum:
          - STANDARD
          - FAILURE
        position:
          $ref: "#/components/schemas/Position"
        scheduledState:
          type: string
          description: The scheduled state of the component
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        type:
          type: string
          description: The type of port.
          enum:
          - INPUT_PORT
          - OUTPUT_PORT
    VersionedProcessGroup:
      type: object
      properties:
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        connections:
          type: array
          description: The Connections
          items:
            $ref: "#/components/schemas/VersionedConnection"
          uniqueItems: true
        controllerServices:
          type: array
          description: The Controller Services
          items:
            $ref: "#/components/schemas/VersionedControllerService"
          uniqueItems: true
        defaultBackPressureDataSizeThreshold:
          type: string
          description: Default value used in this Process Group for the maximum data
            size of objects that can be queued before back pressure is applied.
        defaultBackPressureObjectThreshold:
          type: integer
          format: int64
          description: Default value used in this Process Group for the maximum number
            of objects that can be queued before back pressure is applied.
        defaultFlowFileExpiration:
          type: string
          description: The default FlowFile Expiration for this Process Group.
        executionEngine:
          type: string
          description: The Execution Engine that should be used to run the components
            within the group.
          enum:
          - STANDARD
          - STATELESS
          - INHERITED
        flowFileConcurrency:
          type: string
          description: The configured FlowFile Concurrency for the Process Group
        flowFileOutboundPolicy:
          type: string
          description: The FlowFile Outbound Policy for the Process Group
        funnels:
          type: array
          description: The Funnels
          items:
            $ref: "#/components/schemas/VersionedFunnel"
          uniqueItems: true
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        inputPorts:
          type: array
          description: The Input Ports
          items:
            $ref: "#/components/schemas/VersionedPort"
          uniqueItems: true
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        labels:
          type: array
          description: The Labels
          items:
            $ref: "#/components/schemas/VersionedLabel"
          uniqueItems: true
        logFileSuffix:
          type: string
          description: The log file suffix for this Process Group for dedicated logging.
        maxConcurrentTasks:
          type: integer
          format: int32
          description: The maximum number of concurrent tasks that should be scheduled
            for this Process Group when using the Stateless Engine
        name:
          type: string
          description: The component's name
        outputPorts:
          type: array
          description: The Output Ports
          items:
            $ref: "#/components/schemas/VersionedPort"
          uniqueItems: true
        parameterContextName:
          type: string
          description: The name of the parameter context used by this process group
        position:
          $ref: "#/components/schemas/Position"
        processGroups:
          type: array
          description: The child Process Groups
          items:
            $ref: "#/components/schemas/VersionedProcessGroup"
          uniqueItems: true
        processors:
          type: array
          description: The Processors
          items:
            $ref: "#/components/schemas/VersionedProcessor"
          uniqueItems: true
        remoteProcessGroups:
          type: array
          description: The Remote Process Groups
          items:
            $ref: "#/components/schemas/VersionedRemoteProcessGroup"
          uniqueItems: true
        scheduledState:
          type: string
          description: "The Scheduled State of the Process Group, if the group is\
            \ configured to use the Stateless Execution Engine. Otherwise, this value\
            \ has no relevance."
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        statelessFlowTimeout:
          type: string
          description: The maximum amount of time that the flow is allows to run using
            the Stateless engine before it times out and is considered a failure
        versionedFlowCoordinates:
          $ref: "#/components/schemas/VersionedFlowCoordinates"
    VersionedProcessor:
      type: object
      description: The Processors
      properties:
        annotationData:
          type: string
          description: The annotation data for the processor used to relay configuration
            between a custom UI and the procesosr.
        autoTerminatedRelationships:
          type: array
          description: "The names of all relationships that cause a flow file to be\
            \ terminated if the relationship is not connected elsewhere. This property\
            \ differs from the 'isAutoTerminate' property of the RelationshipDTO in\
            \ that the RelationshipDTO is meant to depict the current configuration,\
            \ whereas this property can be set in a DTO when updating a Processor\
            \ in order to change which Relationships should be auto-terminated."
          items:
            type: string
            description: "The names of all relationships that cause a flow file to\
              \ be terminated if the relationship is not connected elsewhere. This\
              \ property differs from the 'isAutoTerminate' property of the RelationshipDTO\
              \ in that the RelationshipDTO is meant to depict the current configuration,\
              \ whereas this property can be set in a DTO when updating a Processor\
              \ in order to change which Relationships should be auto-terminated."
          uniqueItems: true
        backoffMechanism:
          type: string
          description: Determines whether the FlowFile should be penalized or the
            processor should be yielded between retries.
          enum:
          - "PENALIZE_FLOWFILE, YIELD_PROCESSOR"
        bulletinLevel:
          type: string
          description: The level at which the processor will report bulletins.
        bundle:
          $ref: "#/components/schemas/Bundle"
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        concurrentlySchedulableTaskCount:
          type: integer
          format: int32
          description: The number of tasks that should be concurrently schedule for
            the processor. If the processor doesn't allow parallol processing then
            any positive input will be ignored.
        executionNode:
          type: string
          description: Indicates the node where the process will execute.
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        maxBackoffPeriod:
          type: string
          description: Maximum amount of time to be waited during a retry period.
        name:
          type: string
          description: The component's name
        penaltyDuration:
          type: string
          description: The amout of time that is used when the process penalizes a
            flowfile.
        position:
          $ref: "#/components/schemas/Position"
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties for the component. Properties whose value
              is not set will only contain the property name.
          description: The properties for the component. Properties whose value is
            not set will only contain the property name.
        propertyDescriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/VersionedPropertyDescriptor"
          description: The property descriptors for the component.
        retriedRelationships:
          type: array
          description: All the relationships should be retried.
          items:
            type: string
            description: All the relationships should be retried.
          uniqueItems: true
        retryCount:
          type: integer
          format: int32
          description: Overall number of retries.
        runDurationMillis:
          type: integer
          format: int64
          description: The run duration for the processor in milliseconds.
        scheduledState:
          type: string
          description: The scheduled state of the component
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        schedulingPeriod:
          type: string
          description: The frequency with which to schedule the processor. The format
            of the value will depend on th value of schedulingStrategy.
        schedulingStrategy:
          type: string
          description: Indicates how the processor should be scheduled to run.
        style:
          type: object
          additionalProperties:
            type: string
            description: Stylistic data for rendering in a UI
          description: Stylistic data for rendering in a UI
        type:
          type: string
          description: The type of the extension component
        yieldDuration:
          type: string
          description: The amount of time that must elapse before this processor is
            scheduled again after yielding.
    VersionedPropertyDescriptor:
      type: object
      description: The property descriptors for the component.
      properties:
        displayName:
          type: string
          description: The display name of the property
        dynamic:
          type: boolean
          description: Whether or not the property is user-defined
        identifiesControllerService:
          type: boolean
          description: Whether or not the property provides the identifier of a Controller
            Service
        name:
          type: string
          description: The name of the property
        resourceDefinition:
          $ref: "#/components/schemas/VersionedResourceDefinition"
        sensitive:
          type: boolean
          description: Whether or not the property is considered sensitive
    VersionedRemoteGroupPort:
      type: object
      description: "A Set of Output Ports that can be connected to, in order to pull\
        \ data from the remote NiFi instance"
      properties:
        batchSize:
          $ref: "#/components/schemas/BatchSize"
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        concurrentlySchedulableTaskCount:
          type: integer
          format: int32
          description: The number of task that may transmit flowfiles to the target
            port concurrently.
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        position:
          $ref: "#/components/schemas/Position"
        remoteGroupId:
          type: string
          description: The id of the remote process group that the port resides in.
        scheduledState:
          type: string
          description: The scheduled state of the component
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        targetId:
          type: string
          description: The ID of the port on the target NiFi instance
        useCompression:
          type: boolean
          description: Whether the flowfiles are compressed when sent to the target
            port.
    VersionedRemoteProcessGroup:
      type: object
      description: The Remote Process Groups
      properties:
        comments:
          type: string
          description: The user-supplied comments for the component
        communicationsTimeout:
          type: string
          description: The time period used for the timeout when communicating with
            the target.
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        inputPorts:
          type: array
          description: "A Set of Input Ports that can be connected to, in order to\
            \ send data to the remote NiFi instance"
          items:
            $ref: "#/components/schemas/VersionedRemoteGroupPort"
          uniqueItems: true
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        localNetworkInterface:
          type: string
          description: "The local network interface to send/receive data. If not specified,\
            \ any local address is used. If clustered, all nodes must have an interface\
            \ with this identifier."
        name:
          type: string
          description: The component's name
        outputPorts:
          type: array
          description: "A Set of Output Ports that can be connected to, in order to\
            \ pull data from the remote NiFi instance"
          items:
            $ref: "#/components/schemas/VersionedRemoteGroupPort"
          uniqueItems: true
        position:
          $ref: "#/components/schemas/Position"
        proxyHost:
          type: string
        proxyPassword:
          type: string
        proxyPort:
          type: integer
          format: int32
        proxyUser:
          type: string
        targetUris:
          type: string
          description: "The target URIs of the remote process group. If target uris\
            \ is not set but target uri is set, then returns the single target uri.\
            \ If neither target uris nor target uri is set, then returns null."
        transportProtocol:
          type: string
          description: The Transport Protocol that is used for Site-to-Site communications
          enum:
          - "RAW, HTTP"
        yieldDuration:
          type: string
          description: "When yielding, this amount of time must elapse before the\
            \ remote process group is scheduled again."
    VersionedReportingTask:
      type: object
      description: The reporting tasks
      properties:
        annotationData:
          type: string
          description: The annotation for the reporting task. This is how the custom
            UI relays configuration to the reporting task.
        bundle:
          $ref: "#/components/schemas/Bundle"
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        position:
          $ref: "#/components/schemas/Position"
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties for the component. Properties whose value
              is not set will only contain the property name.
          description: The properties for the component. Properties whose value is
            not set will only contain the property name.
        propertyDescriptors:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/VersionedPropertyDescriptor"
          description: The property descriptors for the component.
        scheduledState:
          type: string
          description: Indicates the scheduled state for the Reporting Task
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        schedulingPeriod:
          type: string
          description: The frequency with which to schedule the reporting task. The
            format of the value will depend on the value of schedulingStrategy.
        schedulingStrategy:
          type: string
          description: Indicates scheduling strategy that should dictate how the reporting
            task is triggered.
        type:
          type: string
          description: The type of the extension component
    VersionedReportingTaskImportRequestEntity:
      type: object
      properties:
        disconnectedNodeAcknowledged:
          type: boolean
          description: The disconnected node acknowledged flag
        reportingTaskSnapshot:
          $ref: "#/components/schemas/VersionedReportingTaskSnapshot"
      xml:
        name: versionedReportingTaskImportRequestEntity
    VersionedReportingTaskImportResponseEntity:
      type: object
      properties:
        controllerServices:
          type: array
          description: The controller services created by the import
          items:
            $ref: "#/components/schemas/ControllerServiceEntity"
          uniqueItems: true
        reportingTasks:
          type: array
          description: The reporting tasks created by the import
          items:
            $ref: "#/components/schemas/ReportingTaskEntity"
          uniqueItems: true
      xml:
        name: versionedReportingTaskImportResponseEntity
    VersionedReportingTaskSnapshot:
      type: object
      properties:
        controllerServices:
          type: array
          description: The controller services
          items:
            $ref: "#/components/schemas/VersionedControllerService"
        reportingTasks:
          type: array
          description: The reporting tasks
          items:
            $ref: "#/components/schemas/VersionedReportingTask"
    VersionedResourceDefinition:
      type: object
      description: "Returns the Resource Definition that defines which type(s) of\
        \ resource(s) this property references, if any"
      properties:
        cardinality:
          type: string
          description: The cardinality of the resource
          enum:
          - SINGLE
          - MULTIPLE
        resourceTypes:
          type: array
          description: The types of resource that the Property Descriptor is allowed
            to reference
          items:
            type: string
            description: The types of resource that the Property Descriptor is allowed
              to reference
            enum:
            - FILE
            - DIRECTORY
            - TEXT
            - URL
          uniqueItems: true
